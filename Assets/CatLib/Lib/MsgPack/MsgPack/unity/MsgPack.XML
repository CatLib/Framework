<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsgPack</name>
    </assembly>
    <members>
        <member name="T:MsgPack.Volatile">
            <summary>
            	Polyfill for System.Threading.Volatile.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EnumTypedMessagePackSerializerWrapper`1">
            <summary>
            	Wraps non-generic <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> which implements <see cref="T:MsgPack.Serialization.ICustomizableEnumSerializer"/> to avoid AOT issue.
            </summary>
            <typeparam name="T">The type to be serialized.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.#ctor(MsgPack.Serialization.SerializationContext,System.Type,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.NonGenericMessagePackSerializer"/> class with explicitly specified compatibility option.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="targetType">The type to be serialized.</param>
            <param name="capabilities">The capability flags for this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.#ctor(MsgPack.Serialization.SerializationContext,System.Type,MsgPack.PackerCompatibilityOptions,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.NonGenericMessagePackSerializer"/> class with explicitly specified compatibility option.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="targetType">The type to be serialized.</param>
            <param name="packerCompatibilityOptions">The <see cref="T:MsgPack.PackerCompatibilityOptions"/> for new packer creation.</param>
            <param name="capabilities">The capability flags for this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
            <remarks>
            	This method also supports backword compatibility with 0.4.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.Pack(System.IO.Stream,System.Object)">
            <summary>
            	Serializes specified object to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Destination <see cref="T:System.IO.Stream"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The type of <paramref name="objectTree" /> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.Unpack(System.IO.Stream)">
            <summary>
            	Deserialize object from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Source <see cref="T:System.IO.Stream"/>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.PackToCore(MsgPack.Packer,System.Object)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The type of <paramref name="objectTree" /> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.NonGenericMessagePackSerializer.UnpackToCore(MsgPack.Unpacker,System.Object)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of <paramref name="collection" /> is not a collection.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.TypedMessagePackSerializerWrapper`1">
            <summary>
            	Wraps non-generic <see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/> to avoid AOT issue.
            </summary>
            <typeparam name="T">The type to be serialized.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2"/> 
            	for collection types which implement <see cref="T:System.Collections.Generic.ICollection`1"/> or <c>IReadOnlyCollection{T}</c>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the item of collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TCollection"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2.GetCount(`0)">
            <summary>
            	When overridden in derived class, returns count of the collection.
            </summary>
            <param name="collection">A collection. This value will not be <c>null</c>.</param>
            <returns>The count of the <paramref name="collection"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TCollection"/> is abstract type.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.CreateInstance(System.Int32)"/>, and then fill deserialized items to resultong collection.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializerBase`2"/> 
            	for collection types which implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the item of collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2.GetCount(`0)">
            <summary>
            	Returns count of the collection.
            </summary>
            <param name="collection">A collection. This value will not be <c>null</c>.</param>
            <returns>The count of the <paramref name="collection"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer`2.AddItem(`0,`1)">
            <summary>
            	Adds the deserialized item to the collection on <typeparamref name="TCollection"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="collection">The collection to be added.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3">
            <summary>
            	Provides common features for generic dictionary serializers.
            </summary>
            <typeparam name="TDictionary">The type of the dictionary.</typeparam>
            <typeparam name="TKey">The type of the key of dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of dictionary.</typeparam>
            <remarks>
            	This class provides framework to implement variable collection serializer, and this type seals some virtual members to maximize future backward compatibility.
            	If you cannot use this class, you can implement your own serializer which inherits <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> and implements <see cref="T:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TDictionary"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.GetCount(`0)">
            <summary>
            	When overridden in derived class, returns count of the dictionary.
            </summary>
            <param name="dictionary">A collection. This value will not be <c>null</c>.</param>
            <returns>The count of the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TDictionary"/> is abstract type.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.CreateInstance(System.Int32)"/>, and then fill deserialized items to resultong collection.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.CreateInstance(System.Int32)">
            <summary>
            	Creates a new collection instance with specified initial capacity.
            </summary>
            <param name="initialCapacity">
            	The initial capacy of creating collection.
            	Note that this parameter may <c>0</c> for non-empty collection.
            </param>
            <returns>
            New collection instance. This value will not be <c>null</c>.
            </returns>
            <remarks>
            	An author of <see cref="T:MsgPack.Unpacker" /> could implement unpacker for non-MessagePack format,
            	so implementer of this interface should not rely on that <paramref name="initialCapacity" /> reflects actual items count.
            	For example, JSON unpacker cannot supply collection items count efficiently.
            </remarks>
            <seealso cref="M:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory.CreateInstance(System.Int32)"/>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TDictionary"/> is not collection.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.AddItem(`0,`1,`2)">
            <summary>
            	When implemented by derive class, 
            	adds the deserialized item to the collection on <typeparamref name="TDictionary"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="dictionary">The dictionary to be added.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added.</param>
            <exception cref="T:System.NotSupportedException">
            	This implementation always throws it.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3">
            <summary>
            	Provides basic features for generic <see cref="T:System.Collections.Generic.IDictionary`2"/> serializers.
            </summary>
            <typeparam name="TDictionary">The type of the dictionary.</typeparam>
            <typeparam name="TKey">The type of the key of dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of dictionary.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3.GetCount(`0)">
            <summary>
            	Returns count of the dictionary.
            </summary>
            <param name="dictionary">A collection. This value will not be <c>null</c>.</param>
            <returns>The count of the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializer`3.AddItem(`0,`1,`2)">
            <summary>
            	Adds the deserialized item to the collection on <typeparamref name="TDictionary"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.CollectionSerializers.DictionaryMessagePackSerializerBase`3.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="dictionary">The dictionary to be added.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added.</param>
            <exception cref="T:System.NotSupportedException">
            	This implementation always throws it.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2">
            <summary>
            	Provides basic features for non-dictionary generic collection serializers.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the item of the collection.</typeparam>
            <remarks>
            	This class provides framework to implement variable collection serializer, and this type seals some virtual members to maximize future backward compatibility.
            	If you cannot use this class, you can implement your own serializer which inherits <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> and implements <see cref="T:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.CreateInstance(System.Int32)">
            <summary>
            	Creates a new collection instance with specified initial capacity.
            </summary>
            <param name="initialCapacity">
            	The initial capacy of creating collection.
            	Note that this parameter may <c>0</c> for non-empty collection.
            </param>
            <returns>
            New collection instance. This value will not be <c>null</c>.
            </returns>
            <remarks>
            	An author of <see cref="T:MsgPack.Unpacker" /> could implement unpacker for non-MessagePack format,
            	so implementer of this interface should not rely on that <paramref name="initialCapacity" /> reflects actual items count.
            	For example, JSON unpacker cannot supply collection items count efficiently.
            </remarks>
            <seealso cref="M:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory.CreateInstance(System.Int32)"/>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TCollection"/> is not collection.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.UnpackToCore(MsgPack.Unpacker,`0,System.Int32)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker">The <see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">The collection that the items to be stored. This value will not be <c>null</c>.</param>
            <param name="itemsCount">The count of items of the collection in the msgpack stream.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.AddItem(`0,`1)">
            <summary>
            	When implemented by derive class, 
            	adds the deserialized item to the collection on <typeparamref name="TCollection"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="collection">The collection to be added.</param>
            <param name="item">The item to be added.</param>
            <exception cref="T:System.NotSupportedException">
            	This implementation always throws it.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializerBase`2"/> 
            	for collection types which do not implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the item of collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.EnumerableMessagePackSerializer`2.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TCollection"/> is not serializable etc.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory">
            <summary>
            	Defines common interface for serializers which can genereate new empty instance.
            </summary>
            <remarks>
            	All custom manually implemented or automatically generated serializers which treat collection (that is, they return objects implementing <see cref="T:System.Collections.IEnumerable"/> except few exceptions like <see cref="T:System.String"/>).
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory.CreateInstance(System.Int32)">
            <summary>
            	Creates a new collection instance with specified initial capacity.
            </summary>
            <param name="initialCapacity">
            	The initial capacy of creating collection.
            	Note that this parameter may <c>0</c> for non-empty collection.
            </param>
            <returns>New collection instance. This value will not be <c>null</c>.</returns>
            <remarks>
            	An author of <see cref="T:MsgPack.Unpacker"/> could implement unpacker for non-MessagePack format,
            	so implementer of this interface should not rely on that <paramref name="initialCapacity"/> reflects actual items count.
            	For example, JSON unpacker cannot supply collection items count efficiently.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1"/> 
            	for collection types which implement <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TCollection"/> is not serializable etc.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1">
            <summary>
            	Provides basic features for non-generic dictionary serializers.
            </summary>
            <typeparam name="TDictionary">The type of the dictionary.</typeparam>
            <remarks>
            	This class provides framework to implement variable collection serializer, and this type seals some virtual members to maximize future backward compatibility.
            	If you cannot use this class, you can implement your own serializer which inherits <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> and implements <see cref="T:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TDictionary"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TDictionary"/> is abstract type.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.CreateInstance(System.Int32)"/>, and then fill deserialized items to resultong collection.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.CreateInstance(System.Int32)">
            <summary>
            	Creates a new collection instance with specified initial capacity.
            </summary>
            <param name="initialCapacity">
            	The initial capacy of creating collection.
            	Note that this parameter may <c>0</c> for non-empty collection.
            </param>
            <returns>
            New collection instance. This value will not be <c>null</c>.
            </returns>
            <remarks>
            	An author of <see cref="T:MsgPack.Unpacker" /> could implement unpacker for non-MessagePack format,
            	so implementer of this interface should not rely on that <paramref name="initialCapacity" /> reflects actual items count.
            	For example, JSON unpacker cannot supply collection items count efficiently.
            </remarks>
            <seealso cref="M:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory.CreateInstance(System.Int32)"/>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericDictionaryMessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TDictionary"/> is not collection.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1">
            <summary>
            	Provides basic features for non-dictionary non-generic collection serializers.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <remarks>
            	This class provides framework to implement variable collection serializer, and this type seals some virtual members to maximize future backward compatibility.
            	If you cannot use this class, you can implement your own serializer which inherits <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> and implements <see cref="T:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.CreateInstance(System.Int32)">
            <summary>
            	Creates a new collection instance with specified initial capacity.
            </summary>
            <param name="initialCapacity">
            	The initial capacy of creating collection.
            	Note that this parameter may <c>0</c> for non-empty collection.
            </param>
            <returns>
            New collection instance. This value will not be <c>null</c>.
            </returns>
            <remarks>
            	An author of <see cref="T:MsgPack.Unpacker" /> could implement unpacker for non-MessagePack format,
            	so implementer of this interface should not rely on that <paramref name="initialCapacity" /> reflects actual items count.
            	For example, JSON unpacker cannot supply collection items count efficiently.
            </remarks>
            <seealso cref="M:MsgPack.Serialization.CollectionSerializers.ICollectionInstanceFactory.CreateInstance(System.Int32)"/>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker">The <see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">The collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TCollection"/> is not collection.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.UnpackToCore(MsgPack.Unpacker,`0,System.Int32)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker">The <see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">The collection that the items to be stored. This value will not be <c>null</c>.</param>
            <param name="itemsCount">The count of items of the collection in the msgpack stream.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.AddItem(`0,System.Object)">
            <summary>
            	When implemented by derive class, 
            	adds the deserialized item to the collection on <typeparamref name="TCollection"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="collection">The collection to be added.</param>
            <param name="item">The item to be added.</param>
            <exception cref="T:System.NotSupportedException">
            	This implementation always throws it.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializer`1">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1"/> 
            	for collection types which implement <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="TCollection"/> is not serializable etc.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1">
            <summary>
            	Provides common implementation of <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericCollectionMessagePackSerializer`1"/> 
            	for collection types which implement <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="TList">The type of the collection.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="schema">
            	The schema for collection itself or its items for the member this instance will be used to. 
            	<c>null</c> will be considered as <see cref="F:MsgPack.Serialization.PolymorphismSchema.Default"/>.
            </param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="ownerContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="TList"/> is abstract type.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.CollectionSerializers.NonGenericEnumerableMessagePackSerializerBase`1.CreateInstance(System.Int32)"/>, and then fill deserialized items to resultong collection.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.CollectionSerializers.NonGenericListMessagePackSerializer`1.AddItem(`0,System.Object)">
            <summary>
            	Adds the deserialized item to the collection on <typeparamref name="TList"/> specific manner
            	to implement <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)"/>.
            </summary>
            <param name="collection">The collection to be added.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="T:MsgPack.Serialization.DataMemberContract">
            <summary>
            	Represents member's data contract.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.DataMemberContract.Null">
            <summary>
            	Null object.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.Name">
            <summary>
            	Gets the name of the member.
            </summary>
            <value>
            	The name of the member.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.Id">
            <summary>
            	Gets the ID of the member.
            </summary>
            <value>
            	The ID of the member. Default is <c>-1</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.NilImplication">
            <summary>
            	Gets the nil implication.
            </summary>
            <value>
            	The nil implication.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct.
            </summary>
            <param name="member">The target member.</param>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo,System.String,MsgPack.Serialization.NilImplication,System.Nullable{System.Int32})">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct.
            </summary>
            <param name="member">The target member.</param>
            <param name="name">The name of member.</param>
            <param name="nilImplication">The implication of the nil value for the member.</param>
            <param name="id">The ID of the member. This value cannot be negative and must be unique in the type.</param>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo,MsgPack.Serialization.MessagePackMemberAttribute)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct from <see cref="T:MsgPack.Serialization.MessagePackMemberAttribute"/>.
            </summary>
            <param name="member">The target member.</param>
            <param name="attribute">The MessagePack member attribute.</param>
        </member>
        <member name="T:MsgPack.Serialization.DateTimeConversionMethod">
            <summary>
            	Defines behavior of built-in serializers to conversion of <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.DateTimeConversionMethod.Native">
            <summary>
            	Uses <see cref="P:System.DateTime.Ticks"/> context, that is, Gregorian 0000-01-01 based, 100 nano seconds resolution. This value also preserves <see cref="T:System.DateTimeKind"/>.
            </summary>
            <remarks>
            	As of 0.6, this value has been become default. This option prevents accidental data loss.
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.DateTimeConversionMethod.UnixEpoc">
            <summary>
            	Uses Unix epoc context, that is, Gregirian 1970-01-01 based, milliseconds resolution.
            </summary>
            <remarks>
            	Many binding such as Java uses this resolution, so this option gives maximom interoperability.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.DateTimeMemberConversionMethod">
            <summary>
            	Defines behavior of built-in serializers to conversion of <see cref="T:System.DateTime"/> value for specific member.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.DateTimeMemberConversionMethod.Default">
            <summary>
            	Uses systems default <see cref="T:MsgPack.Serialization.DateTimeConversionMethod"/> value.
            </summary>
            <remarks>
            	The systems default <see cref="F:MsgPack.Serialization.DateTimeConversionMethod.Native"/>.
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.DateTimeMemberConversionMethod.Native">
            <summary>
            	Uses <see cref="P:System.DateTime.Ticks"/> context, that is, Gregorian 0000-01-01 based, 100 nano seconds resolution. This value also preserves <see cref="T:System.DateTimeKind"/>.
            </summary>
            <remarks>
            	As of 0.6, this value has been become default. This option prevents accidental data loss.
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.DateTimeMemberConversionMethod.UnixEpoc">
            <summary>
            	Uses Unix epoc context, that is, Gregirian 1970-01-01 based, milliseconds resolution.
            </summary>
            <remarks>
            	Many binding such as Java uses this resolution, so this option gives maximom interoperability.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.DateTimeMessagePackSerializerHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Helper methods for date time message pack serializer.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.DateTimeMessagePackSerializerHelpers.DetermineDateTimeConversionMethod(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.DateTimeMemberConversionMethod)">
            <summary>
            	Determines <see cref="T:MsgPack.Serialization.DateTimeConversionMethod"/> for the target.
            </summary>
            <param name="context">Context information.</param>
            <param name="dateTimeMemberConversionMethod">The method argued by the member.</param>
            <returns>Determined <see cref="T:MsgPack.Serialization.DateTimeConversionMethod"/> for the target.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.DefaultConcreteTypeRepository">
            <summary>
            	Repository of known concrete collection type for abstract collection type.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.DefaultConcreteTypeRepository.Get(System.Type)">
            <summary>
            	Gets the default type for the collection.
            </summary>
            <param name="abstractCollectionType">Type of the abstract collection.</param>
            <returns>
            	Type of default concrete collection.
            	If concrete collection type of <paramref name="abstractCollectionType"/>, then returns <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="abstractCollectionType"/> is <c>null</c>.
            </exception>
            <remarks>
            	By default, following types are registered:
            	<list type="table">
            		<listheader>
            			<term>Abstract Collection Type</term>
            			<description>Concrete Default Collection Type</description>
            		</listheader>
            		<item>
            			<term><see cref="T:System.Collections.Generic.IEnumerable`1"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/></description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.Generic.ICollection`1"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/></description>
            		</item>
            		<item>
            			<term><c>ISet{T}</c> (.NET 4 or lator)</term>
            			<description><see cref="T:System.Collections.Generic.HashSet`1"/></description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.Generic.IList`1"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/></description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.Generic.IDictionary`2"/></term>
            			<description><see cref="T:System.Collections.Generic.Dictionary`2"/></description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.IEnumerable"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MsgPack.MessagePackObject"/>.</description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.ICollection"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MsgPack.MessagePackObject"/>.</description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.IList"/></term>
            			<description><see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MsgPack.MessagePackObject"/>.</description>
            		</item>
            		<item>
            			<term><see cref="T:System.Collections.IDictionary"/></term>
            			<description><see cref="T:MsgPack.MessagePackObjectDictionary"/></description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.DefaultConcreteTypeRepository.Register(System.Type,System.Type)">
            <summary>
            	Registers the default type of the collection.
            </summary>
            <param name="abstractCollectionType">Type of the abstract collection.</param>
            <param name="defaultCollectionType">Default concrete type of the <paramref name="abstractCollectionType"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="abstractCollectionType"/> is <c>null</c>.
            	Or <paramref name="defaultCollectionType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="abstractCollectionType"/> is not collection type.
            	Or <paramref name="defaultCollectionType"/> is abstract class or interface.
            	Or <paramref name="defaultCollectionType"/> is open generic type but <paramref name="abstractCollectionType"/> is closed generic type.
            	Or <paramref name="defaultCollectionType"/> is closed generic type but <paramref name="abstractCollectionType"/> is open generic type.
            	Or <paramref name="defaultCollectionType"/> does not have same arity for <paramref name="abstractCollectionType"/>.
            	Or <paramref name="defaultCollectionType"/> is not assignable to <paramref name="abstractCollectionType"/>
            	or the constructed type from <paramref name="defaultCollectionType"/> will not be assignable to the constructed type from <paramref name="abstractCollectionType"/>.
            </exception>
            <remarks>
            	If you want to overwrite default type for collection interfaces, you can use this method.
            	Note that this method only supports collection interface, that is subtype of the <see cref="T:System.Collections.IEnumerable"/> interface.
            	<note>
            		If you register invalid type for <paramref name="defaultCollectionType"/>, then runtime exception will be occurred.
            		For example, you register <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> and <see cref="T:System.String"/> pair, but it will cause runtime error.
            	</note>
            </remarks>
            <seealso cref="M:MsgPack.Serialization.DefaultConcreteTypeRepository.Get(System.Type)"/>
        </member>
        <member name="M:MsgPack.Serialization.DefaultConcreteTypeRepository.Unregister(System.Type)">
            <summary>
            	Unregisters the default type of the collection.
            </summary>
            <param name="abstractCollectionType">Type of the abstract collection.</param>
            <returns>
            	<c>true</c> if default collection type is removed successfully;
            	otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.AbstractCollectionSerializerHelper">
            <summary>
            	Implements non-generic or common portion of abstract collection serializers.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.DateTimeMessagePackSerializerProvider">
            <summary>
            	Provides runtime selection ability for <see cref="T:System.DateTime"/> serialization.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.DateTimeOffsetMessagePackSerializer">
            <summary>
            	<see cref="T:System.DateTimeOffset"/> serializer using Unix Epoc or native representation.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.DateTimeOffsetMessagePackSerializerProvider">
            <summary>
            	Provides runtime selection ability for <see cref="T:System.DateTimeOffset"/> serialization.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.GenericSerializer">
            <summary>
            	Defines serializer factory for well known structured types.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.DefaultSerializers.GenericSerializer.IsSupported(System.Type,MsgPack.Serialization.CollectionTraits,System.Boolean)">
            <summary>
            	Determines whether the specified type is supported from this class.
            </summary>
            <param name="type">The type to be determined.</param>
            <param name="traits">The known <see cref="T:MsgPack.Serialization.CollectionTraits"/> of the <paramref name="type"/>.</param>
            <param name="preferReflectionBasedSerializer"><c>true</c> to prefer reflection based collection serializers instead of dyhnamic generated serializers.</param>
            <returns><c>true</c> when the <paramref name="type"/> is supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.DefaultSerializers.MessagePackObjectExtensions.DeserializeAsInt64(MsgPack.MessagePackObject)">
            <summary>
            	Invokes <see cref="M:MsgPack.MessagePackObject.AsInt64"/> in deserializaton manner.
            </summary>
            <param name="source"><see cref="T:MsgPack.MessagePackObject"/>.</param>
            <returns>A deserialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="source"/> is not expected type.</exception>
        </member>
        <member name="M:MsgPack.Serialization.DefaultSerializers.MessagePackObjectExtensions.DeserializeAsString(MsgPack.MessagePackObject)">
            <summary>
            	Invokes <see cref="M:MsgPack.MessagePackObject.AsString"/> in deserializaton manner.
            </summary>
            <param name="source"><see cref="T:MsgPack.MessagePackObject"/>.</param>
            <returns>A deserialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="source"/> is not expected type.</exception>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.NativeDateTimeMessagePackSerializer">
            <summary>
            	<see cref="T:System.DateTime"/> serializer using native representation.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DefaultSerializers.UnixEpocDateTimeMessagePackSerializer">
            <summary>
            	<see cref="T:System.DateTime"/> serializer using Unix Epoc representation.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.DictionaryKeyTransformers">
            <summary>
            	Defines built-in, out-of-box handlers for <see cref="P:MsgPack.Serialization.DictionarySerlaizationOptions.KeyTransformer"/>.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.DictionaryKeyTransformers.LowerCamel">
            <summary>
            	Gets the handler which transforms upper camel casing (PascalCasing) key to lower camel casing (camelCasing) key.
            </summary>
            <value>
            	The handler which transforms upper camel casing (PascalCasing) key to lower camel casing (camelCasing) key.
            </value>
            <remarks>
            	This method uses <see cref="T:System.Char"/> based invariant culture to tranform casing, so non ASCII charactors may not be transformed correctly espetially surrogate pairs.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.DictionarySerlaizationOptions">
            <summary>
            	Defines dictionary (map) based serialization options.
            </summary>
            <remarks>
            	These options do NOT affect serialization of <see cref="T:System.Collections.IDictionary"/> 
            	and <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            	The option only affect dictionary (map) based serialization which can be enabled via <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/>.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.DictionarySerlaizationOptions.OmitNullEntry">
            <summary>
            	Gets or sets a value indicating whether omit key-value entry itself when the value is <c>null</c>.
            </summary>
            <value>
            	<c>true</c> if key-value entry itself when the value is <c>null</c>; otherwise, <c>false</c>.
            	The default is <c>false</c>.
            </value>
            <remarks>
            	When the value is <c>false</c>, null value entry is emitted as following (using JSON syntax for easy visualization):
            	<code><pre>
            	{ "Foo": null }
            	</pre></code>
            	else, the value is <c>true</c>, null value entry is ommitted as following:
            	<code><pre>
            	{}
            	</pre></code>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.DictionarySerlaizationOptions.KeyTransformer">
            <summary>
            	Gets or sets the key name handler which enables dictionary key name customization.
            </summary>
            <value>
            	The key name handler which enables dictionary key name customization.
            	The default value is <c>null</c>, which indicates that key name is not transformed.
            </value>
            <see cref="T:MsgPack.Serialization.DictionaryKeyTransformers"/>
        </member>
        <member name="M:MsgPack.Serialization.DictionarySerlaizationOptions.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DictionarySerlaizationOptions"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmitterFlavor">
            <summary>
            	Determines emitter strategy.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.FieldBased">
            <summary>
            	Caches serializers for the members (de)serialization.
            	It is default.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.CodeDomBased">
            <summary>
            	Uses code DOM code generation to (de)serialization.
            	It requires a long time but prevents runtime code generation at all.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.ReflectionBased">
            <summary>
            	Uses reflection to (de)serialization.
            	It requires additional resources but may work on most environment.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EnumMemberSerializationMethod">
            <summary>
            	Represents individual enum typed member serialization method.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EnumMemberSerializationMethod.Default">
            <summary>
            	Respects setting in enum type itself or system default.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EnumMemberSerializationMethod.ByName">
            <summary>
            	Enums are serialized with their name. It is more torelant to versioning but less efficient.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EnumMemberSerializationMethod.ByUnderlyingValue">
            <summary>
            	Enums are serialized with their underlying value. It is more efficient but less torelant to versioning.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EnumMessagePackSerializerHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Helper methods for enum message pack serializer.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializerHelpers.DetermineEnumSerializationMethod(MsgPack.Serialization.SerializationContext,System.Type,MsgPack.Serialization.EnumMemberSerializationMethod)">
            <summary>
            	Determines <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> for the target.
            </summary>
            <param name="context">Context information.</param>
            <param name="enumType">The target enum type.</param>
            <param name="enumMemberSerializationMethod">The method argued by the member.</param>
            <returns>Determined <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> for the target.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            	Or <paramref name="enumType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.EnumMessagePackSerializerProvider">
            <summary>
            	Implements <see cref="T:MsgPack.Serialization.MessagePackSerializerProvider"/> for enums.
            	This class accepts <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> as a provider parameter.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializerProvider.#ctor(System.Type,MsgPack.Serialization.ICustomizableEnumSerializer)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.EnumMessagePackSerializerProvider"/> class.
            </summary>
            <param name="enumType">A type of the enum.</param>
            <param name="serializer">The serializer implements <see cref="T:MsgPack.Serialization.ICustomizableEnumSerializer"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializerProvider.Get(MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Gets a serializer instance for specified parameter.
            </summary>
            <param name="context">A serialization context which holds global settings.</param>
            <param name="providerParameter">A provider specific parameter.</param>
            <returns>	
            A serializer object for specified parameter.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.EnumMessagePackSerializer`1">
            <summary>
            	Defines basic features for enum object serializers.
            </summary>
            <typeparam name="TEnum">The type of enum type itself.</typeparam>
            <remarks>
            	This class supports auto-detect on deserialization. So the constructor parameter only affects serialization behavior.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.EnumSerializationMethod)">
            <summary>
             Initializes a new instance of the <see cref="T:MsgPack.Serialization.EnumMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="serializationMethod">The <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> which determines serialization form of the enums.</param>
            <exception cref="T:System.InvalidOperationException"><c>TEnum</c> is not enum type.</exception>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializer`1.PackUnderlyingValueTo(MsgPack.Packer,`0)">
            <summary>
            	Packs enum value as its underlying value.
            </summary>
            <param name="packer">The packer.</param>
            <param name="enumValue">The enum value to be packed.</param>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.EnumMessagePackSerializer`1.UnpackFromUnderlyingValue(MsgPack.MessagePackObject)">
            <summary>
            	Unpacks enum value from underlying integral value.
            </summary>
            <param name="messagePackObject">The message pack object which represents some integral value.</param>
            <returns>
            	An enum value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The type of integral value is not compatible with underlying type of the enum.</exception>
        </member>
        <member name="T:MsgPack.Serialization.EnumNameTransformers">
            <summary>
            	Defines built-in, out-of-box handlers for <see cref="P:MsgPack.Serialization.EnumSerializationOptions.NameTransformer"/>.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.EnumNameTransformers.LowerCamel">
            <summary>
            	Gets the handler which transforms upper camel casing (PascalCasing) name to lower camel casing (camelCasing) name.
            </summary>
            <value>
            	The handler which transforms upper camel casing (PascalCasing) name to lower camel casing (camelCasing) name.
            </value>
            <remarks>
            	This method uses <see cref="T:System.Char"/> based invariant culture to tranform casing, so non ASCII charactors may not be transformed correctly espetially surrogate pairs.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.EnumNameTransformers.UpperSnake">
            <summary>
            	Gets the handler which transforms upper camel casing (PascalCasing) name to upper snake casing (UPPER_SNAKE_CASING) name.
            </summary>
            <value>
            	The handler which transforms upper camel casing (PascalCasing) name to upper snake casing (UPPER_SNAKE_CASING) name.
            </value>
            <remarks>
            	This method uses <see cref="T:System.Char"/> based invariant culture to tranform casing, so non ASCII charactors may not be transformed correctly espetially surrogate pairs.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.EnumSerializationMethod">
            <summary>
            	Represents enum type serialization method.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EnumSerializationMethod.ByName">
            <summary>
            	Enums are serialized with their name. It is more torelant to versioning but less efficient.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EnumSerializationMethod.ByUnderlyingValue">
            <summary>
            	Enums are serialized with their underlying value. It is more efficient but less torelant to versioning.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EnumSerializationOptions">
            <summary>
            	Defines enum serialization options.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.EnumSerializationOptions.SerializationMethod">
            <summary>
            	Gets or sets the <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> to determine default serialization strategy of enum types.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> to determine default serialization strategy of enum types.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The setting value is invalid as <see cref="T:MsgPack.Serialization.EnumSerializationMethod"/> enum.</exception>
            <remarks>
            	A serialization strategy for specific <strong>member</strong> is determined as following:
            	<list type="numeric">
            		<item>If the member is marked with <see cref="T:MsgPack.Serialization.MessagePackEnumMemberAttribute"/> and its value is not <see cref="F:MsgPack.Serialization.EnumMemberSerializationMethod.Default"/>, then it will be used.</item>
            		<item>Otherwise, if the enum type itself is marked with <see cref="T:MsgPack.Serialization.MessagePackEnumAttribute"/>, then it will be used.</item>
            		<item>Otherwise, the value of this property will be used.</item>
            	</list>
            	Note that the default value of this property is <see cref="T:EnumSerializationMethod.ByName"/>, it is not size efficient but tolerant to unexpected enum definition change.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.EnumSerializationOptions.NameTransformer">
            <summary>
            	Gets or sets the key name handler which enables dictionary key name customization.
            </summary>
            <value>
            	The key name handler which enables dictionary key name customization.
            	The default value is <c>null</c>, which indicates that key name is not transformed.
            </value>
            <see cref="T:MsgPack.Serialization.EnumNameTransformers"/>
        </member>
        <member name="T:MsgPack.Serialization.ExtTypeCodeMapping">
            <summary>
            	Implements mapping table between known ext type codes and names.
            </summary>
            <remarks>
            	Well-known (pre-defined) ext type names are defined in <see cref="T:MsgPack.KnownExtTypeName"/>, and their default mapped codes are found in <see cref="T:MsgPack.KnownExtTypeCode"/>.
            </remarks>
            <threadsafety instance="true" static="true" />
        </member>
        <member name="P:MsgPack.Serialization.ExtTypeCodeMapping.Item(System.String)">
            <summary>
            	Gets a mapped byte to the specified ext type name.
            </summary>
            <param name="name">The name of the ext type.</param>
            <returns>
            	The byte code for specified ext type in the current context.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is empty.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> is not registered as known ext type name.</exception>
        </member>
        <member name="M:MsgPack.Serialization.ExtTypeCodeMapping.Add(System.String,System.Byte)">
            <summary>
            	Adds the known ext type mapping.
            </summary>
            <param name="name">The name of the ext type.</param>
            <param name="typeCode">The ext type code to be mapped.</param>
            <returns>
            	<c>true</c> if <paramref name="name"/> AND <paramref name="typeCode"/> were not registered and then newly registered; <c>false</c>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="typeCode"/> is greater than 0x7F.</exception>
        </member>
        <member name="M:MsgPack.Serialization.ExtTypeCodeMapping.Remove(System.String)">
            <summary>
            	Removes the mapping with specified name.
            </summary>
            <param name="name">The name of the ext type.</param>
            <returns>
            	<c>true</c> if <paramref name="name"/> was registered and has been removed successfully; <c>false</c>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:MsgPack.Serialization.ExtTypeCodeMapping.Remove(System.Byte)">
            <summary>
            	Removes the mapping with specified code.
            </summary>
            <param name="typeCode">The type code of the ext type.</param>
            <returns>
            	<c>true</c> if <paramref name="typeCode"/> was registered and has been removed successfully; <c>false</c>, otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="typeCode"/> is greater than 0x7F.</exception>
        </member>
        <member name="M:MsgPack.Serialization.ExtTypeCodeMapping.Clear">
            <summary>
            	Clears all mappings.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.ExtTypeCodeMapping.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            	A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <remarks>
            	This method causes internal collection copying, so this makes O(n) time.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.ICustomizableEnumSerializer">
            <summary>
            	Represents customizable enum serializer.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.ICustomizableEnumSerializer.GetCopyAs(MsgPack.Serialization.EnumSerializationMethod)">
            <summary>
            	Gets a copy with specified method.
            </summary>
            <param name="method">Enum serialization method.</param>
            <returns>This instance or copied instance corresponds to the specified serialization method.</returns>
        </member>
        <member name="T:MsgPack.Serialization.IdentifierUtility">
            <summary>
            	Utilities related to member/type ID.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.IMessagePackSerializer">
            <summary>
            	Defines non-generic message pack serializer interface.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.PackTo(MsgPack.Packer,System.Object)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="objectTree"/> is not compatible for this serializer.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of <paramref name="objectTree"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.UnpackFrom(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of deserializing is not serializable even if it can be serialized.
            </exception>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.UnpackTo(MsgPack.Unpacker,System.Object)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <param name="collection">Collection that the items to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="collection"/> is not compatible for this serializer.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of deserializing is not mutable collection.
            </exception>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/>
        </member>
        <member name="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer">
            <summary>
            	Defines non-generic message pack serializer interface for byte array which contains a single object.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.PackSingleObject(System.Object)">
            <summary>
            	Serialize specified object to the array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="objectTree">Object to be serialized.</param>
            <returns>An array of <see cref="T:System.Byte"/> which stores serialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of <paramref name="objectTree"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.UnpackSingleObject(System.Byte[])">
            <summary>
            	Deserialize a single object from the array of <see cref="T:System.Byte"/> which contains a serialized object.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> serialized value to be stored.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of deserializing is not serializable even if it can be serialized.
            </exception>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/>
            <remarks>
            	<para>
            		This method assumes that <paramref name="buffer"/> contains single serialized object dedicatedly,
            		so this method does not return any information related to actual consumed bytes.
            	</para>
            	<para>
            		This method is a counter part of <see cref="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.PackSingleObject(System.Object)"/>.
            	</para>
            </remarks>	
        </member>
        <member name="T:MsgPack.Serialization.INilImplicationHandlerOnUnpackedParameter`1">
            <summary>
            	Defines common interface for parameter of <see cref="M:MsgPack.Serialization.NilImplicationHandler`4.OnUnpacked(`3,MsgPack.Serialization.NilImplication)"/> method and its template methods.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.INilImplicationHandlerParameter">
            <summary>
            	Defines common interface for parameter of <see cref="M:MsgPack.Serialization.NilImplicationHandler`4.OnPacking(`2,MsgPack.Serialization.NilImplication)"/> method and its template methods.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1">
            <summary>
            	Lazy initialized serializer which delegates actual work for the other serializer implementation.
            </summary>
            <typeparam name="T">
            	The type of target type.
            </typeparam>
            <remarks>
            	This serializer is intended to support self-composit structure like directories or XML nodes.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">
            	The serialization context to support lazy retrieval.
            </param>
            <param name="providerParameter">A provider parameter to be passed in future.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackDateTimeMemberAttribute">
            <summary>
            	Marks that this <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> typed member has special characteristics on MessagePack serialization.
            </summary>
            <remarks>
            	If this attributes is used for incompatible typed members, this attribute will be ignored.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackDateTimeMemberAttribute.DateTimeConversionMethod">
            <summary>
            	Gets or sets the default serialization method for this enum typed member.
            </summary>
            <value>
            	The default serialization method for this enum typed member.
            	Note that the method for the enum type will be overrided with this.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackDateTimeMemberAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackDateTimeMemberAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackDeserializationConstructorAttribute">
            <summary>
            	Marks this constructor used as deserialization constructor.
            </summary>
            <remarks>
            	<para>
            		This attribute only used once per type.
            		If there are multiple constructors marked with this attribute in the type, <see cref="T:System.Runtime.Serialization.SerializationException"/> will be onccured in serializer generation.
            	</para>
            	<para>
            		Marking with this attribute is not required to generate serializer which uses constructor in deserialization, but this attribute is available in following purposes:
            		<list type="bullet">
            			<item>
            				<para>
            					Indicating force constructor deserialization instead of member deserialization. 
            					The serializer generation prefer member (that is using property setters and fields) deserialization as possible.
            					You can indicate to forcibly use constructor even when there are any setters/writable fields.
            				</para>
            				<para>
            					If you do not specify this attribute in this case, member deserialization strategy will be used.
            				</para>
            			</item>
            			<item>
            				<para>
            					Clarify the constructor which wil be used in deserialization when there are multiple constructors declared in the type. 
            					Although the serializer generator avoids default constructor and non-public constructors, it cannot resolve target constructor when there are multiple candidates (that is, public, parameterized constructors).
            				</para>
            				<para>
            					If you do not specify this attribute in this case, serializer generator throws <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            				</para>
            			</item>
            		</list>
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackDeserializationConstructorAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackDeserializationConstructorAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackEnumAttribute">
            <summary>
            	Marks that this enum type has special characteristics on MessagePack serialization.
            </summary>
            <remarks>
            	Enum types which are not marked with this attribute will be serialized as <see cref="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod"/> value.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackEnumAttribute.SerializationMethod">
            <summary>
            	Gets or sets the default serialization method for this enum type.
            </summary>
            <value>
            	The default serialization method for this enum type.
            	Note that the method for individual enum typed members will be overrided with <see cref="T:MsgPack.Serialization.MessagePackEnumMemberAttribute"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackEnumAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackEnumAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackEnumMemberAttribute">
            <summary>
            	Marks that this enum typed member has special characteristics on MessagePack serialization.
            </summary>
            <remarks>
            	If this attributes is used for non-enum typed members, this attribute will be ignored.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackEnumMemberAttribute.SerializationMethod">
            <summary>
            	Gets or sets the default serialization method for this enum typed member.
            </summary>
            <value>
            	The default serialization method for this enum typed member.
            	Note that the method for the enum type will be overrided with this.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackEnumMemberAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackEnumMemberAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackIgnoreAttribute">
            <summary>
            	Marks the field or the property should not be serialized/deserialized with MessagePack for CLI serialization mechanism.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackIgnoreAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackIgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackKnownTypeAttribute">
            <summary>
            	Marks that the runtime type of this member should be encoded with closed type codes for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the member
            	will be serialized as 2 element array as [ &lt;type-code&gt;, &lt;actual-value (array or map)&gt;] format 
            	where the type-code is utf-8 encoded string representing type in your application (system) context.
            	When you interop with other launages, the deserializer will be able to deserialize object which is actual type when serialized with interoperability.
            	<note>
            		You must use one-to-one relationship between type-code and the type.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownTypeAttribute.TypeCode">
            <summary>
            	Gets a type code to be bound.
            </summary>
            <value>
            	A type code to be bound.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownTypeAttribute.BindingType">
            <summary>
            	Gets the type of the binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownTypeAttribute.TypeCode"/>.
            </summary>
            <value>
            	The binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownTypeAttribute.TypeCode"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackKnownTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackKnownTypeAttribute"/> class.
            </summary>
            <param name="typeCode">A string type code to be bound.</param>
            <param name="bindingType">The binding <see cref="T:System.Type"/> for <paramref name="typeCode"/>.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute">
            <summary>
            	Marks that the runtime type of items/values of this collection/dictionary should be encoded with closed type codes for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the items/values of the collection/dictionary
            	will be serialized as 2 element array as [ &lt;type-code&gt;, &lt;actual-value (array or map)&gt;] format 
            	where the type-code is utf-8 encoded string representing type in your application (system) context.
            	When you interop with other launages, the deserializer will be able to deserialize object which is actual type when serialized with interoperability.
            	<note>
            		You must use one-to-one relationship between type-code and the type.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute.TypeCode">
            <summary>
            	Gets a type code to be bound.
            </summary>
            <value>
            	A type code to be bound.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute.BindingType">
            <summary>
            	Gets the type of the binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute.TypeCode"/>.
            </summary>
            <value>
            	The binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute.TypeCode"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackKnownCollectionItemTypeAttribute"/> class.
            </summary>
            <param name="typeCode">A string type code to be bound.</param>
            <param name="bindingType">The binding <see cref="T:System.Type"/> for <paramref name="typeCode"/>.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute">
            <summary>
            	Marks that the runtime type of keys of this dictionary should be encoded with closed type codes for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the keys of the dictionary
            	will be serialized as 2 element array as [ &lt;type-code&gt;, &lt;actual-value (array or map)&gt;] format 
            	where the type-code is utf-8 encoded string representing type in your application (system) context.
            	When you interop with other launages, the deserializer will be able to deserialize object which is actual type when serialized with interoperability.
            	<note>
            		You must use one-to-one relationship between type-code and the type.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute.TypeCode">
            <summary>
            	Gets a type code to be bound.
            </summary>
            <value>
            	A type code to be bound.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute.BindingType">
            <summary>
            	Gets the type of the binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute.TypeCode"/>.
            </summary>
            <value>
            	The binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute.TypeCode"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackKnownDictionaryKeyTypeAttribute"/> class.
            </summary>
            <param name="typeCode">A string type code to be bound.</param>
            <param name="bindingType">The binding <see cref="T:System.Type"/> for <paramref name="typeCode"/>.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute">
            <summary>
            	Marks that the runtime type of specified item of the tuple should be encoded with closed type codes for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the item of tuple,
            	will be serialized as 2 element array as [ &lt;type-code&gt;, &lt;actual-value (array or map)&gt;] format 
            	where the type-code is utf-8 encoded string representing type in your application (system) context.
            	When you interop with other launages, the deserializer will be able to deserialize object which is actual type when serialized with interoperability.
            	<note>
            		You must use one-to-one relationship between type-code and the type.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.TypeCode">
            <summary>
            	Gets a type code to be bound.
            </summary>
            <value>
            	A type code to be bound.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.BindingType">
            <summary>
            	Gets the type of the binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.TypeCode"/>.
            </summary>
            <value>
            	The binding <see cref="T:System.Type"/> for <see cref="P:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.TypeCode"/>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.ItemNumber">
            <summary>
            	Gets the target tuple item's number.
            </summary>
            <value>
            	The 1-based target tuple item's number.
            </value>
            <remarks>
            	<para>
            		If this value is not valid for the tuple, this whole instance should be ignored.
            	</para>
            	<para>
            		If same values are specified multiply, the result is undefined.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute.#ctor(System.Int32,System.String,System.Type)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute"/> class.
            </summary>
            <param name="itemNumber">The 1-based target item number of the tuple. The attribute which has invalid value should be ignored.</param>
            <param name="typeCode">A string type code to be bound.</param>
            <param name="bindingType">The binding <see cref="T:System.Type"/> for <paramref name="typeCode"/>.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackMemberAttribute">
            <summary>
            	Marks a field or a property to be serialized with MessagePack Serializer and defines some required informations to serialize.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackMemberAttribute.Id">
            <summary>
            	Gets the ID of the member.
            </summary>
            <value>
            	The ID of the member.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackMemberAttribute.Name">
            <summary>
            	Gets or sets the name of this member.
            </summary>
            <value>
            	The name which will be used in map key on serialized MessagePack stream.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackMemberAttribute.NilImplication">
            <summary>
            	Gets or sets the implication of the nil value.
            </summary>
            <value>
            	The implication of the nil value.
            	Default value is <see cref="F:NilImplication.MemberDefault"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackMemberAttribute.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackMemberAttribute"/> class.
            </summary>
            <param name="id">
            	The ID of the member. This value cannot be negative and must be unique in the type.
            </param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackRuntimeTypeAttribute">
            <summary>
            	Marks that the runtime type of this member should be encoded with type information for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the member will be serialized with .NET specific type information,
            	so deserializer will be able to deserialize object which is actual type when serialized instead of interoperability.
            	Because non-.NET enviroments (Java, Ruby, Go, etc.) cannot interpret .NET native type identifier, 
            	you should not use this attribute when the serialized stream will be possible to be used from non-.NET environment.
            	The typed object will be encoded as 2 elements array as follows, so your deserializer can skip type information as needed:
            	[ &lt;type-info&gt;, &lt;actual-value (array or map)&gt;]
            	In this point, type-info will be encoded as compressed assembly qualified name as follows:
            	[ &lt;compressed type full name&gt;, &lt;assembly simple name&gt;, &lt;version binary&gt;, &lt;culture string&gt;, &lt;public key token binary&gt;]
            	If the type full name starts with its assembly simple name, then the prefix matched to assembly simple name will be omitted 
            	(as a result, compressed type name starts with dot).
            	<note>
            		You should use this attribute CAREFULLY when you deserialize data from outside, because this feature can inject arbitary process in your code through
            		constructor and some virtual methods if exist.
            		It is highly recommended avoid using <see cref="T:System.Object" /> type as member's declaring type, 
            		you should specify your base class which and derived typed are fully controled under your organization instead.
            		It mitigate chance of potential exploits.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeTypeAttribute.VerifierType">
            <summary>
            	Gets or sets the type which implement type verfier method.
            </summary>
            <value>
            	The type which implement type verfier method.
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeTypeAttribute.VerifierMethodName">
            <summary>
            	Gets or sets the name of the method which implement type verification.
            </summary>
            <value>
            	The name of the method which implement type verification
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
            <remarks>
            	The type verfication method must be following:
            	<list type="bullet">
            		<item>The method has just only one parameter, which type must be <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</item>
            		<item>The method must return <see cref="T:System.Boolean" />. <c>true</c> indicates the verification result is OK; <c>false</c> indicates not OK.</item>
            		<item>The method can be static method or instance method. The accessibility is not limited.</item>
            	</list>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackRuntimeTypeAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackRuntimeTypeAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackRuntimeCollectionItemTypeAttribute">
            <summary>
            	Marks that the runtime type of items/values of this collection/dictionary should be encoded with type information for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the items/values of the collection/dictionary will be serialized with .NET specific type information,
            	so deserializer will be able to deserialize object which is actual type when serialized instead of interoperability.
            	Because non-.NET enviroments (Java, Ruby, Go, etc.) cannot interpret .NET native type identifier, 
            	you should not use this attribute when the serialized stream will be possible to be used from non-.NET environment.
            	The typed object will be encoded as 2 elements array as follows, so your deserializer can skip type information as needed:
            	[ &lt;type-info&gt;, &lt;actual-value (array or map)&gt;]
            	In this point, type-info will be encoded as compressed assembly qualified name as follows:
            	[ &lt;compressed type full name&gt;, &lt;assembly simple name&gt;, &lt;version binary&gt;, &lt;culture string&gt;, &lt;public key token binary&gt;]
            	If the type full name starts with its assembly simple name, then the prefix matched to assembly simple name will be omitted 
            	(as a result, compressed type name starts with dot).
            	<note>
            		You should use this attribute CAREFULLY when you deserialize data from outside, because this feature can inject arbitary process in your code through
            		constructor and some virtual methods if exist.
            		It is highly recommended avoid using <see cref="T:System.Object" /> type as member's declaring type, 
            		you should specify your base class which and derived typed are fully controled under your organization instead.
            		It mitigate chance of potential exploits.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeCollectionItemTypeAttribute.VerifierType">
            <summary>
            	Gets or sets the type which implement type verfier method.
            </summary>
            <value>
            	The type which implement type verfier method.
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeCollectionItemTypeAttribute.VerifierMethodName">
            <summary>
            	Gets or sets the name of the method which implement type verification.
            </summary>
            <value>
            	The name of the method which implement type verification
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
            <remarks>
            	The type verfication method must be following:
            	<list type="bullet">
            		<item>The method has just only one parameter, which type must be <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</item>
            		<item>The method must return <see cref="T:System.Boolean" />. <c>true</c> indicates the verification result is OK; <c>false</c> indicates not OK.</item>
            		<item>The method can be static method or instance method. The accessibility is not limited.</item>
            	</list>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackRuntimeCollectionItemTypeAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackRuntimeCollectionItemTypeAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackRuntimeDictionaryKeyTypeAttribute">
            <summary>
            	Marks that the runtime type of keys of this dictionary should be encoded with type information for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the keys of the dictionary will be serialized with .NET specific type information,
            	so deserializer will be able to deserialize object which is actual type when serialized instead of interoperability.
            	Because non-.NET enviroments (Java, Ruby, Go, etc.) cannot interpret .NET native type identifier, 
            	you should not use this attribute when the serialized stream will be possible to be used from non-.NET environment.
            	The typed object will be encoded as 2 elements array as follows, so your deserializer can skip type information as needed:
            	[ &lt;type-info&gt;, &lt;actual-value (array or map)&gt;]
            	In this point, type-info will be encoded as compressed assembly qualified name as follows:
            	[ &lt;compressed type full name&gt;, &lt;assembly simple name&gt;, &lt;version binary&gt;, &lt;culture string&gt;, &lt;public key token binary&gt;]
            	If the type full name starts with its assembly simple name, then the prefix matched to assembly simple name will be omitted 
            	(as a result, compressed type name starts with dot).
            	<note>
            		You should use this attribute CAREFULLY when you deserialize data from outside, because this feature can inject arbitary process in your code through
            		constructor and some virtual methods if exist.
            		It is highly recommended avoid using <see cref="T:System.Object" /> type as member's declaring type, 
            		you should specify your base class which and derived typed are fully controled under your organization instead.
            		It mitigate chance of potential exploits.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeDictionaryKeyTypeAttribute.VerifierType">
            <summary>
            	Gets or sets the type which implement type verfier method.
            </summary>
            <value>
            	The type which implement type verfier method.
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeDictionaryKeyTypeAttribute.VerifierMethodName">
            <summary>
            	Gets or sets the name of the method which implement type verification.
            </summary>
            <value>
            	The name of the method which implement type verification
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
            <remarks>
            	The type verfication method must be following:
            	<list type="bullet">
            		<item>The method has just only one parameter, which type must be <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</item>
            		<item>The method must return <see cref="T:System.Boolean" />. <c>true</c> indicates the verification result is OK; <c>false</c> indicates not OK.</item>
            		<item>The method can be static method or instance method. The accessibility is not limited.</item>
            	</list>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackRuntimeDictionaryKeyTypeAttribute.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackRuntimeDictionaryKeyTypeAttribute"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackRuntimeTupleItemTypeAttribute">
            <summary>
            	Marks that the runtime type of specified item of the tuple should be encoded with type information for polymorphism.
            	
            </summary>
            <remarks>
            	When you apply this attribute to a member, the item of tuple will be serialized with .NET specific type information,
            	so deserializer will be able to deserialize object which is actual type when serialized instead of interoperability.
            	Because non-.NET enviroments (Java, Ruby, Go, etc.) cannot interpret .NET native type identifier, 
            	you should not use this attribute when the serialized stream will be possible to be used from non-.NET environment.
            	The typed object will be encoded as 2 elements array as follows, so your deserializer can skip type information as needed:
            	[ &lt;type-info&gt;, &lt;actual-value (array or map)&gt;]
            	In this point, type-info will be encoded as compressed assembly qualified name as follows:
            	[ &lt;compressed type full name&gt;, &lt;assembly simple name&gt;, &lt;version binary&gt;, &lt;culture string&gt;, &lt;public key token binary&gt;]
            	If the type full name starts with its assembly simple name, then the prefix matched to assembly simple name will be omitted 
            	(as a result, compressed type name starts with dot).
            	<note>
            		You should use this attribute CAREFULLY when you deserialize data from outside, because this feature can inject arbitary process in your code through
            		constructor and some virtual methods if exist.
            		It is highly recommended avoid using <see cref="T:System.Object" /> type as member's declaring type, 
            		you should specify your base class which and derived typed are fully controled under your organization instead.
            		It mitigate chance of potential exploits.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeTupleItemTypeAttribute.VerifierType">
            <summary>
            	Gets or sets the type which implement type verfier method.
            </summary>
            <value>
            	The type which implement type verfier method.
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeTupleItemTypeAttribute.VerifierMethodName">
            <summary>
            	Gets or sets the name of the method which implement type verification.
            </summary>
            <value>
            	The name of the method which implement type verification
            	The default is <c>null</c>, which indicates that no type verification will be processed.
            </value>
            <remarks>
            	The type verfication method must be following:
            	<list type="bullet">
            		<item>The method has just only one parameter, which type must be <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</item>
            		<item>The method must return <see cref="T:System.Boolean" />. <c>true</c> indicates the verification result is OK; <c>false</c> indicates not OK.</item>
            		<item>The method can be static method or instance method. The accessibility is not limited.</item>
            	</list>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackRuntimeTupleItemTypeAttribute.ItemNumber">
            <summary>
            	Gets the target tuple item's number.
            </summary>
            <value>
            	The 1-based target tuple item's number.
            </value>
            <remarks>
            	<para>
            		If this value is not valid for the tuple, this whole instance should be ignored.
            	</para>
            	<para>
            		If same values are specified multiply, the result is undefined.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackRuntimeTupleItemTypeAttribute.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackKnownTupleItemTypeAttribute"/> class.
            </summary>
            <param name="itemNumber">The 1-based target item number of the tuple. The attribute which has invalid value should be ignored.</param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializer">
            <summary>
            	Defines non-generic interface of serializers and provides entry points for <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> usage.
            </summary>
            <remarks>
            	You cannot derived from this class directly, use <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instead.
            	This class is intended to guarantee backward compatibilities of non generic API.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackSerializer.OwnerContext">
            <summary>
            	Gets a <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.
            </summary>
            <value>
            	A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackSerializer.PackerCompatibilityOptions">
            <summary>
            	Gets the packer compatibility options for this instance.
            </summary>
            <value>
            	The packer compatibility options for this instance
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackSerializer.Capabilities">
            <summary>
            	Gets the capability flags for this instance.
            </summary>
            <value>
            	The capability flags for this instance.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.#ctor(MsgPack.Serialization.SerializationContext,System.Nullable{MsgPack.PackerCompatibilityOptions},MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="packerCompatibilityOptions">The <see cref="P:MsgPack.Serialization.MessagePackSerializer.PackerCompatibilityOptions"/> for new packer creation.</param>
            <param name="capabilities">The capability flags for this instance.</param>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.PackTo(MsgPack.Packer,System.Object)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer" />.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer" /> which packs values in <paramref name="objectTree" />.</param>
            <param name="objectTree">Object to be serialized.</param>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities" />
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.UnpackFrom(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker" />.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker" /> which unpacks values of resulting object tree.</param>
            <returns>
            	The deserialized object.
            </returns>
            <remarks>
            	You must call <see cref="M:MsgPack.Unpacker.Read"/> at least once in advance.
            	Or, you will get a default value of the object.
            </remarks>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities" />
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.UnpackTo(MsgPack.Unpacker,System.Object)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker" /> and stores them to <paramref name="collection" />.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker" /> which unpacks values of resulting object tree.</param>
            <param name="collection">Collection that the items to be stored.</param>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities" />
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.PackSingleObject(System.Object)">
            <summary>
            	Serialize specified object to the array of <see cref="T:System.Byte" />.
            </summary>
            <param name="objectTree">Object to be serialized.</param>
            <returns>
            	An array of <see cref="T:System.Byte" /> which stores serialized value.
            </returns>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities" />
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.UnpackSingleObject(System.Byte[])">
            <summary>
            	Deserialize a single object from the array of <see cref="T:System.Byte" /> which contains a serialized object.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte" /> serialized value to be stored.</param>
            <returns>
            	The deserialized object.
            </returns>
            <remarks>
            <para>
            	This method assumes that <paramref name="buffer" /> contains single serialized object dedicatedly,
            	so this method does not return any information related to actual consumed bytes.
            </para>
            <para>
            	This method is a counter part of <see cref="M:MsgPack.Serialization.MessagePackSerializer.PackSingleObject(System.Object)" />.
            </para>
            </remarks>
            <seealso cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities" />
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create``1">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <returns>
            	New <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance to serialize/deserialize the object tree which the top is <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance to serialize/deserialize the object tree which the top is <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get``1">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with default context (<see cref="P:MsgPack.Serialization.SerializationContext.Default"/>).
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <remarks>
            	This method simply invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext)"/> with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/> for the <c>context</c>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get``1(System.Object)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with default context (<see cref="P:MsgPack.Serialization.SerializationContext.Default"/>).
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="providerParameter">A provider specific parameter. See remarks section for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <remarks>
            	This method simply invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext,System.Object)"/> with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/> for the <c>context</c>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	This method simply invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext,System.Object)"/> with <c>null</c> for the <c>providerParameter</c>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <param name="providerParameter">A provider specific parameter. See remarks section for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	<para>
            		This method simply invokes <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)"/>, so see the method description for details.
            	</para>
            	<para>
            		Currently, only following provider parameters are supported.
            		<list type="table">
            			<listheader>
            				<term>Target type</term>
            				<description>Provider parameter</description>
            			</listheader>
            			<item>
            				<term><see cref="T:MsgPack.Serialization.EnumMessagePackSerializer`1"/> or its descendants.</term>
            				<description><see cref="T:MsgPack.Serialization.EnumSerializationMethod"/>. The returning instance corresponds to this value for serialization.</description>
            			</item>
            		</list>
            		<note><c>null</c> is valid value for <paramref name="providerParameter"/> and it indeicates default behavior of parameter.</note>
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create(System.Type)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.IMessagePackSerializer"/> instance with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/> instance to serialize/deserialize the object tree which the top is <paramref name="targetType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	To avoid boxing and strongly typed API is prefered, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.Create``1"/> instead when possible.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create(System.Type,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.IMessagePackSerializer"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/> instance to serialize/deserialize the object tree which the top is <paramref name="targetType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	To avoid boxing and strongly typed API is prefered, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.Create``1(MsgPack.Serialization.SerializationContext)"/> instead when possible.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get(System.Type)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> instance with default context (<see cref="P:MsgPack.Serialization.SerializationContext.Default"/>).
            </summary>
            <param name="targetType">Target type.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	<para>
            		This method simply invokes <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type)"/>, so see the method description for details.
            	</para>
            	<para>
            	Although <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1"/> is preferred,
            	this method can be used from non-generic type or methods.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get(System.Type,System.Object)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> instance with default context (<see cref="P:MsgPack.Serialization.SerializationContext.Default"/>).
            </summary>
            <param name="targetType">Target type.</param>
            <param name="providerParameter">A provider specific parameter. See remarks section for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	<para>
            		This method simply invokes <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type,System.Object)"/>, so see the method description for details.
            	</para>
            	<para>
            	Although <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(System.Object)"/> is preferred,
            	this method can be used from non-generic type or methods.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get(System.Type,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	<para>
            		This method simply invokes <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type)"/>, so see the method description for details.
            	</para>
            	<para>
            	Although <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext)"/> is preferred,
            	this method can be used from non-generic type or methods.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Get(System.Type,MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Gets existing or new <see cref="T:MsgPack.Serialization.MessagePackSerializer"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <param name="providerParameter">A provider specific parameter. See remarks section for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	<para>
            		This method simply invokes <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type,System.Object)"/>, so see the method description for details.
            	</para>
            	<para>
            	Although <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext,System.Object)"/> is preferred,
            	this method can be used from non-generic type or methods.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.UnpackMessagePackObject(System.IO.Stream)">
            <summary>
            	Directly deserialize specified MessagePack <see cref="T:System.IO.Stream"/> as <see cref="T:MsgPack.MessagePackObject"/> tree.
            </summary>
            <param name="stream">The stream which contains deserializing data.</param>
            <returns>A <see cref="T:MsgPack.MessagePackObject"/> which is root of the deserialized MessagePack object tree.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <remarks>
            	This method is convinient wrapper for <see cref="M:MsgPack.Serialization.MessagePackSerializer.Get``1(MsgPack.Serialization.SerializationContext)"/> for <see cref="T:MsgPack.MessagePackObject"/>.
            	<note>
            		You cannot override this method behavior because this method uses private <see cref="T:MsgPack.Serialization.SerializationContext"/> instead of default context which is able to be accessed via <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.PrepareType``1">
            <summary>
            	Try to prepare specified type for some AOT(Ahead-Of-Time) compilation environment.
            	If the type will be used in collection or dictionary, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareCollectionType``1"/> and/or <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareDictionaryType``2"/> instead.
            </summary>
            <typeparam name="T">The type to be prepared. Normally, this should be value type.</typeparam>
            <remarks>
            	<para>
            		Currently, this method only works in Unity build.
            		This method does not any work for other environments(and should be removed on JIT/AOT), but exists to simplify the application compilation.
            		It is recommended to use this method on start up code to reduce probability of some AOT errors.
            	</para>
            	<para>
            		Please note that this method do not ensure for full linkage for AOT.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.PrepareDictionaryType``2">
            <summary>
            	Try to prepare specified types which will be used as dictionary keys and values for some AOT(Ahead-Of-Time) compilation environment.
            	If the type will be used in collection use <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareCollectionType``1"/> instead.
            </summary>
            <typeparam name="TKey">The key type to be prepared. Normally, this should be value type.</typeparam>
            <typeparam name="TValue">The value type to be prepared. Normally, this should be value type.</typeparam>
            <remarks>
            	<para>
            		Currently, this method only works in Unity build.
            		This method does not any work for other environments(and should be removed on JIT/AOT), but exists to simplify the application compilation.
            		It is recommended to use this method on start up code to reduce probability of some AOT errors.
            	</para>
            	<para>
            		Please note that this method do not ensure for full linkage for AOT.
            	</para>
            	<para>
            		Currently, this method prepares <see cref="T:System.Collections.Generic.KeyValuePair`2"/> and also invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareType``1"/> implicitly.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.PrepareCollectionType``1">
            <summary>
            	Try to prepare specified type which will be used as collection elements for some AOT(Ahead-Of-Time) compilation environment.
            	If the type will be used in dictionary, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareCollectionType``1"/> instead.
            </summary>
            <typeparam name="TElement">The element type to be prepared. Normally, this should be value type.</typeparam>
            <remarks>
            	<para>
            		Currently, this method only works in Unity build.
            		This method does not any work for other environments(and should be removed on JIT/AOT), but exists to simplify the application compilation.
            		It is recommended to use this method on start up code to reduce probability of some AOT errors.
            	</para>
            	<para>
            		Please note that this method do not ensure for full linkage for AOT.
            	</para>
            	<para>
            		Currently, this method prepares <see cref="T:System.ArraySegment`1"/>, <see cref="!:System.Collections.Generic.Queue&lt;T&gt;"/>, and <see cref="!:System.Collections.Generic.Stack&lt;T&gt;"/>.
            		In addition, this method also invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer.PrepareType``1"/> implicitly.
            	</para>
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializerExtensions">
            <summary>
            	Defines convinient extension methods for interfaces.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.Pack(MsgPack.Serialization.MessagePackSerializer,System.IO.Stream,System.Object)">
            <summary>
            	Serializes specified object to the <see cref="T:System.IO.Stream"/> with default <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer"/> object.</param>
            <param name="stream">Destination <see cref="T:System.IO.Stream"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize <paramref name="objectTree"/>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.Pack(MsgPack.Serialization.MessagePackSerializer,System.IO.Stream,System.Object,MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Serializes specified object to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer"/> object.</param>
            <param name="stream">Destination <see cref="T:System.IO.Stream"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <param name="packerCompatibilityOptions">A <see cref="T:MsgPack.PackerCompatibilityOptions"/> which specifies compatibility options.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize <paramref name="objectTree"/>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.Unpack(MsgPack.Serialization.MessagePackSerializer,System.IO.Stream)">
            <summary>
            	Deserializes object from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer"/> object.</param>
            <param name="stream">Source <see cref="T:System.IO.Stream"/>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize from <paramref name="stream"/>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.ToMessagePackObject(MsgPack.Serialization.MessagePackSerializer,System.Object)">
            <summary>
            	Serializes object as a single <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer"/> object.</param>
            <param name="obj">The object to be serialized.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.ToMessagePackObject``1(MsgPack.Serialization.MessagePackSerializer{``0},``0)">
            <summary>
            	Serializes object as a single <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of the object to be serialized.</typeparam>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> object.</param>
            <param name="obj">The object to be serialized.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.FromMessagePackObject(MsgPack.Serialization.MessagePackSerializer,MsgPack.MessagePackObject)">
            <summary>
            	Deserializes object from a single <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer"/> object.</param>
            <param name="mpo">The <see cref="T:MsgPack.MessagePackObject"/> which represents deserializing object structructure.</param>
            <returns>A deserialized object. This value can be <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerExtensions.FromMessagePackObject``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.MessagePackObject)">
            <summary>
            	Deserializes object from a single <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of the object to be deserialized.</typeparam>
            <param name="source"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> object.</param>
            <param name="mpo">The <see cref="T:MsgPack.MessagePackObject"/> which represents deserializing object structructure.</param>
            <returns>A deserialized object. This value can be <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializerProvider">
            <summary>
            	Defines basic features and interfaces for serializer provider which is stored in repository and controlls returning serializer with its own parameter.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializerProvider"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializerProvider.Get(MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Gets a serializer instance for specified parameter.
            </summary>
            <param name="context">A serialization context which holds global settings.</param>
            <param name="providerParameter">A provider specific parameter.</param>
            <returns>A serializer object for specified parameter.</returns>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializer`1">
            <summary>
            	Defines base contract for object serialization.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <remarks>
            	<para>
            		This class implements strongly typed serialization and deserialization.
            	</para>
            	<para>
            		When the underlying stream does not contain strongly typed or contains dynamically typed objects,
            		you should use <see cref="T:MsgPack.Unpacker"/> directly and take advantage of <see cref="T:MsgPack.MessagePackObject"/>.
            	</para>
            </remarks>
            <seealso cref="T:MsgPack.Unpacker"/>
            <seealso cref="T:MsgPack.Unpacking"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class with <see cref="T:PackerCompatibilityOptions.Classic"/>.
            </summary>
            <remarks>
            	This method supports backword compatibility with 0.3.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor(MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class with default context..
            </summary>
            <param name="packerCompatibilityOptions">The <see cref="T:MsgPack.PackerCompatibilityOptions"/> for new packer creation.</param>
            <remarks>
            	This method supports backword compatibility with 0.4.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class with explicitly specified compatibility option.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="packerCompatibilityOptions">The <see cref="T:MsgPack.PackerCompatibilityOptions"/> for new packer creation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
            <remarks>
            	This method also supports backword compatibility with 0.4.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,MsgPack.PackerCompatibilityOptions,MsgPack.Serialization.SerializerCapabilities)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> class with explicitly specified compatibility option.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which owns this serializer.</param>
            <param name="packerCompatibilityOptions">The <see cref="T:MsgPack.PackerCompatibilityOptions"/> for new packer creation.</param>
            <param name="capabilities">A serializer calability flags represents capabilities of this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
            <remarks>
            	This method also supports backword compatibility with 0.4.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.Pack(System.IO.Stream,`0)">
            <summary>
            	Serializes specified object to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Destination <see cref="T:System.IO.Stream"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.Unpack(System.IO.Stream)">
            <summary>
            	Deserialize object from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Source <see cref="T:System.IO.Stream"/>.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be serialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackTo(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serializes specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFrom(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be serialized.
            </exception>
            <remarks>
            	You must call <see cref="M:MsgPack.Unpacker.Read"/> at least once in advance.
            	Or, you will get a default value of <typeparamref name="T"/>.
            </remarks>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackNil">
            <summary>
            	Unpacks the nil value.
            </summary>
            <returns>
            	A valid value of <typeparamref name="T"/> which represents 'null' state.
            </returns>
            <remarks>
            	<para>
            		This method is invoked from <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFrom(MsgPack.Unpacker)"/> method when the current <see cref="P:MsgPack.Unpacker.LastReadData"/> is <see cref="P:MsgPack.MessagePackObject.IsNil">nil</see>.
            	</para>
            	<para>
            		The implementation of this class returns <c>null</c> for nullable types (that is, all reference types and <see cref="T:System.Nullable`1"/>); otherwise, throws <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            	</para>
            	<para>
            		Custom serializers can override this method to provide custom nil representation. For example, built-in <see cref="T:System.DBNull"/> serializer overrides this method to return <see cref="F:System.DBNull.Value"/> instead of <c>null</c>.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserializes object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be serialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackTo(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <param name="collection">Collection that the items to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not mutable collection.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserializes collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not mutable collection.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackSingleObject(`0)">
            <summary>
            	Serializes specified object to the array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="objectTree">Object to be serialized.</param>
            <returns>An array of <see cref="T:System.Byte"/> which stores serialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not serializable even if it can be deserialized.
            </exception>
            <seealso cref="P:Capabilities"/>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackSingleObject(System.Byte[])">
            <summary>
            	Deserializes a single object from the array of <see cref="T:System.Byte"/> which contains a serialized object.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> serialized value to be stored.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of deserializing is not serializable even if it can be serialized.
            </exception>
            <seealso cref="P:Capabilities"/>
            <remarks>
            	<para>
            		This method assumes that <paramref name="buffer"/> contains single serialized object dedicatedly,
            		so this method does not return any information related to actual consumed bytes.
            	</para>
            	<para>
            		This method is a counter part of <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.PackSingleObject(`0)"/>.
            	</para>
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.NilImplication">
            <summary>
            	Specifies nil implication in serialization/deserialization.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.MemberDefault">
            <summary>
            	A nil is interpreted as default value of the member.
            </summary>
            <remarks>
            	<para>
            		This value affects only deserialization.
            	</para>
            	<para>
            		If the unpacking value is nil, the serializer will not set any value to the member.
            	</para>
            	<para>
            		This value corresponds to <c>optional</c> on the IDL.
            	</para>
            	<note>
            		This is default option because the most safe option.
            	</note>
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.Null">
            <summary>
            	A nil is interpreted as <c>null</c>.
            </summary>
            <remarks>
            	<para>
            		This value affects only deserialization.
            	</para>
            	<para>
            		If the unpacking value is nil, the serializer will set <c>null</c> to the member.
            		If the member is non-nullable value type and the packed value is nil, then <see cref="T:System.Runtime.Serialization.SerializationException"/> will be thrown.
            	</para>
            	<para>
            		This value corresponds to <c>nullable required</c> on the IDL.
            	</para>
            	<note>
            		If the destination end point sends nil for the value type member like <see cref="T:System.Int32"/> type,
            		you can avoid the exception with change the type of the member to nullable value type.
            	</note>
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.Prohibit">
            <summary>
            	A nil is prohibitted.
            </summary>
            <remarks>
            	<para>
            		This value affects both of serialization and deserialization.
            	</para>
            	<para>
            		If the packing value is <c>null</c> or the unpacking value is nil,
            		the serializer will throw exception.
            	</para>
            	<para>
            		This value corresponds to <c>required</c> on the IDL.
            	</para>
            	<note>
            		When you specify this value to newly added member,
            		it means that you BREAK backword compatibility.
            	</note>
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.NilImplicationHandler`4">
            <summary>
            	Defines base features to handle nil implication.
            </summary>
            <typeparam name="TAction">The type of the actual action for handking.</typeparam>
            <typeparam name="TCondition">The type of the condition for packing value nil check.</typeparam>
            <typeparam name="TPackingParameter">The type of the implementation specific on-packing methods parameter.</typeparam>
            <typeparam name="TUnpackedParameter">The type of the  implementation specific on-unpacked methods parameter.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.PackToArrayParameters`1">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.PackHelpers.PackToArray``1(MsgPack.Serialization.PackToArrayParameters{``0}@)"/> method.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToArrayParameters`1.Packer">
            <summary>
            	The packer.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToArrayParameters`1.Target">
            <summary>
            	The object to be packed.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToArrayParameters`1.Operations">
            <summary>
            	Delegates each ones unpack single member in order.
            	The 1st argument will be <see cref="F:MsgPack.Serialization.PackToArrayParameters`1.Packer"/> and 2nd argument will be <see cref="F:MsgPack.Serialization.PackToArrayParameters`1.Target"/>.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PackToMapParameters`1">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.PackHelpers.PackToMap``1(MsgPack.Serialization.PackToMapParameters{``0}@)"/> method.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToMapParameters`1.Packer">
            <summary>
            	The packer.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToMapParameters`1.Target">
            <summary>
            	The object to be packed.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToMapParameters`1.SerializationContext">
            <summary>
            	The <see cref="F:MsgPack.Serialization.PackToMapParameters`1.SerializationContext" /> which contains dictionary based serialization related options.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToMapParameters`1.NullCheckers">
            <summary>
            	Delegates table each ones check whether a member is <c>null</c>.
            	The argument will be <see cref="F:MsgPack.Serialization.PackToMapParameters`1.Target"/> and returns <c>true</c> if the argument value is <c>null</c>.
            	This dictionary should not contain for value type members except <see cref="T:System.Nullable`1" />.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PackToMapParameters`1.Operations">
            <summary>
            	Delegates table each ones unpack single member and their keys correspond to unpacking membmer names.
            	The 1st argument will be <see cref="F:MsgPack.Serialization.PackToMapParameters`1.Packer"/> and 2nd argument will be <see cref="F:MsgPack.Serialization.PackToMapParameters`1.Target"/>.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PackHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines serialization helper APIs.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.PackHelpers.PackToArray``1(MsgPack.Packer,``0,System.Collections.Generic.IList{System.Action{MsgPack.Packer,``0}})">
            <summary>
            	Packs object to msgpack array.
            </summary>
            <typeparam name="TObject">The type of the packing object.</typeparam>
            <param name="packer">The packer.</param>
            <param name="target">The object to be packed.</param>
            <param name="operations">
            	Delegates each ones unpack single member in order.
            	The 1st argument will be <paramref name="packer"/> and 2nd argument will be <paramref name="target"/>.
            </param>
            <returns>The unpacked object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            	Or, <paramref name="operations"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.PackHelpers.PackToArray``1(MsgPack.Serialization.PackToArrayParameters{``0}@)">
            <summary>
            	Packs object to msgpack array.
            </summary>
            <typeparam name="TObject">The type of the packing object.</typeparam>
            <param name="parameter">The reference of <see cref="T:MsgPack.Serialization.PackToArrayParameters`1"/> object which represents parameters of this method.</param>
            <returns>The unpacked object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.PackToArrayParameters`1.Packer"/> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.PackToArrayParameters`1.Operations"/> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.PackHelpers.PackToMap``1(MsgPack.Packer,``0,System.Collections.Generic.IDictionary{System.String,System.Action{MsgPack.Packer,``0}})">
            <summary>
            	Packs object to msgpack map.
            </summary>
            <typeparam name="TObject">The type of the packing object.</typeparam>
            <param name="packer">The packer.</param>
            <param name="target">The object to be packed.</param>
            <param name="operations">
            	Delegates table each ones unpack single member and their keys correspond to unpacking membmer names.
            	The 1st argument will be <paramref name="packer"/> and 2nd argument will be <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="operations"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.PackHelpers.PackToMap``1(MsgPack.Serialization.PackToMapParameters{``0}@)">
            <summary>
            	Packs object to msgpack map.
            </summary>
            <typeparam name="TObject">The type of the packing object.</typeparam>
            <param name="parameter">The reference of <see cref="T:MsgPack.Serialization.PackToMapParameters`1"/> object which represents parameters of this method.</param>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.PackToMapParameters`1.Packer"/> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="!:PackToMapAsyncParameters&lt;T&gt;.Operations"/> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.PolymorphicTypeVerificationContext">
            <summary>
            	Represents and encapsulates context informatino to verify actual type for runtime type polymorphism.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphicTypeVerificationContext.LoadingTypeFullName">
            <summary>
            	Gets the full type name including its namespace to be loaded.
            </summary>
            <value>
            	The full type name including its namespace to be loaded. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphicTypeVerificationContext.LoadingAssemblyFullName">
            <summary>
            	Gets the full name of the loading assembly.
            </summary>
            <value>
            	The full name of the loading assembly.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphicTypeVerificationContext.LoadingAssemblyName">
            <summary>
            	Gets the name of the loading assembly.
            </summary>
            <value>
            	The name of the loading assembly.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.ToString">
            <summary>
            	Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            	A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.Equals(System.Object)">
            <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.Equals(MsgPack.Serialization.PolymorphicTypeVerificationContext)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" /> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.GetHashCode">
            <summary>
            	Returns a hash code for this instance.
            </summary>
            <returns>
            	A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.op_Equality(MsgPack.Serialization.PolymorphicTypeVerificationContext,MsgPack.Serialization.PolymorphicTypeVerificationContext)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />s are equal.
            </summary>
            <param name="left">The <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</param>
            <param name="right">The <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />s are equal to each other; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphicTypeVerificationContext.op_Inequality(MsgPack.Serialization.PolymorphicTypeVerificationContext,MsgPack.Serialization.PolymorphicTypeVerificationContext)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />s are not equal.
            </summary>
            <param name="left">The <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</param>
            <param name="right">The <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:MsgPack.Serialization.PolymorphicTypeVerificationContext" />s are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.IPolymorphicDeserializer">
            <summary>
            	Defines internal protocol betwenn polymorphic serializers and collection serializers to accomplish polymorphism.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.IPolymorphicHelperAttribute">
            <summary>
            	Common interfaces among polymorhic helper attributes.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.IPolymorphicKnownTypeAttribute">
            <summary>
            	Common interfaces among *Known*TypeAttrbutes.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.IPolymorphicRuntimeTypeAttribute">
            <summary>
            	Common(marker) interfaces among *Runtime*TypeAttrbutes.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.IPolymorphicTupleItemTypeAttribute">
            <summary>
            	Common interfaces among *TupleItemTypeAttributes.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.KnownTypePolymorphicMessagePackSerializer`1">
            <summary>
            	Implements polymorphic serializer which uses closed known types and interoperable ext-type feature.
            </summary>
            <typeparam name="T">The base type of the polymorhic member.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.PolymorphicSerializerProvider`1">
            <summary>
            	Provides polymorphism for serializers.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.TypeEmbedingPolymorphicMessagePackSerializer`1">
            <summary>
            	Implements polymorphic serializer which uses open types and non-interoperable ext-type tag and .NET type information.
            </summary>
            <typeparam name="T">The base type of the polymorhic member.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.TypeInfoEncoder">
            <summary>
            	Implements type info encoding for type embedding.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Polymorphic.TypeInfoEncoding">
            <summary>
            	Represents type info encoding.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PolymorphismSchema">
            <summary>
            	A provider parameter to support polymorphism.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(System.Type)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(System.Type,System.Func{MsgPack.Serialization.PolymorphicTypeVerificationContext,System.Boolean})">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="typeVerifier">The delegate which verifies loading type in runtime type polymorphism.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses ext-type code mapping based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="codeTypeMapping">The code-type mapping which maps between ext-type codes and .NET <see cref="T:System.Type"/>s.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for non-collection object which uses ext-type code mapping based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedCollection(System.Type,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses declared type or context specified concrete type.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="itemSchema">The schema for collection items of the serialization target collection.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses declared type or context specified concrete type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollection(System.Type,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="itemSchema">The schema for collection items of the serialization target collection.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollection(System.Type,MsgPack.Serialization.PolymorphismSchema,System.Func{MsgPack.Serialization.PolymorphicTypeVerificationContext,System.Boolean})">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="itemSchema">The schema for collection items of the serialization target collection.</param>
            <param name="typeVerifier">The delegate which verifies loading type in runtime type polymorphism.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollection(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type},MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses ext-type code mapping based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="codeTypeMapping">The code type mapping which maps between ext-type codes and .NET <see cref="T:System.Type"/>s.</param>
            <param name="itemSchema">The schema for collection items of the serialization target collection.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for collection object which uses ext-type code mapping based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedDictionary(System.Type,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses declared type or context specified concrete type.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="keySchema">The schema for dictionary keys of the serialization target dictionary.</param>
            <param name="valueSchema">The schema for dictionary values of the serialization target dictionary.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses declared type or context specified concrete type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionary(System.Type,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="keySchema">The schema for dictionary keys of the serialization target dictionary.</param>
            <param name="valueSchema">The schema for dictionary values of the serialization target dictionary.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionary(System.Type,MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.PolymorphismSchema,System.Func{MsgPack.Serialization.PolymorphicTypeVerificationContext,System.Boolean})">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses type embedding based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="keySchema">The schema for dictionary keys of the serialization target dictionary.</param>
            <param name="valueSchema">The schema for dictionary values of the serialization target dictionary.</param>
            <param name="typeVerifier">The delegate which verifies loading type in runtime type polymorphism.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses type embedding based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionary(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type},MsgPack.Serialization.PolymorphismSchema,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses ext-type code mapping based polymorphism.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="codeTypeMapping">The code type mapping which maps between ext-type codes and .NET <see cref="T:System.Type"/>s.</param>
            <param name="keySchema">The schema for dictionary keys of the serialization target dictionary.</param>
            <param name="valueSchema">The schema for dictionary values of the serialization target dictionary.</param>
            <returns>A new instance of the <see cref="T:MsgPack.Serialization.PolymorphismSchema"/> class for dictionary object which uses ext-type code mapping based polymorphism.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.TargetType">
            <summary>
            	Gets the type of the serialization target.
            </summary>
            <value>
            	The type of the serialization target. This value can be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.PolymorphismType">
            <summary>
            	Gets the type of the polymorphism.
            </summary>
            <value>
            	The type of the polymorphism.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.CodeTypeMapping">
            <summary>
            	Gets the code type mapping which maps between ext-type codes and .NET <see cref="T:System.Type"/>s.
            </summary>
            <value>
            	The code type mapping which maps between ext-type codes and .NET <see cref="T:System.Type"/>s.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.ChildSchemaList">
            <summary>
            	Gets the schema for child items of the serialization target collection/tuple.
            </summary>
            <value>
            	The schema for child items of the serialization target collection/tuple.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.ItemSchema">
            <summary>
            	Gets the schema for collection items of the serialization target collection.
            </summary>
            <value>
            	The schema for collection items of the serialization target collection.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.PolymorphismSchema.KeySchema">
            <summary>
            	Gets the schema for dictionary keys of the serialization target collection.
            </summary>
            <value>
            	The schema for collection items of the serialization target collection.
            </value>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.Default">
            <summary>
            	Default instance (null object).
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObjectTypeEmbeddingMethod">
            <summary>
            	ForPolymorphicObject( Type targetType )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObjectCodeTypeMappingMethod">
            <summary>
            	ForPolymorphicObject( Type targetType, IDictionary{byte, Type} codeTypeMapping )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedCollectionMethod">
            <summary>
            	ForContextSpecifiedCollection( Type targetType, PolymorphismSchema itemsSchema )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollectionTypeEmbeddingMethod">
            <summary>
            	ForPolymorphicCollection( Type targetType, PolymorphismSchema itemsSchema )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollectionCodeTypeMappingMethod">
            <summary>
            	ForPolymorphicCollection( Type targetType, IDictionary{byte, Type} codeTypeMapping, PolymorphismSchema itemsSchema )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedDictionaryMethod">
            <summary>
            	ForContextSpecifiedDictionary( Type targetType, PolymorphismSchema keysSchema, PolymorphismSchema valuesSchema )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionaryTypeEmbeddingMethod">
            <summary>
            	ForPolymorphicDictionary( Type targetType, PolymorphismSchema keysSchema, PolymorphismSchema valuesSchema )
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionaryCodeTypeMappingMethod">
            <summary>
            	ForPolymorphicDictionary( Type targetType, IDictionary{byte, Type} codeTypeMapping, PolymorphismSchema keysSchema, PolymorphismSchema valuesSchema )
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PolymorphismSchemaChildrenType">
            <summary>
            	Represents children items type of <see cref="T:MsgPack.Serialization.PolymorphismSchema"/>
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchemaChildrenType.None">
            <summary>
            	Leaf, that is no children schema.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchemaChildrenType.CollectionItems">
            <summary>
            	Collection items, so children count is 1.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchemaChildrenType.DictionaryKeyValues">
            <summary>
            	Dictionary keys and values, so children count is 2, index 0 is for keys, 1 is for values.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismSchemaChildrenType.TupleItems">
            <summary>
            	Tuple items, so chidren count is equal to tuple's arity.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PolymorphismTarget">
            <summary>
            	Specifies <see cref="T:MsgPack.Serialization.MessagePackKnownTypeAttribute"/> or <see cref="T:MsgPack.Serialization.MessagePackRuntimeTypeAttribute"/> target.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismTarget.Member">
            <summary>
            	Applies to member type itself.
            	This option disables <see cref="P:MsgPack.Serialization.SerializationContext.DefaultCollectionTypes"/> settings.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismTarget.CollectionItem">
            <summary>
            	Applies to items of collection member type (values for dictionary).
            	This options causes entire attribute will be ignored for non-collection types.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismTarget.DictionaryKey">
            <summary>
            	Applies to keys of dictionary member type.
            	This options causes entire attribute will be ignored for non-dictionary types.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismTarget.TupleItem">
            <summary>
            	Applies to keys of dictionary member type.
            	This options causes entire attribute will be ignored for non-dictionary types.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.PolymorphismType">
            <summary>
            	Defines a type of the polymorphism.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismType.None">
            <summary>
            	No polymorphism.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismType.KnownTypes">
            <summary>
            	Knwon ext-type code based polymorphism.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.PolymorphismType.RuntimeType">
            <summary>
            	Non-interoperable type info embedding based polymorphism.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.ReflectionHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines serialization helper reflection APIs.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.ReflectionHelpers.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            	Gets a specified <see cref="T:System.Reflection.MethodInfo"/> even if the method is not publicly exposed.
            </summary>
            <param name="type">The type to be introspected.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object.</returns>
            <remarks>
            	This method is designed for property accessor for serialization, so this never return generic methods and static methods.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.ReflectionHelpers.GetField(System.Type,System.String)">
            <summary>
            	Gets a specified <see cref="T:System.Reflection.FieldInfo"/> even if the field is not publicly exposed.
            </summary>
            <param name="type">The type to be introspected.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.FieldInfo"/> object.</returns>
            <remarks>
            	This method is designed for property accessor for serialization, so this never return static fields.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.ReflectionSerializers.ReflectionEnumMessagePackSerializer">
            <summary>
            	Implements reflection-based enum serializer for restricted platforms.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.ReflectionSerializers.ReflectionObjectMessagePackSerializer`1">
            <summary>
            	Implements reflection-based object serializer for restricted platforms.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.ReflectionSerializers.ReflectionSerializerHelper">
            <summary>
            	Helper static methods for reflection serializers.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.Reflection.GenericTypeExtensions">
            <summary>
            	Define utility extension method for generic type.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.Implements(System.Type,System.Type)">
            <summary>
            	Determine whether the source type implements specified generic type or its built type.
            </summary>
            <param name="source">Target type.</param>
            <param name="genericType">Generic interface type.</param>
            <returns>
            	<c>true</c> if <paramref name="source"/> implements <paramref name="genericType"/>,
            	or built closed generic interface type;
            	otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.GetName(System.Type)">
            <summary>
            	Get name of type without namespace and assembly name of itself and its generic arguments.
            </summary>
            <param name="source">Target type.</param>
            <returns>Simple name of type.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.GetFullName(System.Type)">
            <summary>
            	Get full name of type including namespace and excluding assembly name of itself and its generic arguments.
            </summary>
            <param name="source">Target type.</param>
            <returns>Full name of type.</returns>
        </member>
        <member name="T:MsgPack.Serialization.Reflection.ReflectionExtensions">
            <summary>
            	Defines utility extension method for reflection API.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.ReflectionExtensions.IsAssignableTo(System.Type,System.Type)">
            <summary>
            	Determines whether specified <see cref="T:System.Type"/> can be assigned to source <see cref="T:System.Type"/>.
            </summary>
            <param name="source">The source type.</param>
            <param name="target">The type to compare with the source type.</param>
            <returns>
              <c>true</c> if <paramref name="source"/> and <paramref name="target"/> represent the same type, 
              or if <paramref name="target"/> is in the inheritance hierarchy of <paramref name="source"/>, 
              or if <paramref name="target"/> is an interface that <paramref name="source"/> implements, 
              or if <paramref name="source"/> is a generic type parameter and <paramref name="target"/> represents one of the constraints of <paramref name="source"/>. 
              <c>false</c> if none of these conditions are <c>true</c>, or if <paramref name="target"/> is <c>false</c>. 
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.ResolveSerializerEventArgs">
            <summary>
            	Represents event information for <see cref="E:MsgPack.Serialization.SerializationContext.ResolveSerializer" /> event.
            </summary>
            <seealso cref="E:MsgPack.Serialization.SerializationContext.ResolveSerializer"/>
        </member>
        <member name="P:MsgPack.Serialization.ResolveSerializerEventArgs.Context">
            <summary>
            	Gets the <see cref="T:MsgPack.Serialization.SerializationContext" /> which raises this event.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.SerializationContext" /> which raises this event. This value will not be <c>null</c>.
            </value>
            <remarks>
            	A <c>sender</c> parameter of the event handler has same instance for this.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.ResolveSerializerEventArgs.TargetType">
            <summary>
            	Gets the target type which is getting serializer.
            </summary>
            <value>
            	The target type which is getting serializer. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.ResolveSerializerEventArgs.PolymorphismSchema">
            <summary>
            	Gets the <see cref="P:MsgPack.Serialization.ResolveSerializerEventArgs.PolymorphismSchema"/> which represents polymorphism information for the current member.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.ResolveSerializerEventArgs.PolymorphismSchema"/> which represents polymorphism information for the current member. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.ResolveSerializerEventArgs.GetFoundSerializer``1">
            <summary>
            	Gets the found serializer the event subscriber specified.
            </summary>
            <returns>
            	The found serializer the event subscriber specified. <c>null</c> represents default behavior is wanted.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.ResolveSerializerEventArgs.SetSerializer``1(MsgPack.Serialization.MessagePackSerializer{``0})">
            <summary>
            	Sets the serializer instance which can handle <see cref="P:MsgPack.Serialization.ResolveSerializerEventArgs.TargetType" /> type instance correctly.
            </summary>
            <param name="foundSerializer">The serializer instance which can handle <see cref="P:MsgPack.Serialization.ResolveSerializerEventArgs.TargetType" /> type instance correctly; <c>null</c> when you cannot provide appropriate serializer instance.</param>
            <remarks>
            	If you decide to delegate serializer generation to MessagePack for CLI infrastructure, do not call this method in your event handler or specify <c>null</c> for <paramref name="foundSerializer"/>.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.SerializationCompatibilityOptions">
            <summary>
            	Represents compatibility options of serialization runtime.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.OneBoundDataMemberOrder">
            <summary>
            	Gets or sets a value indicating whether <c>System.Runtime.Serialization.DataMemberAttribute.Order</c> should be started with 1 instead of 0.
            </summary>
            <value>
            	<c>true</c> if <c>System.Runtime.Serialization.DataMemberAttribute.Order</c> should be started with 1 instead of 0; otherwise, <c>false</c>.
            	Default is <c>false</c>.
            </value>
            <remarks>
            	Using this value, you can switch between MessagePack for CLI and ProtoBuf.NET seamlessly.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.PackerCompatibilityOptions">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializationCompatibilityOptions.PackerCompatibilityOptions"/>.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationCompatibilityOptions.PackerCompatibilityOptions"/>. The default is <see cref="F:PackerCompatibilityOptions.Classic"/>.
            </value>
            <remarks>
            	<note>
            		Changing this property value does not affect already built serializers -- especially built-in (default) serializers.
            		You must specify <see cref="T:PackerCompatibilityOptions"/> enumeration to the constructor of <see cref="T:MsgPack.Serialization.SerializationContext"/> to
            		change built-in serializers' behavior.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.IgnorePackabilityForCollection">
            <summary>
            	Gets or sets a value indicating whether serializer generator ignores packability interfaces for collections or not.
            </summary>
            <value>
            	<c>true</c> if serializer generator ignores packability interfaces for collections; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            	Historically, MessagePack for CLI ignored packability interfaces (<see cref="T:MsgPack.IPackable"/>, <see cref="T:MsgPack.IUnpackable"/>, 
            	<see cref="!:IAsyncPackable"/> and <see cref="!:IAsyncUnpackable"/>) for collection which implements <see cref="T:System.IEquatable`1"/> (except <see cref="T:System.String"/> and its kinds).
            	As of 0.7, the generator respects such interfaces even if the target type is collection.
            	Although this behavior is desirable and correct, setting this property <c>true</c> turn out the new behavior for backward compatibility.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.AllowNonCollectionEnumerableTypes">
            <summary>
            	Gets or sets a value indicating whether the serializer generator should serialize types that implement IEnumerable but do not have an Add method.
            </summary>
            <value>
            	<c>true</c> if serializer generator should serialize a type implementing IEnumerable as a normal type if a public Add method is not found; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
            <remarks>
            	Historically, MessagePack for CLI always tried to serialize any type that implemented IEnumerable as a collection, throwing an exception
            	if an Add method could not be found. However, for types that implement IEnumerable but don't have an Add method the generator will now
            	serialize the type as a non-collection type. To restore the old behavior for backwards compatibility, set this option to <c>false</c>.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.AllowAsymmetricSerializer">
            <summary>
            	Gets or sets a value indicating whether the serializer generator generates serializer types even when the generator determines that feature complete serializer cannot be generated due to lack of some requirement.
            </summary>
            <value>
            	<c>true</c> if the serializer generator generates serializer types even when the generator determines that feature complete serializer cannot be generated due to lack of some requirement; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            	Currently, the lack of constructor (default or parameterized) or lack of settable members are considerd as "cannot generate feature complete serializer".
            	Therefore, you can get serialization only serializer if this property is set to <c>true</c>.
            	This is useful for logging, telemetry injestion, or so.
            	You can investigate serializer capability via <see cref="P:MsgPack.Serialization.MessagePackSerializer.Capabilities"/> property.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.SerializationContext">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Represents serialization context information for internal serialization logic.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.Default">
            <summary>
            	Gets or sets the default instance.
            </summary>
            <value>
            	The default <see cref="T:MsgPack.Serialization.SerializationContext"/> instance.
            </value>
            <exception cref="T:System.ArgumentNullException">The setting value is <c>null</c>.</exception>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.Serializers">
            <summary>
            	Gets the current <see cref="T:MsgPack.Serialization.SerializerRepository"/>.
            </summary>
            <value>
            	The  current <see cref="T:MsgPack.Serialization.SerializerRepository"/>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.SerializerOptions">
            <summary>
            	Gets the option settings for serializer generation.
            </summary>
            <value>
            	The option settings for serializer generation.
            	This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.CompatibilityOptions">
            <summary>
            	Gets the compatibility options.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.SerializationCompatibilityOptions"/> which stores compatibility options. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.DictionarySerlaizationOptions">
            <summary>
            	Gets the dictionary(map) based serialization options.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.DictionarySerlaizationOptions"/> which stores dictionary(map) based serialization options. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.SerializationMethod">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> to determine serialization strategy.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> to determine serialization strategy.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The setting value is invalid as <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> enum.</exception>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.EnumSerializationOptions">
            <summary>
            	Gets the enum serialization options.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.EnumSerializationOptions"/> which stores enum serialization options. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod"/> to determine default serialization strategy of enum types.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod"/> to determine default serialization strategy of enum types.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The setting value is invalid as <see cref="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod"/> enum.</exception>
            <remarks>
            	<note>This property is wrapper for <see cref="P:MsgPack.Serialization.EnumSerializationOptions.SerializationMethod"/> property.</note>
            	A serialization strategy for specific <strong>member</strong> is determined as following:
            	<list type="numeric">
            		<item>If the member is marked with <see cref="T:MsgPack.Serialization.MessagePackEnumMemberAttribute"/> and its value is not <see cref="F:MsgPack.Serialization.EnumMemberSerializationMethod.Default"/>, then it will be used.</item>
            		<item>Otherwise, if the enum type itself is marked with <see cref="T:MsgPack.Serialization.MessagePackEnumAttribute"/>, then it will be used.</item>
            		<item>Otherwise, the value of this property will be used.</item>
            	</list>
            	Note that the default value of this property is <see cref="T:EnumSerializationMethod.ByName"/>, it is not size efficient but tolerant to unexpected enum definition change.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.DefaultCollectionTypes">
            <summary>
            	Gets the default collection types.
            </summary>
            <value>
            	The default collection types. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.DefaultDateTimeConversionMethod">
            <summary>
            	Gets or sets the default <see cref="T:System.DateTime"/> conversion methods of built-in serializers.
            </summary>
            <value>
            	The default <see cref="T:System.DateTime"/> conversion methods of built-in serializers. The default is <see cref="F:DateTimeConversionMethod.Native"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The setting value is invalid as <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> enum.</exception>
            <remarks>
            	As of 0.6, <see cref="T:System.DateTime"/> value is serialized as its native representation instead of interoperable UTC milliseconds Unix epoc.
            	This behavior solves some debugging problem and interop issues, but breaks compability.
            	If you want to change this behavior, set this value to <see cref="F:DateTimeConversionMethod.UnixEpoc"/>.
            </remarks>
        </member>
        <member name="E:MsgPack.Serialization.SerializationContext.ResolveSerializer">
            <summary>
            	Occurs when the context have not find appropriate registered nor built-in serializer for specified type.
            </summary>
            <remarks>
            	This event will be occured when the context could not found known serializer from:
            	<list type="bullet">
            		<item>
            			Known built-in serializers for arrays, nullables, and collections, etc.
            		</item>
            		<item>
            			Known default serializers for some known various FCL value types and some reference types.
            		</item>
            		<item>
            			Previously registered or generated serializer.
            		</item>
            	</list>
            	You can instantiate your custom serializer using various <see cref="T:MsgPack.Serialization.ResolveSerializerEventArgs" /> properties,
            	and then call <see cref="M:MsgPack.Serialization.ResolveSerializerEventArgs.SetSerializer``1(MsgPack.Serialization.MessagePackSerializer{``0})"/> to provide toward the context.
            	<note>
            		You can use <see cref="T:MsgPack.Serialization.SerializationContext" /> to get dependent serializers as you like, 
            		but you should never explicitly register new serializer(s) explicitly via the context from the event handler and its dependents.
            		Instead, you specify the instanciated serializer with <see cref="M:MsgPack.Serialization.ResolveSerializerEventArgs.SetSerializer``1(MsgPack.Serialization.MessagePackSerializer{``0})"/> once at a time. 
            		Dependent serializer(s) should be registered via next (nested) raise of this event.
            	</note>
            	<note>
            		The context implicitly holds 'lock' for the target type for the requested serializer in the current thread.
            		So you should not use any synchronization primitives in the event handler and its dependents,
            		or you may face complex dead lock.
            		That is, the event handler should be as simple as possible like just instanciate the serializer and set it to the event argument.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.ConfigureClassic">
            <summary>
            	Configures <see cref="P:MsgPack.Serialization.SerializationContext.Default"/> as new classic <see cref="T:MsgPack.Serialization.SerializationContext"/> instance.
            </summary>
            <returns>The previously set context as <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.</returns>
            <seealso cref="M:MsgPack.Serialization.SerializationContext.CreateClassicContext"/>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.CreateClassicContext">
            <summary>
            	Creates a new <see cref="T:MsgPack.Serialization.SerializationContext"/> which is configured as same as 0.5.
            </summary>
            <returns>
            	A new <see cref="T:MsgPack.Serialization.SerializationContext"/> which is configured as same as 0.5.
            </returns>
            <remarks>
            	There are breaking changes of <see cref="T:MsgPack.Serialization.SerializationContext"/> properties to improve API usability and to prevent accidental failure.
            	This method returns a <see cref="T:MsgPack.Serialization.SerializationContext"/> which configured as classic style settings as follows:
            	<list type="table">
            		<listheader>
            			<term></term>
            			<description>Default (as of 0.6)</description>
            			<description>Classic (before 0.6)</description>
            		</listheader>
            		<item>
            			<term>Packed object members order (if members are not marked with <see cref="T:MsgPack.Serialization.MessagePackMemberAttribute"/>  nor <c>System.Runtime.Serialization.DataMemberAttribute</c> and serializer uses <see cref="F:SerializationMethod.Array"/>)</term>
            			<description>As declared (metadata table order)</description>
            			<description>As lexicographical</description>
            		</item>
            		<item>
            			<term><see cref="T:System.DateTime"/> value</term>
            			<description>Native representation (100-nano ticks, preserving <see cref="T:System.DateTimeKind"/>.)</description>
            			<description>UTC, milliseconds Unix epoc.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializationContext"/> class with copy of <see cref="M:MsgPack.Serialization.SerializerRepository.GetDefault"/>.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.#ctor(MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializationContext"/> class with copy of <see cref="M:MsgPack.Serialization.SerializerRepository.GetDefault"/> for specified <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="packerCompatibilityOptions"><see cref="T:MsgPack.PackerCompatibilityOptions"/> which will be used on built-in serializers.</param>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer``1">
            <summary>
            	Gets the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> with this instance without provider parameter.
            </summary>
            <typeparam name="T">Type of serialization/deserialization target.</typeparam>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <remarks>
            	This method automatically register new instance via <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0})"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)">
            <summary>
            	Gets the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> with this instance.
            </summary>
            <typeparam name="T">Type of serialization/deserialization target.</typeparam>
            <param name="providerParameter">A provider specific parameter. See remarks section for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <remarks>
            	<para>
            		This method automatically register new instance via <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0})"/>.
            	</para>
            	<para>
            		Currently, only following provider parameters are supported.
            		<list type="table">
            			<listheader>
            				<term>Target type</term>
            				<description>Provider parameter</description>
            			</listheader>
            			<item>
            				<term><see cref="T:MsgPack.Serialization.EnumMessagePackSerializer`1"/> or its descendants.</term>
            				<description><see cref="P:MsgPack.Serialization.SerializationContext.EnumSerializationMethod"/>. The returning instance corresponds to this value for serialization.</description>
            			</item>
            		</list>
            		<note><c>null</c> is valid value for <paramref name="providerParameter"/> and it indeicates default behavior of parameter.</note>
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type)">
            <summary>
            	Gets the serializer for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="targetType">Type of the serialization target.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            	If the platform supports async/await programming model, return type is <c>IAsyncMessagePackSingleObjectSerializer</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	Although <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1"/> is preferred,
            	this method can be used from non-generic type or methods.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type,System.Object)">
            <summary>
            	Gets the serializer for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="targetType">Type of the serialization target.</param>
            <param name="providerParameter">A provider specific parameter. See remarks section of <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)"/> for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            	If the platform supports async/await programming model, return type is <c>IAsyncMessagePackSingleObjectSerializer</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	Although <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)"/> is preferred,
            	this method can be used from non-generic type or methods.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.ExtTypeCodeMapping">
            <summary>
            	Gets the current mapping table of ext type code.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.ExtTypeCodeMapping"/> which maps between known ext type names and ext type codes.
            </value>
        </member>
        <member name="T:MsgPack.Serialization.SerializationExceptions">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines common exception factory methods.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewValueTypeCannotBeNull(System.String,System.Type,System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot be <c>null</c> on deserialization.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="memberType">The type of the member.</param>
            <param name="declaringType">The type that declares the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowValueTypeCannotBeNull(System.String,System.Type,System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws an exception to notify that value type cannot be <c>null</c> on deserialization.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="memberType">The type of the member.</param>
            <param name="declaringType">The type that declares the member.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewValueTypeCannotBeNull(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot be <c>null</c> on deserialization.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotSerialize(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot serialize.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot deserialize.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type,System.String,System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot deserialize.
            </summary>
            <param name="type">The target type.</param>
            <param name="memberName">The name of deserializing member.</param>
            <param name="inner">The inner exception.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingItem(System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that item is not found on the unpacking stream.
            </summary>
            <param name="index">The index to be unpacking.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(System.Int32,MsgPack.Unpacker)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws a exception to notify that item is not found on the unpacking stream.
            </summary>
            <param name="index">The index to be unpacking.</param>
            <param name="unpacker">The unpacker for pretty message.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(System.Int32,System.String,MsgPack.Unpacker)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws a exception to notify that item is not found on the unpacking stream.
            </summary>
            <param name="index">The index to be unpacking.</param>
            <param name="name">The name of the item to be unpacking.</param>
            <param name="unpacker">The unpacker for pretty message.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTargetDoesNotHavePublicDefaultConstructor(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target type is not serializable because it does not have public default constructor.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTargetDoesNotHavePublicDefaultConstructorNorInitialCapacity(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target type is not serializable because it does not have both of public default constructor and public constructor with an Int32 parameter.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingProperty(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that required field is not found on the unpacking stream.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewUnexpectedEndOfStream">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacking stream ends on unexpectedly position.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingAddMethod(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target collection type does not declare appropriate Add(T) method.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsNotArrayHeader">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacker is not in the array header, that is the state is invalid.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowIsNotArrayHeader(MsgPack.Unpacker)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws an exception to notify that unpacker is not in the array header, that is the state is invalid.
            </summary>
            <param name="unpacker">The unpacker for pretty message.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsNotMapHeader">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacker is not in the array header, that is the state is invalid.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowIsNotMapHeader(MsgPack.Unpacker)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws an exception to notify that unpacker is not in the map header, that is the state is invalid.
            </summary>
            <param name="unpacker">The unpacker for pretty message.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewNotSupportedBecauseCannotInstanciateAbstractType(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that operation is not supported because <paramref name="type"/> cannot be instanciated.
            </summary>
            <param name="type">Type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTupleCardinarityIsNotMatch(System.Int32,System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the array length does not match to expected tuple cardinality.
            </summary>
            <param name="expectedTupleCardinality">The expected cardinality of the tuple.</param>
            <param name="actualArrayLength">The actual serialized array length.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowTupleCardinarityIsNotMatch(System.Int32,System.Int64,MsgPack.Unpacker)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws an exception to notify that the array length does not match to expected tuple cardinality.
            </summary>
            <param name="expectedTupleCardinality">The expected cardinality of the tuple.</param>
            <param name="actualArrayLength">The actual serialized array length.</param>
            <param name="unpacker">The unpacker for pretty message.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsIncorrectStream(System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the underlying stream is not correct semantically because failed to unpack items count of array/map.
            </summary>
            <param name="innerException">The inner exception for the debug. The value is implementation specific.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsTooLargeCollection">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking collection is too large to represents in the current runtime environment.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the member cannot be <c>null</c> or the unpacking value cannot be nil because nil value is explicitly prohibitted.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowNullIsProhibited(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Throws an exception to notify that the member cannot be <c>null</c> or the unpacking value cannot be nil because nil value is explicitly prohibitted.
            </summary>
            <param name="memberName">The name of the member.</param>
            <exception cref="T:System.Exception">Always thrown.</exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewReadOnlyMemberItemsMustNotBeNull(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking value cannot be nil because the target member is read only and its type is collection.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewStreamDoesNotContainCollectionForMember(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking collection value is not a collection.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewUnexpectedArrayLength(System.Int32,System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking array size is not expected length.
            </summary>
            <param name="expectedLength">Expected, required for deserialization array length.</param>
            <param name="actualLength">Actual array length.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewFailedToDeserializeMember(System.Type,System.String,System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that it is failed to deserialize member.
            </summary>
            <param name="targetType">Deserializing type.</param>
            <param name="memberName">The name of the deserializing member.</param>
            <param name="inner">The exception which caused current error.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.ThrowFailedToDeserializeMember(System.Type,System.String,System.Exception)">
            <summary>
            	Throws an exception to notify that it is failed to deserialize member.
            </summary>
            <param name="targetType">Deserializing type.</param>
            <param name="memberName">The name of the deserializing member.</param>
            <param name="inner">The exception which caused current error.</param>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewUnpackFromIsNotSupported(System.Type)">
            <summary>
            	Returns a new exception which represents <c>UnpackFrom</c> is not supported in this asymmetric serializer.
            </summary>
            <param name="targetType">Deserializing type.</param>
            <returns>The exception. This value will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewCreateInstanceIsNotSupported(System.Type)">
            <summary>
            	Returns a new exception which represents <c>UnpackFrom</c> is not supported in this asymmetric serializer.
            </summary>
            <param name="targetType">Deserializing type.</param>
            <returns>The exception. This value will not be <c>null</c>.</returns>
        </member>
        <member name="T:MsgPack.Serialization.SerializationMethod">
            <summary>
            	Represents serialization method for complex types.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethod.Array">
            <summary>
            	The object will be serialized as array which is ordered by member ID.
            	This is default and more interoperable option.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethod.Map">
            <summary>
            	The object will be serialized as map which is ordered by member ID.
            	This is a bit slower than array, but more stable for forward/backward compatibility.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializationMethodGeneratorOption">
            <summary>
            	Define options of serializer generation.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethodGeneratorOption.CanDump">
            <summary>
            	The generated method IL can be dumped to the current directory.
            	It is intended for the runtime, you cannot use this option.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethodGeneratorOption.CanCollect">
            <summary>
            	The entire generated method can be collected by GC when it is no longer used.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethodGeneratorOption.Fast">
            <summary>
            	Prefer performance. This options is default.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializationTarget">
            <summary>
            	Implements serialization target member extraction logics.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializerCapabilities">
            <summary>
            	Represents serializer capabilities.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerCapabilities.None">
            <summary>
            	None.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerCapabilities.PackTo">
            <summary>
            	Caller can call <c>Pack</c> and <c>PackTo</c> method safely.
            	If this flag is not set, the serializer may be deserialize only serializer.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerCapabilities.UnpackFrom">
            <summary>
            	Caller can call <c>Unpack</c> and <c>UnpackFrom</c> method safely.
            	If this flag is not set, the serializer may be serialize only serializer.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerCapabilities.UnpackTo">
            <summary>
            	Caller can call <c>UnpackTo</c> method safely.
            	If this flag is not set, the serializer should not be for mutable collection type.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializerDebugging">
            <summary>
            	Holds debugging support information.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerDebugging.TracePolimorphicSchemaEvent(System.String,System.Reflection.MemberInfo,MsgPack.Serialization.PolymorphismSchema)">
            <summary>
            	Traces the polymorphic schema event.
            </summary>
            <param name="format">The format string.</param>
            <param name="memberInfo">The target of schema.</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="T:MsgPack.Serialization.SerializerOptions">
            <summary>
            	Defines options for serializer generation.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.SerializerOptions.EmitterFlavor">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializerOptions.EmitterFlavor"/>.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializerOptions.EmitterFlavor"/>
            </value>
            <remarks>
            	For testing purposes.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializerOptions.DisablePrivilegedAccess">
            <summary>
            	Gets or sets a value indicating whether generated and/or reflection serializers should not access non public members via privileged reflection.
            </summary>
            <value>
            	<c>true</c> if privileged reflection access is disabled; otherwise, <c>false</c>. Defaults to <c>false</c>.
            </value>
            <remarks>
            	The privileged reflection means:
            	<list type="bullet">
            		<item>Access for non-public fields or property accessors via reflection. This operation requires <c>ReflectionPermission</c> of <c>MemberAccess</c> or <c>RestrictedMemberAccess</c>.</item>
            		<item>Writing values for init only fields via reflection. This operation requires <c>SecurityPermission</c> of <c>SerializationFormatter</c>.</item>
            	</list>
            	If the program run on non-privileged Silverlight environment or restricted desktop CLR,
            	serialization and deserialization should fail with <c>SecurityException</c>.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.SerializerRegistrationOptions">
            <summary>
            	Represents options for custom or pre-generated serializer registration.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerRegistrationOptions.None">
            <summary>
            	None of options are applied.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializerRegistrationOptions.AllowOverride">
            <summary>
            	Overrides existing registration with specified serializer.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializerRepository">
            <summary>
            	Repository of known <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>s.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MsgPack.Serialization.SerializerRepository"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.#ctor(MsgPack.Serialization.SerializerRepository)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializerRepository"/> class  which has copied serializers.
            </summary>
            <param name="copiedFrom">The repository which will be copied its contents.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="copiedFrom"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Dispose">
            <summary>
            	This method does not perform any operation.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Get``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Gets the registered <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> from this repository without provider parameter.
            </summary>
            <typeparam name="T">Type of the object to be marshaled/unmarshaled.</typeparam>
            <param name="context">A serialization context.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. If no appropriate mashalers has benn registered, then <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Get``1(MsgPack.Serialization.SerializationContext,System.Object)">
            <summary>
            	Gets the registered <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> from this repository with specified provider parameter.
            </summary>
            <typeparam name="T">Type of the object to be marshaled/unmarshaled.</typeparam>
            <param name="context">A serialization context.</param>
            <param name="providerParameter">A provider specific parameter. See remarks section of <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)"/> for details.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. If no appropriate mashalers has benn registered, then <c>null</c>.
            </returns>
            <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1(System.Object)"/>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0})">
            <summary>
            	Registers a <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            </summary>
            <typeparam name="T">The type of serialization target.</typeparam>
            <param name="serializer"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.</param>
            <returns>
            	<c>true</c> if success to register; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="serializer"/> is <c>null</c>.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.SerializerRegistrationOptions)"/> with <see cref="F:MsgPack.Serialization.SerializerRegistrationOptions.None"/>.
            	<note>
            		If you register serializer for value type, using <see cref="!:SerializerRegistrationOptions.WithNullable"/> is recommended because auto-generated deserializers use them to handle nil value.
            		You can use <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.SerializerRegistrationOptions)"/> with <see cref="!:SerializerRegistrationOptions.WithNullable"/> to
            		get equivalant behavior for this method with registering nullable serializer automatically.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.SerializerRegistrationOptions)">
            <summary>
            	Registers a <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            </summary>
            <typeparam name="T">The type of serialization target.</typeparam>
            <param name="serializer"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.</param>
            <param name="options">A <see cref="T:MsgPack.Serialization.SerializerRegistrationOptions"/> to control this registration process.</param>
            <returns>
            	<c>true</c> if success to register; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="serializer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.RegisterOverride``1(MsgPack.Serialization.MessagePackSerializer{``0})">
            <summary>
            	Registers a <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> forcibley.
            </summary>
            <typeparam name="T">The type of serialization target.</typeparam>
            <param name="serializer"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="serializer"/> is <c>null</c>.
            </exception>
            <remarks>
            	This method invokes <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.SerializerRegistrationOptions)"/> with <see cref="F:MsgPack.Serialization.SerializerRegistrationOptions.AllowOverride"/>.
            	<note>
            		If you register serializer for value type, using <see cref="!:SerializerRegistrationOptions.WithNullable"/> is recommended because auto-generated deserializers use them to handle nil value.
            		You can use <see cref="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.SerializerRegistrationOptions)"/> 
            		with <see cref="F:MsgPack.Serialization.SerializerRegistrationOptions.AllowOverride"/> and <see cref="!:SerializerRegistrationOptions.WithNullable"/> to
            		get equivalant behavior for this method with registering nullable serializer automatically.
            	</note>
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializerRepository.Default">
            <summary>
            	Gets the system default repository bound to default context.
            </summary>
            <value>
            	The system default repository.
            	This value will not be <c>null</c>.
            	Note that the repository is frozen.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.GetDefault">
            <summary>
            	Gets the system default repository bound to default context.
            </summary>
            <returns>
            	The system default repository.
            	This value will not be <c>null</c>.
            	Note that the repository is frozen.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.GetDefault(MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Gets the system default repository bound to default context.
            </summary>
            <param name="packerCompatibilityOptions">Not used.</param>
            <returns>
            	The system default repository.
            	This value will not be <c>null</c>.
            	Note that the repository is frozen.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.GetDefault(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Gets the system default repository bound for specified context.
            </summary>
            <param name="ownerContext">A <see cref="T:MsgPack.Serialization.SerializationContext"/> which will be bound to default serializers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ownerContext"/> is <c>null</c>.</exception>
            <returns>
            	The system default repository.
            	This value will not be <c>null</c>.
            	Note that the repository is frozen.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.ContainsFor(System.Type)">
            <summary>
            	Determines whether this repository contains serializer for the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>
            	<c>true</c> if this repository contains serializer for the specified target type; otherwise, <c>false</c>.
            	This method returns <c>false</c> for <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.GetRegisteredSerializers">
            <summary>
            	Gets the copy of registered serializer entries.
            </summary>
            <returns>
            	The copy of registered serializer entries.
            	This value will not be <c>null</c> and consistent in the invoked timing.
            </returns>
            <remarks>
            	This method returns snapshot of the invoked timing, so the result may not reflect latest status.
            	You should use the result for debugging or tooling purpose only.
            	Use <c>Get()</c> overloads to get proper serializer.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.SerializerTypeKeyRepository">
            <summary>
            	Specialized <see cref="T:MsgPack.Serialization.TypeKeyRepository"/> for serializers.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializingMember">
            <summary>
            	Represents serializing member information.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.TypeKeyRepository">
            <summary>
            	Repository for key type with RWlock scheme.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackValueTypeValueParameters`2">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue``2(MsgPack.Serialization.UnpackValueTypeValueParameters{``0,``1}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Serializer">
            <summary>
            	The serializer to deserialize current item.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.ItemsCount">
            <summary>
            	The items count to be unpacked.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Unpacked">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.MemberName">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Setter">
            <summary>
            	The delegate which takes <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.UnpackingContext" /> and unpacked value, and then set the value to the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.TargetObjectType">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.DirectRead">
            <summary>
            	The delegate which refers direct reading. This field should be <c>null</c> when <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Serializer" /> is specified.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue``2(MsgPack.Serialization.UnpackReferenceTypeValueParameters{``0,``1}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Serializer">
            <summary>
            	The serializer to deserialize current item.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.ItemsCount">
            <summary>
            	The items count to be unpacked.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Unpacked">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.MemberName">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Setter">
            <summary>
            	The delegate which takes <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.UnpackingContext" /> and unpacked value, and then set the value to the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.TargetObjectType">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.DirectRead">
            <summary>
            	The delegate which refers direct reading. This field should be <c>null</c> when <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Serializer" /> is specified.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.NilImplication">
            <summary>
            	The nil implication of current item.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackNullableTypeValueParameters`2">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableTypeValue``2(MsgPack.Serialization.UnpackNullableTypeValueParameters{``0,``1}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Serializer">
            <summary>
            	The serializer to deserialize current item.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.ItemsCount">
            <summary>
            	The items count to be unpacked.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Unpacked">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.MemberName">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Setter">
            <summary>
            	The delegate which takes <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.UnpackingContext" /> and unpacked value, and then set the value to the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.TargetObjectType">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.DirectRead">
            <summary>
            	The delegate which refers direct reading. This field should be <c>null</c> when <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Serializer" /> is specified.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.NilImplication">
            <summary>
            	The nil implication of current item.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackMessagePackObjectValue``1(MsgPack.Serialization.UnpackMessagePackObjectValueParameters{``0}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Serializer">
            <summary>
            	The serializer to deserialize current item.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.ItemsCount">
            <summary>
            	The items count to be unpacked.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Unpacked">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.MemberName">
            <summary>
            	The current unpacked count for debugging.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Setter">
            <summary>
            	The delegate which takes <see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.UnpackingContext" /> and unpacked value, and then set the value to the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.NilImplication">
            <summary>
            	The nil implication of current item.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackFromArrayParameters`2">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackFromArray``2(MsgPack.Serialization.UnpackFromArrayParameters{``0,``1}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromArrayParameters`2.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Factory">
            <summary>
            	A delegate to the factory method which creates the result from the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromArrayParameters`2.ItemNames">
            <summary>
            	The names of the members for pretty exception message.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Operations">
            <summary>
            	Delegates each ones unpack single member in order.
            	The 1st argument will be <see cref="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Unpacker"/>, 2nd argument will be <see cref="F:MsgPack.Serialization.UnpackFromArrayParameters`2.UnpackingContext"/>,
            	3rd argument is index of current item, and 4th argument is total items count in the array or map stream.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackFromMapParameters`2">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackFromMap``2(MsgPack.Serialization.UnpackFromMapParameters{``0,``1}@)"/> method.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromMapParameters`2.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromMapParameters`2.UnpackingContext">
            <summary>
            	The context which will store deserialized value.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromMapParameters`2.Factory">
            <summary>
            	A delegate to the factory method which creates the result from the context.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackFromMapParameters`2.Operations">
            <summary>
            	Delegates each ones unpack single member in order.
            	The key of this dictionary must be member name.
            	The 1st argument will be <see cref="F:MsgPack.Serialization.UnpackFromMapParameters`2.Unpacker"/>, 2nd argument will be <see cref="F:MsgPack.Serialization.UnpackFromMapParameters`2.UnpackingContext"/>,
            	3rd argument is index of current item, and 4th argument is total items count in the array or map stream.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackCollectionParameters`1">
            <summary>
            	Represents parameters of <see cref="M:MsgPack.Serialization.UnpackHelpers.UnpackCollection``1(MsgPack.Serialization.UnpackCollectionParameters{``0}@)"/> method.
            </summary>
            <typeparam name="T">The type of the collection to be unpacked.</typeparam>
        </member>
        <member name="F:MsgPack.Serialization.UnpackCollectionParameters`1.Unpacker">
            <summary>
            	The unpacker.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackCollectionParameters`1.ItemsCount">
            <summary>
            	The items count to be unpacked.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackCollectionParameters`1.Collection">
            <summary>
            	The collection instance to be added unpacked items.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackCollectionParameters`1.BulkOperation">
            <summary>
            	A delegate to the bulk operation (typically UnpackToCore call). 
            	The 1st argument will be <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.Unpacker"/>, 2nd argument will be <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.Collection"/>,
            	and 3rd argument will be <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.ItemsCount"/>.
            	If this field is <c>null</c>, <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.EachOperation"/> will be used.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.UnpackCollectionParameters`1.EachOperation">
            <summary>
            	A delegate to the operation for each items, which typically unpack value and append it to the <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.Collection"/>.
            	The 1st argument will be <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.Unpacker"/>, 2nd argument will be <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.Collection"/>,
            	and 3rd argument will be index of the current item.
            	If <see cref="F:MsgPack.Serialization.UnpackCollectionParameters`1.BulkOperation"/> field is not <c>null</c>, this field will be ignored.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines serialization helper APIs.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackArrayTo``1(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},``0[])">
            <summary>
            	Unpacks the array to the specified array.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize array.</param>
            <param name="array">The array instance to be filled.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo(MsgPack.Unpacker,System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            	Unpacks the collection with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="collection">The non-generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``1(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize elements.</param>
            <param name="collection">The generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``1(MsgPack.Unpacker,System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            	Unpacks the collection with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="TDiscarded">The return type of Add method.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="collection">The non-generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``2(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <typeparam name="TDiscarded">The return type of Add method.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize elements.</param>
            <param name="collection">The generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMapTo``2(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.MessagePackSerializer{``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="keySerializer">The serializer to deserialize key elements.</param>
            <param name="valueSerializer">The serializer to deserialize value elements.</param>
            <param name="dictionary">The generic dictionary instance to be added unpacked elements.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMapTo(MsgPack.Unpacker,System.Collections.IDictionary)">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="dictionary">The non-generic dictionary instance to be added unpacked elements.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.GetItemsCount(MsgPack.Unpacker)">
            <summary>
            	Gets the items count as <see cref="T:System.Int32"/>.
            </summary>
            <param name="unpacker">The unpacker.</param>
            <returns>The items count as <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="unpacker"/> is <c>null.</c></exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The items count is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <remarks>
            	The items count of the collection can be between <see cref="F:System.Int32.MaxValue"/> and <see cref="F:System.UInt32.MaxValue"/>,
            	but most collections do not support so big count.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.ConvertWithEnsuringNotNull``1(System.Object,System.String,System.Type)">
            <summary>
            	Ensures the boxed type is not null thus it cannot be unboxing.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
            <param name="boxed">The boxed deserializing value.</param>
            <param name="name">The name of the member.</param>
            <param name="targetType">The type of the target.</param>
            <returns>The unboxed value.</returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.InvokeUnpackFrom``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Unpacker)">
            <summary>
            	Invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)"/> FAMANDASM method directly.
            </summary>
            <typeparam name="T">The type of deserializing object.</typeparam>
            <param name="serializer">The invocation target <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.</param>
            <param name="unpacker">The unpacker to be passed to the method.</param>
            <returns>A deserialized value.</returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.TryGetCollectionConstructor(System.Type)">
            <summary>
            	Retrieves a most appropriate constructor with <see cref="T:System.Int32"/> capacity parameter and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> comparer parameter or both of them, >or default constructor of the <paramref name="instanceType"/>.
            </summary>
            <param name="instanceType">The target collection type to be instanciated.</param>
            <returns>A constructor of the <paramref name="instanceType"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.IsIEqualityComparer(System.Type)">
            <summary>
            	Determines the type is <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="type">The type should be <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>
            	<c>true</c>, if <paramref name="type"/> is open <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic type; <c>false</c>, otherwise.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.GetEqualityComparer``1">
            <summary>
            	Gets an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> with platform safe fashion.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <returns>
            	An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.GetIdentity``1">
            <summary>
            	Gets the delegate which just returns the input ('identity' function).
            </summary>
            <typeparam name="T">The type of input and output.</typeparam>
            <returns>
            	<see cref="T:System.Func`2"/> delegate which just returns the input. This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.Unbox``1">
            <summary>
            	Gets the delegate which returns the input ('identity' function) as output type.
            </summary>
            <typeparam name="T">The type of output.</typeparam>
            <returns>
            	<see cref="T:System.Func`2"/> delegate which returns the converted input. This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackBooleanValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableBoolean(System.Nullable{System.Boolean}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Boolean type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableBooleanValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableBoolean(System.Nullable{System.Boolean}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Boolean type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackByteValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableByte(System.Nullable{System.Byte}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Byte type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableByteValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableByte(System.Nullable{System.Byte}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Byte type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackInt16Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt16(System.Nullable{System.Int16}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int16 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableInt16Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt16(System.Nullable{System.Int16}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int16 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackInt32Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt32(System.Nullable{System.Int32}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int32 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt32(System.Nullable{System.Int32}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int32 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackInt64Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt64(System.Nullable{System.Int64}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int64 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableInt64(System.Nullable{System.Int64}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Int64 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackSByteValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableSByte(System.Nullable{System.SByte}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack SByte type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableSByteValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableSByte(System.Nullable{System.SByte}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack SByte type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackUInt16Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt16(System.Nullable{System.UInt16}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt16 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableUInt16Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt16(System.Nullable{System.UInt16}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt16 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackUInt32Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt32(System.Nullable{System.UInt32}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt32 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableUInt32Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt32(System.Nullable{System.UInt32}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt32 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackUInt64Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt64(System.Nullable{System.UInt64}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt64 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableUInt64Value(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableUInt64(System.Nullable{System.UInt64}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack UInt64 type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackSingleValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableSingle(System.Nullable{System.Single}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Single type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableSingleValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableSingle(System.Nullable{System.Single}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Single type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackDoubleValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableDouble(System.Nullable{System.Double}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Double type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableDoubleValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadNullableDouble(System.Nullable{System.Double}@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack Double type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackStringValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadString(System.String@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack string type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackBinaryValue(MsgPack.Unpacker,System.Type,System.String)">
            <summary>
            	Invokes <see cref="M:MsgPack.Unpacker.ReadBinary(System.Byte[]@)" /> and returns its result.
            </summary>
            <param name="unpacker">The unpacker to be used.</param>
            <param name="objectType">The type of the object which is deserializing now.</param>
            <param name="memberName">The name of the member which is deserializing now.</param>
            <returns>
            	An unpacked value.
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to unpack byte array type value from underlying stream.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackComplexObject``1(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},System.Int32)">
            <summary>
            	Unpacks the complex object from specified <see cref="T:MsgPack.Unpacker"/> with specified <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>/
            </summary>
            <typeparam name="T">The type of unpacking value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="serializer">The serializer to deserialize complex object.</param>
            <param name="unpacked">The current unpacked count for debugging.</param>
            <returns>
            	A value read from current stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="serializer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="unpacked"/> is negative number.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue``2(MsgPack.Unpacker,``0,MsgPack.Serialization.MessagePackSerializer{``1},System.Int32,System.Int32,System.Type,System.String,System.Func{MsgPack.Unpacker,System.Type,System.String,``1},System.Action{``0,``1})">
            <summary>
            	Unpacks the value type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which will store deserialized value.</param>
            <param name="serializer">The serializer to deserialize complex object. This parameter should be <c>null</c> when <paramref name="directRead" /> is specified.</param>
            <param name="itemsCount">The items count to be unpacked.</param>
            <param name="unpacked">The unpacked items count.</param>
            <param name="targetObjectType">Type of the target object for debugging message.</param>
            <param name="memberName">Name of the member for debugging message.</param>
            <param name="directRead">The delegate which refers direct reading. This parameter should be <c>null</c> when <paramref name="serializer" /> is specified.</param>
            <param name="setter">The delegate which takes <paramref name="context" /> and unpacked value, and then set the value to the context.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            	Or, <paramref name="memberName"/> is <c>null</c>.
            	Or, <paramref name="targetObjectType"/> is <c>null</c>.
            	Or, <paramref name="setter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="itemsCount"/> is negative number.
            	Or, <paramref name="unpacked"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <paramref name="directRead"/> and <paramref name="serializer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue``2(MsgPack.Serialization.UnpackValueTypeValueParameters{``0,``1}@)">
            <summary>
            	Unpacks the value type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackValueTypeValueParameters`2" /> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.UnpackingContext" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.MemberName" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.TargetObjectType" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Setter" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.ItemsCount" /> of <paramref name="parameter"/> is negative number.
            	Or, <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Unpacked" /> of <paramref name="parameter"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.DirectRead" /> 
            	and <see cref="F:MsgPack.Serialization.UnpackValueTypeValueParameters`2.Serializer" /> of <paramref name="parameter"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue``2(MsgPack.Unpacker,``0,MsgPack.Serialization.MessagePackSerializer{``1},System.Int32,System.Int32,System.Type,System.String,MsgPack.Serialization.NilImplication,System.Func{MsgPack.Unpacker,System.Type,System.String,``1},System.Action{``0,``1})">
            <summary>
            	Unpacks the reference type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which will store deserialized value.</param>
            <param name="serializer">The serializer to deserialize complex object. This parameter should be <c>null</c> when <paramref name="directRead" /> is specified.</param>
            <param name="itemsCount">The items count to be unpacked.</param>
            <param name="unpacked">The unpacked items count.</param>
            <param name="targetObjectType">Type of the target object for debugging message.</param>
            <param name="memberName">Name of the member for debugging message.</param>
            <param name="nilImplication">The nil implication of current item.</param>
            <param name="directRead">The delegate which refers direct reading. This parameter should be <c>null</c> when <paramref name="serializer" /> is specified.</param>
            <param name="setter">The delegate which takes <paramref name="context" /> and unpacked value, and then set the value to the context.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            	Or, <paramref name="memberName"/> is <c>null</c>.
            	Or, <paramref name="targetObjectType"/> is <c>null</c>.
            	Or, <paramref name="setter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="itemsCount"/> is negative number.
            	Or, <paramref name="unpacked"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <paramref name="directRead"/> and <paramref name="serializer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue``2(MsgPack.Serialization.UnpackReferenceTypeValueParameters{``0,``1}@)">
            <summary>
            	Unpacks the reference type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2" /> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.UnpackingContext" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.MemberName" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.TargetObjectType" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Setter" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.ItemsCount" /> of <paramref name="parameter"/> is negative number.
            	Or, <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Unpacked" /> of <paramref name="parameter"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.DirectRead" /> 
            	and <see cref="F:MsgPack.Serialization.UnpackReferenceTypeValueParameters`2.Serializer" /> of <paramref name="parameter"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableTypeValue``2(MsgPack.Unpacker,``0,MsgPack.Serialization.MessagePackSerializer{System.Nullable{``1}},System.Int32,System.Int32,System.Type,System.String,MsgPack.Serialization.NilImplication,System.Func{MsgPack.Unpacker,System.Type,System.String,System.Nullable{``1}},System.Action{``0,System.Nullable{``1}})">
            <summary>
            	Unpacks the nullable type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which will store deserialized value.</param>
            <param name="serializer">The serializer to deserialize complex object. This parameter should be <c>null</c> when <paramref name="directRead" /> is specified.</param>
            <param name="itemsCount">The items count to be unpacked.</param>
            <param name="unpacked">The unpacked items count.</param>
            <param name="targetObjectType">Type of the target object for debugging message.</param>
            <param name="memberName">Name of the member for debugging message.</param>
            <param name="nilImplication">The nil implication of current item.</param>
            <param name="directRead">The delegate which refers direct reading. This parameter should be <c>null</c> when <paramref name="serializer" /> is specified.</param>
            <param name="setter">The delegate which takes <paramref name="context" /> and unpacked value, and then set the value to the context.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            	Or, <paramref name="memberName"/> is <c>null</c>.
            	Or, <paramref name="targetObjectType"/> is <c>null</c>.
            	Or, <paramref name="setter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="itemsCount"/> is negative number.
            	Or, <paramref name="unpacked"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <paramref name="directRead"/> and <paramref name="serializer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackNullableTypeValue``2(MsgPack.Serialization.UnpackNullableTypeValueParameters{``0,``1}@)">
            <summary>
            	Unpacks the nullable type value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackNullableTypeValueParameters`2" /> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.UnpackingContext" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.MemberName" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.TargetObjectType" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Setter" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.ItemsCount" /> of <paramref name="parameter"/> is negative number.
            	Or, <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Unpacked" /> of <paramref name="parameter"/> is negative number.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Both of <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.DirectRead" /> 
            	and <see cref="F:MsgPack.Serialization.UnpackNullableTypeValueParameters`2.Serializer" /> of <paramref name="parameter"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMessagePackObjectValueFromArray``1(MsgPack.Unpacker,``0,System.Int32,System.Int32,System.String,MsgPack.Serialization.NilImplication,System.Action{``0,MsgPack.MessagePackObject})">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> value from MessagePack array.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which will store deserialized value.</param>
            <param name="itemsCount">The items count to be unpacked.</param>
            <param name="unpacked">The unpacked items count.</param>
            <param name="memberName">Name of the member for debugging message.</param>
            <param name="nilImplication">The nil implication of current item.</param>
            <param name="setter">The delegate which takes <paramref name="context" /> and unpacked value, and then set the value to the context.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            	Or, <paramref name="memberName"/> is <c>null</c>.
            	Or, <paramref name="setter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="itemsCount"/> is negative number.
            	Or, <paramref name="unpacked"/> is negative number.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMessagePackObjectValueFromMap``1(MsgPack.Unpacker,``0,System.Int32,System.Int32,System.String,MsgPack.Serialization.NilImplication,System.Action{``0,MsgPack.MessagePackObject})">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> value from MessagePack map.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which will store deserialized value.</param>
            <param name="itemsCount">The items count to be unpacked.</param>
            <param name="unpacked">The unpacked items count.</param>
            <param name="memberName">Name of the member for debugging message.</param>
            <param name="nilImplication">The nil implication of current item.</param>
            <param name="setter">The delegate which takes <paramref name="context" /> and unpacked value, and then set the value to the context.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            	Or, <paramref name="memberName"/> is <c>null</c>.
            	Or, <paramref name="setter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="itemsCount"/> is negative number.
            	Or, <paramref name="unpacked"/> is negative number.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMessagePackObjectValue``1(MsgPack.Serialization.UnpackMessagePackObjectValueParameters{``0}@)">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> value from MessagePack stream.
            </summary>
            <typeparam name="TContext">The type of the context object which will store deserialized value.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.UnpackingContext" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.MemberName" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Setter" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.ItemsCount" /> of <paramref name="parameter"/> is negative number.
            	Or, <see cref="F:MsgPack.Serialization.UnpackMessagePackObjectValueParameters`1.Unpacked" /> of <paramref name="parameter"/> is negative number.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackFromArray``2(MsgPack.Unpacker,``0,System.Func{``0,``1},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Action{MsgPack.Unpacker,``0,System.Int32,System.Int32}})">
            <summary>
            	Unpacks object from msgpack array.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which holds intermediate states. This value may be <c>null</c> when the caller implementation allows it.</param>
            <param name="factory">A delegate to the factory method which creates the result from the context.</param>
            <param name="itemNames">The names of the members for pretty exception message.</param>
            <param name="operations">
            	Delegates each ones unpack single member in order.
            	The 1st argument will be <paramref name="unpacker"/>, 2nd argument will be <paramref name="context"/>,
            	and 3rd argument is index of current item.
            </param>
            <returns>
            	An unpacked object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="factory"/> is <c>null</c>.
            	Or, <paramref name="operations"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackFromArray``2(MsgPack.Serialization.UnpackFromArrayParameters{``0,``1}@)">
            <summary>
            	Unpacks object from msgpack array.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackFromArrayParameters`2" /> object.</param>
            <returns>
            	An unpacked object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Factory" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackFromArrayParameters`2.Operations" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackFromMap``2(MsgPack.Unpacker,``0,System.Func{``0,``1},System.Collections.Generic.IDictionary{System.String,System.Action{MsgPack.Unpacker,``0,System.Int32,System.Int32}})">
            <summary>
            	Unpacks object from msgpack map.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
            <param name="unpacker">The unpacker.</param>
            <param name="context">The context which holds intermediate states. This value may be <c>null</c> when the caller implementation allows it.</param>
            <param name="factory">A delegate to the factory method which creates the result from the context.</param>
            <param name="operations">
            	Delegates each ones unpack single member in order.
            	The key of this dictionary must be member name.
            	The 1st argument will be <paramref name="unpacker"/>, 2nd argument will be <paramref name="context"/>,
            	and 3rd argument is index of current item.
            </param>
            <returns>
            	An unpacked object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or, <paramref name="factory"/> is <c>null</c>.
            	Or, <paramref name="operations"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackFromMap``2(MsgPack.Serialization.UnpackFromMapParameters{``0,``1}@)">
            <summary>
            	Unpacks object from msgpack map.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TResult">The type of the unpacked object.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackFromMapParameters`2" /> object.</param>
            <returns>
            	An unpacked object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<see cref="F:MsgPack.Serialization.UnpackFromMapParameters`2.Unpacker" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackFromMapParameters`2.Factory" /> of <paramref name="parameter"/> is <c>null</c>.
            	Or, <see cref="F:MsgPack.Serialization.UnpackFromMapParameters`2.Operations" /> of <paramref name="parameter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollection``1(MsgPack.Unpacker,System.Int32,``0,System.Action{MsgPack.Unpacker,``0,System.Int32},System.Action{MsgPack.Unpacker,``0,System.Int32,System.Int32})">
            <summary>
            	Unpacks the collection from MessagePack stream.
            </summary>
            <typeparam name="T">The type of the collection to be unpacked.</typeparam>
            <param name="unpacker">The unpacker where position is located at array or map header.</param>
            <param name="itemsCount">The collection count gotten from the <paramref name="unpacker"/>.</param>
            <param name="collection">The collection instance to be added unpacked items.</param>
            <param name="bulkOperation">
            	A delegate to the bulk operation (typically UnpackToCore call). 
            	The 1st argument will be <paramref name="unpacker"/>, 2nd argument will be <paramref name="collection"/>,
            	and 3rd argument will be <paramref name="itemsCount"/>.
            	If this parameter is <c>null</c>, <paramref name="eachOperation"/> will be used.
            </param>
            <param name="eachOperation">
            	A delegate to the operation for each items, which typically unpack value and append it to the <paramref name="collection"/>.
            	The 1st argument will be <paramref name="unpacker"/>, 2nd argument will be <paramref name="collection"/>,
            	and 3rd argument will be index of the current item.
            	If <paramref name="bulkOperation"/> parameter is not <c>null</c>, this parameter will be ignored.
            </param>
            <returns>
            	An unpacked collection.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollection``1(MsgPack.Serialization.UnpackCollectionParameters{``0}@)">
            <summary>
            	Unpacks the collection from MessagePack stream.
            </summary>
            <typeparam name="T">The type of the collection to be unpacked.</typeparam>
            <param name="parameter">The reference to <see cref="T:MsgPack.Serialization.UnpackCollectionParameters`1" /> object.</param>
            <returns>
            	An unpacked collection.
            </returns>
        </member>
        <member name="T:MsgPack.BigEndianBinary">
            <summary>
            	Define bit operations which enforce big endian.
            </summary>
        </member>
        <member name="T:MsgPack.Binary">
            <summary>
            	Defines binary related utilities.
            </summary>
        </member>
        <member name="F:MsgPack.Binary.Empty">
            <summary>
            	Singleton empty <see cref="T:System.Byte"/>[].
            </summary>
        </member>
        <member name="T:MsgPack.BufferManager">
            <summary>
            	Manages internal thread-local buffers for packer/unpacker.
            </summary>
        </member>
        <member name="T:MsgPack.CollectionDebuggerProxy`1">
            <summary>
            	Debugger type proxy for <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
        </member>
        <member name="T:MsgPack.DictionaryDebuggerProxy`2">
            <summary>
            	Debugger type proxy for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="T:MsgPack.Float32Bits">
            <summary>
            	Provides bit access for <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MsgPack.Float32Bits.Value">
            <summary>
            	Value as <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:MsgPack.Float32Bits.Byte0">
            <summary>
            	Most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float32Bits.Byte1">
            <summary>
            	2nd bit from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float32Bits.Byte2">
            <summary>
            	3rd byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float32Bits.Byte3">
            <summary>
            	Least byte of current endian.
            </summary>
        </member>
        <member name="M:MsgPack.Float32Bits.#ctor(System.Single)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Float32Bits"/> type from specified <see cref="T:System.Single"/>.
            </summary>
            <param name="value">Value of <see cref="T:System.Single"/>.</param>
        </member>
        <member name="M:MsgPack.Float32Bits.#ctor(System.Byte[],System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Float32Bits"/> type from specified <see cref="T:System.Byte"/>[] which is big endian.
            </summary>
            <param name="bigEndianBytes">Array of <see cref="T:System.Byte"/> which contains bytes in big endian.</param>
            <param name="offset">Offset to read.</param>
        </member>
        <member name="T:MsgPack.Float64Bits">
            <summary>
            	Provides bit access for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Value">
            <summary>
            	Value as <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte0">
            <summary>
            	Most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte1">
            <summary>
            	2nd bit from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte2">
            <summary>
            	3rd byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte3">
            <summary>
            	4th byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte4">
            <summary>
            	5th byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte5">
            <summary>
            	6th byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte6">
            <summary>
            	7th byte from most significant byte of current endian.
            </summary>
        </member>
        <member name="F:MsgPack.Float64Bits.Byte7">
            <summary>
            	Least significant byte of current endian.
            </summary>
        </member>
        <member name="M:MsgPack.Float64Bits.#ctor(System.Byte[],System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Float64Bits"/> type from specified <see cref="T:System.Byte"/>[] which is big endian.
            </summary>
            <param name="bigEndianBytes">Array of <see cref="T:System.Byte"/> which contains bytes in big endian.</param>
            <param name="offset">Offset to read.</param>
        </member>
        <member name="T:MsgPack.InvalidMessagePackStreamException">
            <summary>
            	Exception occured when inbound stream is invalid as serialized Message Pack stream.
            </summary>
        </member>
        <member name="M:MsgPack.InvalidMessagePackStreamException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.InvalidMessagePackStreamException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:MsgPack.InvalidMessagePackStreamException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.InvalidMessagePackStreamException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MsgPack.InvalidMessagePackStreamException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.InvalidMessagePackStreamException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            	The exception that is the cause of the current exception, or a <c>null</c> if no inner exception is specified.
            </param>
        </member>
        <member name="M:MsgPack.InvalidMessagePackStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.InvalidMessagePackStreamException"/> class with serialized data.
            </summary>
            <param name="info">
            	The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            	The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            	The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The class name is <c>null</c> or <see cref="P:HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MsgPack.IPackable">
            <summary>
            	An interface which is implemented by the objects which know how to pack themselves using specified <see cref="T:MsgPack.Packer" />.
            </summary>
            <remarks>
            	<para name="MsgPack.Serialization.customPackingUnpacking">
    Custom serialization interfaces are lightweight way to implement custom serialization especially you own the type itself.
    You can tweak individual member serialization as well. For example:
    <list type="bullet">
      <item>Encode text data which may contain non-ASCII charactors with UTF-16 format.</item>
      <item>Pack binary with encryption or compression.</item>
    </list>
  </para>
            </remarks>
        </member>
        <member name="M:MsgPack.IPackable.PackToMessage(MsgPack.Packer,MsgPack.PackingOptions)">
            <summary>
            	Packs this object contents to the specified <see cref="T:MsgPack.Packer" />.
            </summary>
            <param name="packer">The <see cref="T:MsgPack.Packer" /> that this object will write to.</param>
            <param name="options">Packing options. This value can be null.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to serialize this object.
            </exception>
            <remarks name="MsgPack.Serialization.customPacking">
    <para>
      In general, objet's state will be serialized as array or map.
      If so, emit array/map header with the items count via <see cref="M:MsgPack.Packer.PackArrayHeader(System.Int32)" /> or <see cref="M:MsgPack.Packer.PackMapHeader(System.Int32)" />,
      then serialize states themselves.
    </para>
    <para>
      On the other hand, value types may be serialized as single value.
      For example, <see cref="T:System.TimeSpan" /> can be serialized as <c>int64</c> value with its <see cref="P:System.TimeSpan.Ticks">Ticks</see> property.
    </para>
  </remarks>
        </member>
        <member name="F:MsgPack.ItemsUnpacker._offset">
            <summary>
            	An position of seekable <see cref="T:System.IO.Stream"/> or offset from start of this instance.
            </summary>
        </member>
        <member name="F:MsgPack.ItemsUnpacker._lastOffset">
            <summary>
            	An position of seekable <see cref="T:System.IO.Stream"/> or offset from start of this instance before last operation.
            </summary>
        </member>
        <member name="M:MsgPack.ItemsUnpacker.ReadSubtreeCore">
            <summary>
            	Starts unpacking of current subtree.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Unpacker"/> to unpack current subtree.
            	This will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.ItemsUnpacker.ReadSubtreeItem">
            <summary>
            	Read subtree item from current stream.
            </summary>
            <returns>
            	<c>true</c>, if position is sucessfully move to next entry;
            	<c>false</c>, if position reaches the tail of the Message Pack stream.
            </returns>
            <remarks>
            	This method only be called from <see cref="T:MsgPack.SubtreeUnpacker"/>.
            </remarks>
        </member>
        <member name="T:MsgPack.IUnpackable">
            <summary>
            	An interface which is implemented by the objects which know how to unpack themselves using specified <see cref="T:MsgPack.Unpacker" />.
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="remarks.xml" path="doc/remarks[@name=&quot;MsgPack.Serialization.customPackingUnpacking&quot;]" />
            </remarks>
        </member>
        <member name="M:MsgPack.IUnpackable.UnpackFromMessage(MsgPack.Unpacker)">
            <summary>
            	Unpacks this object contents from the specified <see cref="T:MsgPack.Unpacker" />.
            </summary>
            <param name="unpacker">The <see cref="T:MsgPack.Unpacker" /> that this object will read from.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize this object.
            </exception>
            <remarks name="MsgPack.Serialization.customUnpacking">
    <para>
      In general, objet's state is serialized as array or map.
      If so, reading array/map header and then read individual fields (note that every state has their key string when the object serialized as map).
      You should accept both of array and map for the object itself, and allow string and underlying numerics for enum values as "torelant reader".
    </para>
    <para>
      On the other hand, value types may be serialized as single value.
      For example, <see cref="T:System.TimeSpan" /> can be serialized as <c>int64</c> value with its <see cref="P:System.TimeSpan.Ticks">Ticks</see> property.
    </para>
  </remarks>
        </member>
        <member name="T:MsgPack.KnownExtTypeCode">
            <summary>
            	Defines known ext type code for MessagePack for CLI.
            </summary>
            <remarks>
            	Note that values in this class are not guaranteed as interoperable with other implementations.
            	These are just known by MessagePack for CLI implementation.
            </remarks>
        </member>
        <member name="P:MsgPack.KnownExtTypeCode.MultidimensionalArray">
            <summary>
            	Gets the ext type code which represents multidimensional array.
            </summary>
            <value>
            	0x71.
            </value>
        </member>
        <member name="T:MsgPack.KnownExtTypeName">
            <summary>
            	Defines known ext type name for MessagePack for CLI.
            </summary>
            <remarks>
            	Note that values in this class are not guaranteed as interoperable with other implementations.
            	These are just known by MessagePack for CLI implementation.
            </remarks>
        </member>
        <member name="P:MsgPack.KnownExtTypeName.MultidimensionalArray">
            <summary>
            	Gets the ext type name which represents multidimensional array.
            </summary>
            <value>
            	"MultidimensionalArray".
            </value>
        </member>
        <member name="T:MsgPack.MessageNotSupportedException">
            <summary>
            	Exception occurs when serialized stream contains structures or features which will never be supported by MsgPack/CLI implementation.
            </summary>
        </member>
        <member name="M:MsgPack.MessageNotSupportedException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageNotSupportedException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:MsgPack.MessageNotSupportedException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageNotSupportedException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MsgPack.MessageNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageNotSupportedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            	The exception that is the cause of the current exception, or a <c>null</c> if no inner exception is specified.
            </param>
        </member>
        <member name="M:MsgPack.MessageNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageNotSupportedException"/> class with serialized data.
            </summary>
            <param name="info">
            	The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            	The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            	The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The class name is <c>null</c> or <see cref="P:HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MsgPack.MessagePackConvert">
            <summary>
            	Define common convert rountines specific to MessagePack.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackConvert.EncodeString(System.String)">
            <summary>
            	Encode specified string by default encoding.
            </summary>
            <param name="value">String value.</param>
            <returns>Encoded <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackConvert.DecodeStringStrict(System.Byte[])">
            <summary>
            	Decode specified byte[] by default encoding.
            </summary>
            <param name="value">Byte[] value.</param>
            <returns>Decoded <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            	<paramref name="value"/> contains non-UTF-8 bits.
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackConvert.ToDateTimeOffset(System.Int64)">
            <summary>
            	Convert specified <see cref="T:System.Int64"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">
            	<see cref="T:System.Int64"/> value which is unpacked from packed message and may represent date-time value.
            </param>
            <returns>
            	<see cref="T:System.DateTimeOffset"/>. Offset of this value always 0.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackConvert.ToDateTime(System.Int64)">
            <summary>
            	Convert specified <see cref="T:System.Int64"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">
            	<see cref="T:System.Int64"/> value which is unpacked from packed message and may represent date-time value.
            </param>
            <returns>
            	<see cref="T:System.DateTime"/>. This value is always UTC.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackConvert.FromDateTimeOffset(System.DateTimeOffset)">
            <summary>
            	Convert specified <see cref="T:System.DateTimeOffset"/> to <see cref="T:System.Int64"/> as MessagePack defacto-standard.
            </summary>
            <param name="value"><see cref="T:System.DateTimeOffset"/>.</param>
            <returns>
            	UTC epoc time from 1970/1/1 0:00:00, in milliseconds.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackConvert.FromDateTime(System.DateTime)">
            <summary>
            	Convert specified <see cref="T:System.DateTime"/> to <see cref="T:System.Int64"/> as MessagePack defacto-standard.
            </summary>
            <param name="value"><see cref="T:System.DateTime"/>.</param>
            <returns>
            	UTC epoc time from 1970/1/1 0:00:00, in milliseconds.
            </returns>
        </member>
        <member name="T:MsgPack.MessagePackExtendedTypeObject">
            <summary>
            	Represents Message Pack extended type object.
            </summary>
        </member>
        <member name="F:MsgPack.MessagePackExtendedTypeObject._typeCode">
            <summary>
            	A type code of this object.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackExtendedTypeObject.TypeCode">
            <summary>
            	Gets a type code of this object.
            </summary>
            <value>
            	A type code. Note that values over <see cref="F:System.SByte.MaxValue"/> are reserved for MsgPack spec itself.
            </value>
        </member>
        <member name="F:MsgPack.MessagePackExtendedTypeObject._body">
            <summary>
            	A binary value portion of this object.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackExtendedTypeObject.Body">
            <summary>
            	Gets a binary value portion of this object.
            </summary>
            <value>
            	A binary value portion of this object. This value will not be null.
            </value>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.GetBody">
            <summary>
            	Gets a copy of the binary value portion of this object.
            </summary>
            <value>
            	A copy of the binary value portion of this object. This value will not be null.
            </value>
        </member>
        <member name="P:MsgPack.MessagePackExtendedTypeObject.IsValid">
            <summary>
            	Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.#ctor(System.Byte,System.Byte[])">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackExtendedTypeObject"/> struct.
            </summary>
            <param name="typeCode">A type code of this extension object.</param>
            <param name="body">A binary value portion.</param>
            <exception cref="T:System.ArgumentException">
            	The <paramref name="typeCode"/> is over 127. Higher values are reserved for MessagePack format specification.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.Unpack(System.Byte,System.Byte[])">
            <summary>
            	Creates a new instance of the <see cref="T:MsgPack.MessagePackExtendedTypeObject"/> struct.
            </summary>
            <param name="typeCode">A type code of this extension object.</param>
            <param name="body">A binary value portion.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> is <c>null</c>.</exception>
            <remarks>
            	This method allows reserved type code. It means that this method does not throw exception when the <paramref name="typeCode"/> is reserved value (greater then 0x7F).
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.ToString">
            <summary>
            	Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            	A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.GetHashCode">
            <summary>
            	Returns a hash code for this instance.
            </summary>
            <returns>
            	A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.Equals(System.Object)">
            <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.Equals(MsgPack.MessagePackExtendedTypeObject)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.op_Equality(MsgPack.MessagePackExtendedTypeObject,MsgPack.MessagePackExtendedTypeObject)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" />s are equal.
            </summary>
            <param name="left">A <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.</param>
            <param name="right">A <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" />s are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackExtendedTypeObject.op_Inequality(MsgPack.MessagePackExtendedTypeObject,MsgPack.MessagePackExtendedTypeObject)">
            <summary>
            	Determines whether the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" />s are not equal.
            </summary>
            <param name="left">A <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.</param>
            <param name="right">A <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MsgPack.MessagePackExtendedTypeObject" />s are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MsgPack.MessagePackObject">
            <summary>
            	Represents deserialized object of MsgPack.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Boolean)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Boolean"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Byte)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Byte"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.SByte)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.SByte"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Int16)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Int16"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.UInt16)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.UInt16"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Int32"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.UInt32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.UInt32"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Int64)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Int64"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.UInt64)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.UInt64"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Single)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Single"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Double)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.Double"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:System.String"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Byte[])">
            <summary>
            	Initializes a new instance of the <see cref="T:System.Byte"/>[] type which wraps <see cref="T:System.Byte" />[] instance with specified manner.
            </summary>
            <param name="value">A bytes array to be wrapped.</param>
            <remarks>
            	This constructor invokes <see cref="M:MsgPack.MessagePackObject.#ctor(System.Byte[],System.Boolean)" /> with <c>false</c>, that means if you pass tha bytes array which is valid utf-8, resulting object can be <see cref="T:System.String" />,
            	and its <see cref="P:MsgPack.MessagePackObject.UnderlyingType" /> should be <see cref="T:System.String" />.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Byte[],System.Boolean)">
            <summary>
            	Initializes a new instance of the <see cref="T:System.Byte"/>[] type which wraps <see cref="T:System.Byte" />[] instance with specified manner.
            </summary>
            <param name="value">A bytes array to be wrapped.</param>
            <param name="isBinary"><c>true</c> if <paramref name="value"/> always should be binary; <c>false</c>, otherwise.</param>
            <remarks>
            	When the <paramref name="isBinary" /> is <c>true</c>, then resulting object represents binary even if the <paramref name="value"/> is valid utf-8 sequence,
            	that is, its <see cref="P:MsgPack.MessagePackObject.UnderlyingType" /> should be <see cref="T:System.Byte" />[].
            	On the other hand, when  contrast, the <paramref name="isBinary" /> is <c>false</c>, and if the <paramref name="value"/> is valid utf-8, 
            	then the resulting object can be <see cref="T:System.String" />,
            	and its <see cref="P:MsgPack.MessagePackObject.UnderlyingType" /> should be <see cref="T:System.String" />.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(MsgPack.MessagePackExtendedTypeObject)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObject"/> type which wraps <see cref="T:MsgPack.MessagePackExtendedTypeObject"/> instance.
            </summary>
            <param name="value">A <see cref="T:MsgPack.MessagePackObject"/> value to be wrapped.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsBoolean">
            <summary>
            	Convert this instance to <see cref="T:System.Boolean" /> instance.
            </summary>
            <returns><see cref="T:System.Boolean" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsByte">
            <summary>
            	Convert this instance to <see cref="T:System.Byte" /> instance.
            </summary>
            <returns><see cref="T:System.Byte" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsSByte">
            <summary>
            	Convert this instance to <see cref="T:System.SByte" /> instance.
            </summary>
            <returns><see cref="T:System.SByte" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsInt16">
            <summary>
            	Convert this instance to <see cref="T:System.Int16" /> instance.
            </summary>
            <returns><see cref="T:System.Int16" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsUInt16">
            <summary>
            	Convert this instance to <see cref="T:System.UInt16" /> instance.
            </summary>
            <returns><see cref="T:System.UInt16" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsInt32">
            <summary>
            	Convert this instance to <see cref="T:System.Int32" /> instance.
            </summary>
            <returns><see cref="T:System.Int32" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsUInt32">
            <summary>
            	Convert this instance to <see cref="T:System.UInt32" /> instance.
            </summary>
            <returns><see cref="T:System.UInt32" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsInt64">
            <summary>
            	Convert this instance to <see cref="T:System.Int64" /> instance.
            </summary>
            <returns><see cref="T:System.Int64" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsUInt64">
            <summary>
            	Convert this instance to <see cref="T:System.UInt64" /> instance.
            </summary>
            <returns><see cref="T:System.UInt64" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsSingle">
            <summary>
            	Convert this instance to <see cref="T:System.Single" /> instance.
            </summary>
            <returns><see cref="T:System.Single" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsDouble">
            <summary>
            	Convert this instance to <see cref="T:System.Double" /> instance.
            </summary>
            <returns><see cref="T:System.Double" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsString">
            <summary>
            	Convert this instance to <see cref="T:System.String" /> instance.
            </summary>
            <returns><see cref="T:System.String" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsBinary">
            <summary>
            	Convert this instance to <see cref="T:System.Byte" />[] instance.
            </summary>
            <returns><see cref="T:System.Byte" />[] instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsMessagePackExtendedTypeObject">
            <summary>
            	Convert this instance to <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> instance.
            </summary>
            <returns><see cref="T:MsgPack.MessagePackExtendedTypeObject" /> instance corresponds to this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Boolean)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Boolean" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Boolean" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Byte)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Byte" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Byte" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.SByte)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.SByte" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.SByte" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Int16)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Int16" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Int16" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.UInt16)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.UInt16" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.UInt16" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Int32)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Int32" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Int32" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.UInt32)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.UInt32" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.UInt32" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Int64)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Int64" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Int64" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.UInt64)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.UInt64" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.UInt64" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Single)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Single" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Single" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Double)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Double" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Double" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.String)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.String" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.String" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(System.Byte[])~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:System.Byte" />[]instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:System.Byte" />[] instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(MsgPack.MessagePackExtendedTypeObject)~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:MsgPack.MessagePackExtendedTypeObject" />instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackExtendedTypeObject" /> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Boolean">
            <summary>
            	Convert this instance to <see cref="T:System.Boolean" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Boolean" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Byte">
            <summary>
            	Convert this instance to <see cref="T:System.Byte" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Byte" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.SByte">
            <summary>
            	Convert this instance to <see cref="T:System.SByte" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.SByte" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Int16">
            <summary>
            	Convert this instance to <see cref="T:System.Int16" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Int16" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.UInt16">
            <summary>
            	Convert this instance to <see cref="T:System.UInt16" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.UInt16" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Int32">
            <summary>
            	Convert this instance to <see cref="T:System.Int32" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Int32" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.UInt32">
            <summary>
            	Convert this instance to <see cref="T:System.UInt32" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.UInt32" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Int64">
            <summary>
            	Convert this instance to <see cref="T:System.Int64" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Int64" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.UInt64">
            <summary>
            	Convert this instance to <see cref="T:System.UInt64" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.UInt64" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Single">
            <summary>
            	Convert this instance to <see cref="T:System.Single" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Single" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Double">
            <summary>
            	Convert this instance to <see cref="T:System.Double" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Double" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.String">
            <summary>
            	Convert this instance to <see cref="T:System.String" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.String" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~System.Byte[]">
            <summary>
            	Convert this instance to <see cref="T:System.Byte" />[] instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:System.Byte" />[] instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Explicit(MsgPack.MessagePackObject)~MsgPack.MessagePackExtendedTypeObject">
            <summary>
            	Convert this instance to <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns><see cref="T:MsgPack.MessagePackExtendedTypeObject" /> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="F:MsgPack.MessagePackObject.Nil">
            <summary>
            	Instance represents nil. This is equal to default value.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsNil">
            <summary>
            	Get whether this instance represents nil.
            </summary>
            <value>If this instance represents nil object, then true.</value>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Collections.Generic.IList{MsgPack.MessagePackObject})">
            <summary>
            	Initializes a new instance wraps <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">
            	The collection to be copied.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(System.Collections.Generic.IList{MsgPack.MessagePackObject},System.Boolean)">
            <summary>
            	Initializes a new instance wraps <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">
            	The collection to be copied or used.
            </param>
            <param name="isImmutable">
            	<c>true</c> if the <paramref name="value"/> is immutable collection;
            	othereise, <c>false</c>.
            </param>
            <remarks>
            	When the collection is truely immutable or dedicated, you can specify <c>true</c> to the <paramref name="isImmutable"/>.
            	When <paramref name="isImmutable"/> is <c>true</c>, this constructor does not copy its contents,
            	or copies its contents otherwise.
            	<note>
            		Note that both of IReadOnlyList and <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> is NOT immutable
            		because the modification to the underlying collection will be reflected to the read-only collection.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(MsgPack.MessagePackObjectDictionary)">
            <summary>
            	Initializes a new instance wraps <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <param name="value">
            	The dictitonary to be copied.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(MsgPack.MessagePackObjectDictionary,System.Boolean)">
            <summary>
            	Initializes a new instance wraps <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <param name="value">
            	The dictitonary to be copied or used.
            </param>
            <param name="isImmutable">
            	<c>true</c> if the <paramref name="value"/> is immutable collection;
            	othereise, <c>false</c>.
            </param>
            <remarks>
            	When the collection is truely immutable or dedicated, you can specify <c>true</c> to the <paramref name="isImmutable"/>.
            	When <paramref name="isImmutable"/> is <c>true</c>, this constructor does not copy its contents,
            	or copies its contents otherwise.
            	<note>
            		Note that both of IReadOnlyDictionary and ReadOnlyDictionary is NOT immutable
            		because the modification to the underlying collection will be reflected to the read-only collection.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.#ctor(MsgPack.MessagePackString)">
            <summary>
            	Initializes a new instance wraps <see cref="T:MsgPack.MessagePackString"/>.
            </summary>
            <param name="messagePackString"><see cref="T:MsgPack.MessagePackString"/> which represents byte array or UTF-8 encoded string.</param>
        </member>
        <member name="M:MsgPack.MessagePackObject.Equals(System.Object)">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="obj"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns>
            	If <paramref name="obj"/> is <see cref="T:MsgPack.MessagePackObject"/> and its value is equal to this instance, then true.
            	Otherwise false.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.Equals(MsgPack.MessagePackObject)">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="other"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns>
            	Whether value of <paramref name="other"/> is equal to this instance or not.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.GetHashCode">
            <summary>
            	Get hash code of this instance.
            </summary>
            <returns>Hash code of this instance.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.ToString">
            <summary>
            	Returns a string that represents the current object.
            </summary>
            <returns>
            	A string that represents the current object.
            </returns>
            <remarks>
            	<note>
            		DO NOT use this value programmically. 
            		The purpose of this method is informational, so format of this value subject to change.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.IsTypeOf``1">
            <summary>
            	Determine whether the underlying value of this instance is specified type or not.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <returns>If the underlying value of this instance is <typeparamref name="T"/> then true, otherwise false.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.IsTypeOf(System.Type)">
            <summary>
            	Determine whether the underlying value of this instance is specified type or not.
            </summary>
            <param name="type">Target type.</param>
            <returns>If the underlying value of this instance is <paramref name="type"/> then true, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsRaw">
            <summary>
            	Get the value indicates whether this instance wraps raw binary (or string) or not.
            </summary>
            <value>This instance wraps raw binary (or string) then true.</value>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsList">
            <summary>
            	Get the value indicates whether this instance wraps list (array) or not.
            </summary>
            <value>This instance wraps list (array) then true.</value>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsArray">
            <summary>
            	Get the value indicates whether this instance wraps list (array) or not.
            </summary>
            <value>This instance wraps list (array) then true.</value>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsDictionary">
            <summary>
            	Get the value indicates whether this instance wraps dictionary (map) or not.
            </summary>
            <value>This instance wraps dictionary (map) then true.</value>
        </member>
        <member name="P:MsgPack.MessagePackObject.IsMap">
            <summary>
            	Get the value indicates whether this instance wraps dictionary (map) or not.
            </summary>
            <value>This instance wraps dictionary (map) then true.</value>
        </member>
        <member name="P:MsgPack.MessagePackObject.UnderlyingType">
            <summary>
            	Get underlying type of this instance.
            </summary>
            <returns>Underlying <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.PackToMessage(MsgPack.Packer,MsgPack.PackingOptions)">
            <summary>
            	Packs this instance itself using specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/>.</param>
            <param name="options">Packing options. This value can be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="packer"/> is null.</exception>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsString(System.Text.Encoding)">
            <summary>
            	Gets the underlying value as string encoded with specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <returns>
            	The string.
            	Note that some <see cref="T:System.Text.Encoding"/> returns <c>null</c> if the binary is not valid encoded string.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsStringUtf8">
            <summary>
            	Get underlying value as UTF8 string.
            </summary>
            <returns>Underlying raw binary.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsStringUtf16">
            <summary>
            	Get underlying value as UTF-16 string.
            </summary>
            <returns>Underlying string.</returns>
            <remarks>
            	This method detects BOM. If BOM is not exist, them bytes should be Big-Endian UTF-16.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsCharArray">
            <summary>
            	Get underlying value as UTF-16 charcter array.
            </summary>
            <returns>Underlying string.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsEnumerable">
            <summary>
            	Get underlying value as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>Underlying <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsList">
            <summary>
            	Get underlying value as <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>Underlying <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.AsDictionary">
            <summary>
            	Get underlying value as <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <returns>Underlying <see cref="T:MsgPack.MessagePackObjectDictionary"/>.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.FromObject(System.Object)">
            <summary>
            	Wraps specified object as <see cref="T:MsgPack.MessagePackObject"/> recursively.
            </summary>
            <param name="boxedValue">Object to be wrapped.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> wrapps <paramref name="boxedValue"/>.</returns>
            <exception cref="T:MsgPack.MessageTypeException">
            	<paramref name="boxedValue"/> is not primitive value type, list of <see cref="T:MsgPack.MessagePackObject"/>,
            	dictionary of <see cref="T:MsgPack.MessagePackObject"/>, <see cref="T:System.String"/>, <see cref="T:System.Byte"/>[], or null.
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObject.ToObject">
            <summary>
            	Get boxed underlying value for this object.
            </summary>
            <returns>Boxed underlying value for this object.</returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Equality(MsgPack.MessagePackObject,MsgPack.MessagePackObject)">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="left"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <param name="right"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns>
            	Whether value of <paramref name="left"/> and <paramref name="right"/> are equal each other or not.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Inequality(MsgPack.MessagePackObject,MsgPack.MessagePackObject)">
            <summary>
            	Compare two instances are not equal.
            </summary>
            <param name="left"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <param name="right"><see cref="T:MsgPack.MessagePackObject"/> instance.</param>
            <returns>
            	Whether value of <paramref name="left"/> and <paramref name="right"/> are not equal each other or are equal.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObject.op_Implicit(MsgPack.MessagePackObject[])~MsgPack.MessagePackObject">
            <summary>
            	Convert <see cref="T:MsgPack.MessagePackObject"/>[] instance to <see cref="T:MsgPack.MessagePackObject"/> instance.
            </summary>
            <param name="value"><see cref="T:MsgPack.MessagePackObject"/>[] instance.</param>
            <returns><see cref="T:MsgPack.MessagePackObject"/> instance corresponds to <paramref name="value"/>.</returns>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary">
            <summary>
            	Implements <see cref="T:System.Collections.Generic.IDictionary`2"/> for <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <remarks>
            	This dictionary handles <see cref="T:MsgPack.MessagePackObject"/> type semantics for the key.
            	Additionally, this dictionary implements 'freezing' feature. 
            	For details, see <see cref="P:MsgPack.MessagePackObjectDictionary.IsFrozen"/>, <see cref="M:MsgPack.MessagePackObjectDictionary.Freeze"/>, and <see cref="M:MsgPack.MessagePackObjectDictionary.AsFrozen"/>.
            </remarks>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.IsFrozen">
            <summary>
            	Gets a value indicating whether this instance is frozen.
            </summary>
            <value>
            	<c>true</c> if this instance is frozen; otherwise, <c>false</c>.
            </value>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <returns>
            	The number of elements contained in the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </returns>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Item(MsgPack.MessagePackObject)">
            <summary>
            	Gets or sets the element with the specified key.
            </summary>
            <value>
            	The element with the specified key.
            </value>
            <param name="key">Key for geting or seting value.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <see cref="F:MsgPack.MessagePackObject.Nil"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            	The property is retrieved and <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	The property is set and this instance is frozen.
            </exception>
            <remarks>
            	<para>
            		Note that tiny integers are considered equal regardless of its CLI <see cref="T:System.Type"/>,
            		and UTF-8 encoded bytes are considered equals to <see cref="T:System.String"/>.
            	</para>
            	<para>
            		This method approaches an O(1) operation.
            	</para>
            </remarks>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Keys">
            <summary>
            	Gets an <see cref="T:MsgPack.MessagePackObjectDictionary.KeyCollection"/> containing the keys of the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <returns>
            	An <see cref="T:MsgPack.MessagePackObjectDictionary.KeyCollection"/> containing the keys of the object.
            	This value will not be <c>null</c>.
            </returns>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Values">
            <summary>
            	Gets an <see cref="T:MsgPack.MessagePackObjectDictionary.ValueCollection"/> containing the values of the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <returns>
            	An <see cref="T:MsgPack.MessagePackObjectDictionary.ValueCollection"/> containing the values of the object.
            	This value will not be <c>null</c>.
            </returns>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.#ctor">
            <summary>
            Initializes an empty new instance of the <see cref="T:MsgPack.MessagePackObjectDictionary"/> class with default capacity.
            </summary>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.#ctor(System.Int32)">
            <summary>
            Initializes an empty new instance of the <see cref="T:MsgPack.MessagePackObjectDictionary"/> class with specified initial capacity.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="initialCapacity"/> is negative.
            </exception>
            <remarks>
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.#ctor(System.Collections.Generic.IDictionary{MsgPack.MessagePackObject,MsgPack.MessagePackObject})">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObjectDictionary"/> class.
            </summary>
            <param name="dictionary">The dictionary to be copied from.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="dictionary"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Failed to copy from <paramref name="dictionary"/>.
            </exception>
            <remarks>
            	This constructor takes <em>O(N)</em> time, <em>N</em> is <see cref="P:ICollection{T}.Count"/> of <paramref name="dictionary"/>.
            	Initial capacity will be <see cref="P:ICollection{T}.Count"/> of <paramref name="dictionary"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ContainsKey(MsgPack.MessagePackObject)">
            <summary>
            	Determines whether the <see cref="T:MsgPack.MessagePackObjectDictionary"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <see cref="F:MsgPack.MessagePackObject.Nil"/>.
            </exception>
            <returns>
            	<c>true</c> if the <see cref="T:MsgPack.MessagePackObjectDictionary"/> contains an element with the key; otherwise, <c>false</c>.
            </returns>
            <remarks>
            	This method approaches an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ContainsValue(MsgPack.MessagePackObject)">
            <summary>
            	Determines whether the <see cref="T:MsgPack.MessagePackObjectDictionary"/> contains an element with the specified value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.</param>
            <returns>
            	<c>true</c> if the <see cref="T:MsgPack.MessagePackObjectDictionary"/> contains an element with the value; otherwise, <c>false</c>.
            </returns>
            <remarks>
            	This method approaches an O(<em>N</em>) operation where <em>N</em> is <see cref="P:MsgPack.MessagePackObjectDictionary.Count"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.TryGetValue(MsgPack.MessagePackObject,MsgPack.MessagePackObject@)">
            <summary>
            	Gets the value associated with the specified key.
            </summary>
            <param name="key">
            	The key whose value to get.
            </param>
            <param name="value">
            	When this method returns, the value associated with the specified key, if the key is found; 
            	otherwise, the default value for the type of the <paramref name="value"/> parameter. 
            	This parameter is passed uninitialized.
            </param>
            <returns>
            	<c>true</c> if this dictionary contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <see cref="F:MsgPack.MessagePackObject.Nil"/>.
            </exception>
            <remarks>
            	<para>
            		Note that tiny integers are considered equal regardless of its CLI <see cref="T:System.Type"/>,
            		and UTF-8 encoded bytes are considered equals to <see cref="T:System.String"/>.
            	</para>
            	<para>
            		This method approaches an O(1) operation.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Add(MsgPack.MessagePackObject,MsgPack.MessagePackObject)">
            <summary>
            	Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">
            	The key of the element to add.
            </param>
            <param name="value">
            	The value of the element to add. The value can be <c>null</c> for reference types.
            </param>
            <returns>
            	An element with the same key already does not exist in the dictionary and sucess to add then newly added node;
            	otherwise <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="key"/> already exists in this dictionary.
            	Note that tiny integers are considered equal regardless of its CLI <see cref="T:System.Type"/>,
            	and UTF-8 encoded bytes are considered equals to <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <see cref="F:MsgPack.MessagePackObject.Nil"/>.
            </exception>
            <remarks>
            	If <see cref="P:MsgPack.MessagePackObjectDictionary.Count"/> is less than the capacity, this method approaches an O(1) operation.
            	If the capacity must be increased to accommodate the new element, 
            	this method becomes an O(<em>N</em>) operation, where <em>N</em> is <see cref="P:MsgPack.MessagePackObjectDictionary.Count"/>. 
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Remove(MsgPack.MessagePackObject)">
            <summary>
            Removes the element with the specified key from the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully removed; otherwise, <c>false</c>. 
            	This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <see cref="F:MsgPack.MessagePackObject.Nil"/>.
            </exception>
            <remarks>
            	This method approaches an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Clear">
            <summary>
            	Removes all items from the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <remarks>
            	This method approaches an O(<em>N</em>) operation, where <em>N</em> is <see cref="P:MsgPack.MessagePackObjectDictionary.Count"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
            <returns>
            	Returns an enumerator that iterates through the <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </returns>
            <remarks>
            	This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Freeze">
            <summary>
            	Freezes this instance.
            </summary>
            <returns>
            	This instance itself.
            	This value will not be <c>null</c> and its <see cref="P:MsgPack.MessagePackObjectDictionary.IsFrozen"/> is <c>true</c>.
            </returns>
            <remarks>
            	This method freezes this instance itself.
            	This operation is an O(1) operation.
            </remarks>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.AsFrozen">
            <summary>
            	Gets a copy of this instance as frozen instance.
            </summary>
            <returns>
            	New <see cref="T:MsgPack.MessagePackObjectDictionary"/> instance which contains same items as this instance.
            	This value will not be <c>null</c> and its <see cref="P:MsgPack.MessagePackObjectDictionary.IsFrozen"/> is <c>true</c>.
            </returns>
            <remarks>
            	This method does not freeze this instance itself.
            	This operation is an O(<em>N</em>) operation where <em>O(N)</em> <see cref="P:MsgPack.MessagePackObjectDictionary.Count"/> of items.
            </remarks>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.Enumerator">
            <summary>
            	Enumerates the elements of a <see cref="T:MsgPack.MessagePackObjectDictionary"/> in order.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Enumerator.Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the underlying collection at the current position of the enumerator.
            </value>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Enumerator.Dispose">
            <summary>
            	Releases all resources used by the this instance.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element of the underlying collection.
            </summary>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            	Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator">
            <summary>
            	Enumerates the elements of a <see cref="T:MsgPack.MessagePackObjectDictionary"/> in order.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.Entry">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <returns>
            	The element in the dictionary at the current position of the enumerator, as a <see cref="T:System.Collections.DictionaryEntry"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.Key">
            <summary>
            	Gets the key of the element at the current position of the enumerator.
            </summary>
            <returns>
            	The key of the element in the dictionary at the current position of the enumerator.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.Value">
            <summary>
            	Gets the value of the element at the current position of the enumerator.
            </summary>
            <returns>
            	The value of the element in the dictionary at the current position of the enumerator.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element of the underlying collection.
            </summary>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.DictionaryEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            	Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.KeyCollection">
            <summary>
            	Represents the set of <see cref="T:MsgPack.MessagePackObjectDictionary"/> keys.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.KeyCollection.Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            	The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.CopyTo(MsgPack.MessagePackObject[])">
            <summary>
            	Copies the entire collection to a compatible one-dimensional array, starting at the beginning of the target array. 
            </summary>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.CopyTo(MsgPack.MessagePackObject[],System.Int32)">
            <summary>
            	Copies the entire collection to a compatible one-dimensional array, 
            	starting at the specified index of the target array. 
            </summary>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            	The zero-based index in <paramref name="array"/> at which copying begins. 
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.CopyTo(System.Int32,MsgPack.MessagePackObject[],System.Int32,System.Int32)">
            <summary>
            	Copies a range of elements from this collection to a compatible one-dimensional array, 
            	starting at the specified index of the target array. 
            </summary>
            <param name="index">
            	The zero-based index in the source dictionary at which copying begins. 
            </param>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            	The zero-based index in <paramref name="array"/> at which copying begins. 
            </param>
            <param name="count">
            	The number of elements to copy.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.System#Collections#Generic#ICollection{MsgPack#MessagePackObject}#Contains(MsgPack.MessagePackObject)">
            <summary>
            	Determines whether this collection contains a specific value.
            </summary>
            <param name="item">
            	The object to locate in this collection.</param>
            <returns>
            	<c>true</c> if <paramref name="item"/> is found in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through this collction.
            </summary>
            <returns>
            	Returns an enumerator that iterates through this collction.
            </returns>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator">
            <summary>
            	Enumerates the elements of a <see cref="T:MsgPack.MessagePackObjectDictionary.KeyCollection"/>.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator.Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the underlying collection at the current position of the enumerator.
            </value>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator.Dispose">
            <summary>
            	Releases all resources used by the this instance.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element of the underlying collection.
            </summary>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            	Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.ValueCollection">
            <summary>
            	Represents the collection of values in a <see cref="T:MsgPack.MessagePackObjectDictionary"/>.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.ValueCollection.Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            	The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.CopyTo(MsgPack.MessagePackObject[])">
            <summary>
            	Copies the entire collection to a compatible one-dimensional array, starting at the beginning of the target array. 
            </summary>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.CopyTo(MsgPack.MessagePackObject[],System.Int32)">
            <summary>
            	Copies the entire collection to a compatible one-dimensional array, 
            	starting at the specified index of the target array. 
            </summary>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            	The zero-based index in <paramref name="array"/> at which copying begins. 
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.CopyTo(System.Int32,MsgPack.MessagePackObject[],System.Int32,System.Int32)">
            <summary>
            	Copies a range of elements from this collection to a compatible one-dimensional array, 
            	starting at the specified index of the target array. 
            </summary>
            <param name="index">
            	The zero-based index in the source dictionary at which copying begins. 
            </param>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this dictionary.
            	The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            	The zero-based index in <paramref name="array"/> at which copying begins. 
            </param>
            <param name="count">
            	The number of elements to copy.
            </param>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.System#Collections#Generic#ICollection{MsgPack#MessagePackObject}#Contains(MsgPack.MessagePackObject)">
            <summary>
            	Determines whether this collection contains a specific value.
            </summary>
            <param name="item">
            	The object to locate in this collection.</param>
            <returns>
            	<c>true</c> if <paramref name="item"/> is found in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through this collction.
            </summary>
            <returns>
            	Returns an enumerator that iterates through this collction.
            </returns>
        </member>
        <member name="T:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator">
            <summary>
            	Enumerates the elements of a <see cref="T:MsgPack.MessagePackObjectDictionary.ValueCollection"/>.
            </summary>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator.Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the underlying collection at the current position of the enumerator.
            </value>
        </member>
        <member name="P:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            	Gets the element at the current position of the enumerator.
            </summary>
            <value>
            	The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	The enumerator is positioned before the first element of the collection or after the last element. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator.Dispose">
            <summary>
            	Releases all resources used by the this instance.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element of the underlying collection.
            </summary>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:MsgPack.MessagePackObjectDictionary.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            	Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="T:MsgPack.MessagePackObjectEqualityComparer">
            <summary>
            	Implements <see cref="T:System.Collections.Generic.EqualityComparer`1"/> of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObjectEqualityComparer.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessagePackObjectEqualityComparer"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.MessagePackObjectEqualityComparer.Equals(MsgPack.MessagePackObject,MsgPack.MessagePackObject)">
            <summary>
            	Determines whether two objects of type <see cref="T:MsgPack.MessagePackObject"/> are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            	<c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.MessagePackObjectEqualityComparer.GetHashCode(MsgPack.MessagePackObject)">
            <summary>
            	Returns a hash code for the specified <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="obj">The <see cref="T:MsgPack.MessagePackObject"/>.</param>
            <returns>
            	A hash code for <paramref name="obj"/>, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:MsgPack.MessagePackString">
            <summary>
            	Encapselates <see cref="T:System.String"/> and its serialized UTF-8 bytes.
            </summary>
        </member>
        <member name="T:MsgPack.MessageTypeException">
            <summary>
            	Represents unpacking error when message type is unknown or unavailable.
            </summary>
        </member>
        <member name="M:MsgPack.MessageTypeException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageTypeException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:MsgPack.MessageTypeException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageTypeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MsgPack.MessageTypeException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageTypeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            	The exception that is the cause of the current exception, or a <c>null</c> if no inner exception is specified.
            </param>
        </member>
        <member name="M:MsgPack.MessageTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.MessageTypeException"/> class with serialized data.
            </summary>
            <param name="info">
            	The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            	The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            	The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The class name is <c>null</c> or <see cref="P:HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MsgPack.Packer">
            <summary>
            	Implements serialization feature of MsgPack.
            </summary>
        </member>
        <member name="P:MsgPack.Packer.DefaultCompatibilityOptions">
            <summary>
            	Gets or sets the default <see cref="T:MsgPack.PackerCompatibilityOptions"/> for all instances.
            </summary>
            <value>
            	The default <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            	The default value is <see cref="F:MsgPack.PackerCompatibilityOptions.Classic"/>.
            </value>
            <remarks>
            	<para>
            		Note that modification of this value will affect all new instances from the point.
            		Existent instances are not afectted by the modification.
            	</para>
            	<para>
            		This property is intended to be set in application initialization code.
            	</para>
            	<para>
            		Note that the default value is <see cref="F:MsgPack.PackerCompatibilityOptions.Classic"/>, not <see cref="F:MsgPack.PackerCompatibilityOptions.None"/>.
            	</para>
            </remarks>
        </member>
        <member name="P:MsgPack.Packer.CanSeek">
            <summary>
            	Get whether this class supports seek operation and quering <see cref="P:MsgPack.Packer.Position"/> property.
            </summary>
            <value>If this class supports seek operation and quering <see cref="P:MsgPack.Packer.Position"/> property then true.</value>
        </member>
        <member name="P:MsgPack.Packer.Position">
            <summary>
            	Get current position of underlying stream.
            </summary>
            <value>Opaque position value of underlying stream.</value>
            <exception cref="T:System.NotSupportedException">
            	A class of this instance does not support seek.
            </exception>
        </member>
        <member name="P:MsgPack.Packer.CompatibilityOptions">
            <summary>
            	Gets a compatibility options for this instance.
            </summary>
            <value>
            	The compatibility options.
            </value>
        </member>
        <member name="M:MsgPack.Packer.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Packer"/> class with <see cref="P:MsgPack.Packer.DefaultCompatibilityOptions"/>.
            </summary>
        </member>
        <member name="M:MsgPack.Packer.#ctor(MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Packer"/> class with specified <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="compatibilityOptions">A <see cref="T:MsgPack.PackerCompatibilityOptions"/> which specifies compatibility options.</param>
        </member>
        <member name="M:MsgPack.Packer.Create(System.IO.Stream)">
            <summary>
            	Create standard Safe <see cref="T:MsgPack.Packer"/> instancde wrapping specified <see cref="T:System.IO.Stream"/> with <see cref="P:MsgPack.Packer.DefaultCompatibilityOptions"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object. This stream will be closed when <see cref="M:MsgPack.Packer.Dispose(System.Boolean)"/> is called.</param>
            <returns>Safe <see cref="T:MsgPack.Packer"/>. This will not be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <remarks>
            	 You can specify any derived <see cref="T:System.IO.Stream"/> class like FileStream, <see cref="T:System.IO.MemoryStream"/>,
            	 NetworkStream, UnmanagedMemoryStream, or so.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.Create(System.IO.Stream,MsgPack.PackerCompatibilityOptions)">
            <summary>
            	Create standard Safe <see cref="T:MsgPack.Packer"/> instancde wrapping specified <see cref="T:System.IO.Stream"/> with specified <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object. This stream will be closed when <see cref="M:MsgPack.Packer.Dispose(System.Boolean)"/> is called.</param>
            <param name="compatibilityOptions">A <see cref="T:MsgPack.PackerCompatibilityOptions"/> which specifies compatibility options.</param>
            <returns>Safe <see cref="T:MsgPack.Packer"/>. This will not be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <remarks>
            	 You can specify any derived <see cref="T:System.IO.Stream"/> class like FileStream, <see cref="T:System.IO.MemoryStream"/>,
            	 NetworkStream, UnmanagedMemoryStream, or so.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.Create(System.IO.Stream,System.Boolean)">
            <summary>
            	Create standard Safe <see cref="T:MsgPack.Packer"/> instancde wrapping specified <see cref="T:System.IO.Stream"/> with <see cref="P:MsgPack.Packer.DefaultCompatibilityOptions"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object.</param>
            <param name="ownsStream">
            	<c>true</c> to close <paramref name="stream"/> when this instance is disposed;
            	<c>false</c>, otherwise.
            </param>
            <returns>Safe <see cref="T:MsgPack.Packer"/>. This will not be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <remarks>
            	 You can specify any derived <see cref="T:System.IO.Stream"/> class like FileStream, <see cref="T:System.IO.MemoryStream"/>,
            	 NetworkStream, UnmanagedMemoryStream, or so.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.Create(System.IO.Stream,MsgPack.PackerCompatibilityOptions,System.Boolean)">
            <summary>
            	Create standard Safe <see cref="T:MsgPack.Packer"/> instancde wrapping specified <see cref="T:System.IO.Stream"/> with specified <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object.</param>
            <param name="compatibilityOptions">A <see cref="T:MsgPack.PackerCompatibilityOptions"/> which specifies compatibility options.</param>
            <param name="ownsStream">
            	<c>true</c> to close <paramref name="stream"/> when this instance is disposed;
            	<c>false</c>, otherwise.
            </param>
            <returns>Safe <see cref="T:MsgPack.Packer"/>. This will not be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <remarks>
            	 You can specify any derived <see cref="T:System.IO.Stream"/> class like FileStream, <see cref="T:System.IO.MemoryStream"/>,
            	 NetworkStream, UnmanagedMemoryStream, or so.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.Create(System.IO.Stream,MsgPack.PackerCompatibilityOptions,MsgPack.PackerUnpackerStreamOptions)">
            <summary>
            	Create standard Safe <see cref="T:MsgPack.Packer"/> instancde wrapping specified <see cref="T:System.IO.Stream"/> with specified <see cref="T:MsgPack.PackerCompatibilityOptions"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object.</param>
            <param name="compatibilityOptions">A <see cref="T:MsgPack.PackerCompatibilityOptions"/> which specifies compatibility options.</param>
            <param name="streamOptions"><see cref="T:MsgPack.PackerUnpackerStreamOptions"/> which specifies stream handling options.</param>
            <returns>Safe <see cref="T:MsgPack.Packer"/>. This will not be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <remarks>
            	 You can specify any derived <see cref="T:System.IO.Stream"/> class like FileStream, <see cref="T:System.IO.MemoryStream"/>,
            	 NetworkStream, UnmanagedMemoryStream, or so.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.Dispose">
            <summary>
            	Clean up internal resources.
            </summary>
        </member>
        <member name="M:MsgPack.Packer.Dispose(System.Boolean)">
            <summary>
            	When overridden by derived class, release all unmanaged resources, optionally release managed resources.
            </summary>
            <param name="disposing">If true, release managed resources too.</param>
        </member>
        <member name="M:MsgPack.Packer.Flush">
            <summary>
            	Flushes internal buffer (including underlying stream).
            </summary>
        </member>
        <member name="M:MsgPack.Packer.SeekTo(System.Int64)">
            <summary>
            	When overridden by derived class, change current position to specified offset.
            </summary>
            <param name="offset">Offset. You shoud not specify the value which causes underflow or overflow.</param>
            <exception cref="T:System.NotSupportedException">
            	A class of this instance does not support seek.
            </exception>
        </member>
        <member name="M:MsgPack.Packer.WriteByte(System.Byte)">
            <summary>
            	When overridden by derived class, writes specified byte to stream using implementation specific manner.
            </summary>
            <param name="value">A byte to be written.</param>
        </member>
        <member name="M:MsgPack.Packer.WriteBytes(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            	Writes specified bytes to stream using implementation specific most efficient manner.
            </summary>
            <param name="value">Collection of bytes to be written.</param>
        </member>
        <member name="M:MsgPack.Packer.WriteBytes(System.Byte[],System.Boolean)">
            <summary>
            	Writes specified bytes to stream using implementation specific most efficient manner.
            </summary>
            <param name="value">Bytes to be written.</param>
            <param name="isImmutable">If the <paramref name="value"/> can be treat as immutable (that is, can be used safely without copying) then <c>true</c>.</param>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.SByte)">
            <summary>
            	Packs <see cref="T:System.SByte"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.SByte"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackInt8(System.Int64)">
            <summary>
            	Try packs <see cref="T:System.SByte"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.SByte"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Byte)">
            <summary>
            	Packs <see cref="T:System.Byte"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackUInt8(System.UInt64)">
            <summary>
            	Try packs <see cref="T:System.Byte"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.Byte"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Boolean)">
            <summary>
            	Packs <see cref="T:System.Boolean"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Boolean"/> value.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.TryPackTinySignedInteger(System.Int64)">
            <summary>
            	Try packs <see cref="T:System.SByte"/> value to current stream as tiny fix num.
            </summary>
            <param name="value">Maybe tiny <see cref="T:System.SByte"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.TryPackTinyUnsignedInteger(System.UInt64)">
            <summary>
            	Try packs <see cref="T:System.Byte"/> value to current stream as tiny fix num.
            </summary>
            <param name="value">Maybe tiny <see cref="T:System.Byte"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.PackNull">
            <summary>
            	Packs a null value to current stream.
            </summary>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.SByte})">
            <summary>
            	Pack nullable <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Byte})">
            <summary>
            	Pack nullable <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Int16})">
            <summary>
            	Pack nullable <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.UInt16})">
            <summary>
            	Pack nullable <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Int32})">
            <summary>
            	Pack nullable <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.UInt32})">
            <summary>
            	Pack nullable <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Int64})">
            <summary>
            	Pack nullable <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.UInt64})">
            <summary>
            	Pack nullable <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Single})">
            <summary>
            	Pack nullable <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Double})">
            <summary>
            	Pack nullable <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Nullable{System.Boolean})">
            <summary>
            	Pack nullable <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">Value to serialize.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Int16)">
            <summary>
            	Packs <see cref="T:System.Int16"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Int16"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackInt16(System.Int64)">
            <summary>
            	Try packs <see cref="T:System.Int16"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.Int16"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.UInt16)">
            <summary>
            	Packs <see cref="T:System.UInt16"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackUInt16(System.UInt64)">
            <summary>
            	Try packs <see cref="T:System.UInt16"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.UInt16"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Int32)">
            <summary>
            	Packs <see cref="T:System.Int32"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackInt32(System.Int64)">
            <summary>
            	Try packs <see cref="T:System.Int32"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.Int32"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.UInt32)">
            <summary>
            	Packs <see cref="T:System.UInt32"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackUInt32(System.UInt64)">
            <summary>
            	Try packs <see cref="T:System.UInt32"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.UInt32"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Int64)">
            <summary>
            	Packs <see cref="T:System.Int64"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackInt64(System.Int64)">
            <summary>
            	Try packs <see cref="T:System.Int64"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.Int64"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.UInt64)">
            <summary>
            	Packs <see cref="T:System.UInt64"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.TryPackUInt64(System.UInt64)">
            <summary>
            	Try packs <see cref="T:System.UInt64"/> value to current stream strictly.
            </summary>
            <param name="value">Maybe <see cref="T:System.UInt64"/> value.</param>
            <returns>If <paramref name="value"/> has be packed successfully then true, otherwise false (normally, larger type required).</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Single)">
            <summary>
            	Packs <see cref="T:System.Single"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Single"/> value.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.Pack(System.Double)">
            <summary>
            	Packs <see cref="T:System.Double"/> value to current stream.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MsgPack.Packer.PackArrayHeader(System.Int32)">
            <summary>
            	Bookkeep array length or list items count to be packed on current stream.
            </summary>
            <param name="count">Array length or list items count.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackArrayHeaderCore(System.Int32)">
            <summary>
            	Bookkeep array length or list items count to be packed on current stream.
            </summary>
            <param name="count">Array length or list items count.</param>
        </member>
        <member name="M:MsgPack.Packer.PackMapHeader(System.Int32)">
            <summary>
            	Bookkeep dictionary (map) items count to be packed on current stream.
            </summary>
            <param name="count">Dictionary (map) items count.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackMapHeaderCore(System.Int32)">
            <summary>
            	Bookkeep dictionary (map) items count to be packed on current stream.
            </summary>
            <param name="count">Dictionary (map) items count.</param>
        </member>
        <member name="M:MsgPack.Packer.PackRawHeader(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes might represent well formed encoded string.
            </summary>
            <param name="length">A length of byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method effectively acts as alias of <see cref="M:MsgPack.Packer.PackStringHeader(System.Int32)"/> for compatibility.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackStringHeader(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes should represent well formed encoded string.
            </summary>
            <param name="length">A length of encoded byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackBinaryHeader(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes should not represent well formed encoded string.
            </summary>
            <param name="length">A length of byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackRawHeaderCore(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes might represent well formed encoded string.
            </summary>
            <param name="length">A length of byte array.</param>
            <remarks>
            	This method acts as alias of <see cref="M:MsgPack.Packer.PackStringHeaderCore(System.Int32)"/> for compatibility.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackStringHeaderCore(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes should represent well formed encoded string.
            </summary>
            <param name="length">A length of encoded byte array.</param>
        </member>
        <member name="M:MsgPack.Packer.PackBinaryHeaderCore(System.Int32)">
            <summary>
            	Bookkeep byte length to be packed on current stream as the bytes should not represent well formed encoded string.
            </summary>
            <param name="length">A length of byte array.</param>
        </member>
        <member name="M:MsgPack.Packer.PackRaw(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            	Packs specified byte sequence(it may or may not be string to current stream.
            </summary>
            <param name="value">Source bytes its size is not known.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use str types (previously known as raw types) for compability.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackRaw(System.Collections.Generic.IList{System.Byte})">
            <summary>
            	Packs specified byte collection(it may or may not be string to current stream.
            </summary>
            <param name="value">Source bytes its size is known.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use str types (previously known as raw types) for compability.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackRaw(System.Byte[])">
            <summary>
            	Packs specified byte array(it may or may not be string to current stream.
            </summary>
            <param name="value">A byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use str types (previously known as raw types) for compability.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackBinary(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            	Packs specified byte sequence(it should not be string to current stream.
            </summary>
            <param name="value">Source bytes its size is not known.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use bin types unless <see cref="P:MsgPack.Packer.CompatibilityOptions"/> contains <see cref="F:MsgPack.PackerCompatibilityOptions.PackBinaryAsRaw"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackBinary(System.Collections.Generic.IList{System.Byte})">
            <summary>
            	Packs specified byte collection(it should not be string to current stream.
            </summary>
            <param name="value">Source bytes its size is known.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use bin types unless <see cref="P:MsgPack.Packer.CompatibilityOptions"/> contains <see cref="F:MsgPack.PackerCompatibilityOptions.PackBinaryAsRaw"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackBinary(System.Byte[])">
            <summary>
            	Packs specified byte array(it should not be string to current stream.
            </summary>
            <param name="value">A byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	This method use bin types unless <see cref="P:MsgPack.Packer.CompatibilityOptions"/> contains <see cref="F:MsgPack.PackerCompatibilityOptions.PackBinaryAsRaw"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            	Packs specified charactor sequence to current stream with UTF-8 <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source chars its size is not known.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackString(System.Collections.Generic.IEnumerable{System.Char},System.Text.Encoding)">
            <summary>
            	Packs specified charactor sequence to current stream with specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source chars its size is not known.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to be used.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackStringCore(System.Collections.Generic.IEnumerable{System.Char},System.Text.Encoding)">
            <summary>
            	Packs specified charactor sequence to current stream with specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source chars its size is not known.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackString(System.String)">
            <summary>
            	Packs specified string to current stream with UTF-8 <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source string.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackString(System.String,System.Text.Encoding)">
            <summary>
            	Packs specified string to current stream with specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source string.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to be used.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackStringCore(System.String,System.Text.Encoding)">
            <summary>
            	Packs specified string to current stream with specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">Source string.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> to be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackRawBody(System.Byte[])">
            <summary>
            	Packs specified byte array to current stream without any header.
            </summary>
            <param name="value">Source byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	If you forget to write header first, then resulting stream will be corrupsed.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackRawBody(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            	Packs specified byte sequence to current stream without any header.
            </summary>
            <param name="value">Source byte array.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <remarks>
            	If you forget to write header first, then resulting stream will be corrupsed.
            </remarks>
        </member>
        <member name="M:MsgPack.Packer.PackArrayHeader``1(System.Collections.Generic.IList{``0})">
            <summary>
            	Bookkeep collection count to be packed on current stream.
            </summary>
            <param name="array">Collection count to be written.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackMapHeader``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            	Bookkeep dictionary count to be packed on current stream.
            </summary>
            <param name="map">Dictionary count to be written.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackExtendedTypeValue(System.Byte,System.Byte[])">
            <summary>
            Packs an extended type value.
            </summary>
            <param name="typeCode">A type code of the extended type value.</param>
            <param name="body">A binary value portion of the extended type value.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="body"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:MsgPack.Packer.CompatibilityOptions"/> property contains <see cref="F:MsgPack.PackerCompatibilityOptions.ProhibitExtendedTypeObjects"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:MsgPack.Packer.PackExtendedTypeValue(MsgPack.MessagePackExtendedTypeObject)">
            <summary>
            	Packs an extended type value.
            </summary>
            <param name="mpeto">A <see cref="T:MsgPack.MessagePackExtendedTypeObject"/> to be packed.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:MsgPack.MessagePackExtendedTypeObject.IsValid"/> of <paramref name="mpeto"/> is <c>false</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:MsgPack.Packer.CompatibilityOptions"/> property contains <see cref="F:MsgPack.PackerCompatibilityOptions.ProhibitExtendedTypeObjects"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="T:MsgPack.PackerCompatibilityOptions">
            <summary>
            	Defines compatibility options for <see cref="T:MsgPack.Packer"/>.
            </summary>
        </member>
        <member name="F:MsgPack.PackerCompatibilityOptions.None">
            <summary>
            	No compatibility options. <see cref="T:MsgPack.Packer"/>s use newest behavior.
            </summary>
        </member>
        <member name="F:MsgPack.PackerCompatibilityOptions.PackBinaryAsRaw">
            <summary>
            	Packs byte array as raw(str) value, and also prohibits usage of str8 type for legacy unpacker implementations.
            </summary>
        </member>
        <member name="F:MsgPack.PackerCompatibilityOptions.ProhibitExtendedTypeObjects">
            <summary>
            	Prohibits usage of any ext types for legacy unpacker implementations.
            </summary>
        </member>
        <member name="F:MsgPack.PackerCompatibilityOptions.Classic">
            <summary>
            	<see cref="T:MsgPack.Packer"/>s should be use classic behavior. That is, do not use str8 and any ext types, and byte arrays must be packed as raw.
            </summary>
        </member>
        <member name="T:MsgPack.PackerUnpackerExtensions">
            <summary>
            	Defines extension method to pack or unpack various objects.
            </summary>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,``0)">
            <summary>
            	Packs specified value with the default context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,``0,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified value with the specified context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackArray``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Packs specified collection with the default context.
            </summary>
            <typeparam name="T">The type of items of the collection.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="collection">The collection to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackArray``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0},MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified collection with the specified context.
            </summary>
            <typeparam name="T">The type of items of the collection.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="collection">The collection to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackCollection``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Packs specified collection with the default context.
            </summary>
            <typeparam name="T">The type of items of the collection.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="collection">The collection to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackCollection``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0},MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified collection with the specified context.
            </summary>
            <typeparam name="T">The type of items of the collection.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="collection">The collection to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackMap``2(MsgPack.Packer,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            	Packs specified dictionary with the default context.
            </summary>
            <typeparam name="TKey">The type of keys of the dictionary.</typeparam>
            <typeparam name="TValue">The type of values of the dictionary.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="dictionary">The dictionary to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="dictionary"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackMap``2(MsgPack.Packer,System.Collections.Generic.IDictionary{``0,``1},MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified dictionary with the specified context.
            </summary>
            <typeparam name="TKey">The type of keys of the dictionary.</typeparam>
            <typeparam name="TValue">The type of values of the dictionary.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="dictionary">The dictionary to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="dictionary"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackDictionary``2(MsgPack.Packer,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            	Packs specified dictionary with the default context.
            </summary>
            <typeparam name="TKey">The type of keys of the dictionary.</typeparam>
            <typeparam name="TValue">The type of values of the dictionary.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="dictionary">The dictionary to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="dictionary"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackDictionary``2(MsgPack.Packer,System.Collections.Generic.IDictionary{``0,``1},MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified dictionary with the specified context.
            </summary>
            <typeparam name="TKey">The type of keys of the dictionary.</typeparam>
            <typeparam name="TValue">The type of values of the dictionary.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="dictionary">The dictionary to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="dictionary"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Packs specified collection with the default context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="items">The collection to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize the item of <paramref name="items"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,System.Collections.Generic.IEnumerable{``0},MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified value with the specified context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="items">The collection to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize the item of <paramref name="items"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackObject(MsgPack.Packer,System.Object)">
            <summary>
            	Packs specified value with the default context.
            </summary>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackObject(MsgPack.Packer,System.Object,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified value with the specified context.
            </summary>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns><paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Unpack``1(MsgPack.Unpacker)">
            <summary>
            	Unpacks specified type value with the default context.
            </summary>
            <typeparam name="T">The type of the deserializing object.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Unpacker"/>.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot deserialize object.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Unpack``1(MsgPack.Unpacker,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Unpacks specified type value with the specified context.
            </summary>
            <typeparam name="T">The type of the deserializing object.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Unpacker"/>.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot deserialize object.
            </exception>
        </member>
        <member name="T:MsgPack.PackerUnpackerStreamOptions">
            <summary>
            	Represents options for stream on <see cref="T:MsgPack.Packer"/>/<see cref="T:MsgPack.Unpacker"/> creation.
            </summary>
        </member>
        <member name="P:MsgPack.PackerUnpackerStreamOptions.WithBuffering">
            <summary>
            	Gets or sets a value indicating whether stream should be wrapped with buffering stream.
            </summary>
            <value>
              <c>true</c> if stream should be wrapped with buffering stream; otherwise, <c>false</c>.
            </value>
            <remarks>
            	<para>
            		This option is important to improve asynchronous operation performance because deserialization tend to be chatty,
            		so many tiny asynchrnous operation are issued and then numerous context switching may occurred.
            		Wrapping with buffering stream mitigate context switching because it should avoid asynchronous operation
            		as long as it has buffered value.
            	</para>
            	<para>
            		Current built-in <see cref="T:MsgPack.Unpacker"/> implementation uses <see cref="T:System.IO.BufferedStream"/> for buffering,
            		and avoid buffering for following in-memory or stream with buffering feature:
            		<list type="bullet">
            			<item><see cref="T:System.IO.BufferedStream" /> itself.</item>
            			<item><see cref="T:System.IO.MemoryStream" />.</item>
            			<item><see cref="T:System.IO.UnmanagedMemoryStream" />.</item>
            			<item><see cref="T:System.IO.FileStream" /> which has own internal buffer.</item>
            		</list>
            	</para>
            	<para>
            		Logically, it is preferred that you should wrap with <see cref="T:System.IO.BufferedStream"/> yourself for underlying stream
            		for wrapper stream such as <seealso cref="!:System.IO.Compression.DeflateStream"/>, <see cref="T:System.Security.Cryptography.CryptoStream"/>, etc.
            	</para>
            </remarks>
            <seealso cref="P:MsgPack.PackerUnpackerStreamOptions.BufferSize"/>
        </member>
        <member name="P:MsgPack.PackerUnpackerStreamOptions.BufferSize">
            <summary>
            	Gets or sets the size of the buffer of wrapping stream in bytes used when <see cref="P:MsgPack.PackerUnpackerStreamOptions.WithBuffering"/> is <c>true</c>.
            </summary>
            <value>
            	The size of the buffer of wrapping stream in bytes used when <see cref="P:MsgPack.PackerUnpackerStreamOptions.WithBuffering"/> is <c>true</c>.
            	The default is 64K.
            	If you attempt to set 0 or negative value, then the value will be set to 1.
            </value>
        </member>
        <member name="P:MsgPack.PackerUnpackerStreamOptions.OwnsStream">
            <summary>
            	Gets or sets a value indicating whether <see cref="T:MsgPack.Packer"/>/<see cref="T:MsgPack.Unpacker" /> will dispose underlying stream when their <c>Dispose(Boolean)</c> method are called with <c>true</c> value.
            </summary>
            <value>
            	<c>true</c> if <see cref="T:MsgPack.Packer"/>/<see cref="T:MsgPack.Unpacker" /> will dispose underlying stream when their <c>Dispose(Boolean)</c> method are called with <c>true</c> value; 
            	otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MsgPack.PackerUnpackerStreamOptions.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.PackerUnpackerStreamOptions"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.PackingOptions">
            <summary>
            	Represents options of packing.
            </summary>
        </member>
        <member name="P:MsgPack.PackingOptions.StringEncoding">
            <summary>
            	Get encoding for string.
            </summary>
            <value>
            	<see cref="T:System.Text.Encoding"/> for string. Default is UTF-8 encoding without BOM.
            </value>
        </member>
        <member name="M:MsgPack.PackingOptions.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.PackingOptions"/> class.
            </summary>
        </member>
        <member name="T:MsgPack.StreamPacker">
            <summary>
            	Basic <see cref="T:MsgPack.Packer"/> implementation using managed <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="T:MsgPack.SubtreeUnpacker">
            <summary>
            	Defines subtree unpacking unpacker.
            </summary>
        </member>
        <member name="T:MsgPack.UnassignedMessageTypeException">
            <summary>
            	Represents unpacking error when message type is not valid because 0xC1 will never be assigned.
            </summary>
        </member>
        <member name="M:MsgPack.UnassignedMessageTypeException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnassignedMessageTypeException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:MsgPack.UnassignedMessageTypeException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnassignedMessageTypeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MsgPack.UnassignedMessageTypeException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnassignedMessageTypeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            	The exception that is the cause of the current exception, or a <c>null</c> if no inner exception is specified.
            </param>
        </member>
        <member name="M:MsgPack.UnassignedMessageTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnassignedMessageTypeException"/> class with serialized data.
            </summary>
            <param name="info">
            	The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            	The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            	The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The class name is <c>null</c> or <see cref="P:HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MsgPack.Unpacker">
            <summary>
            	Implements deserializing feature of MsgPack.
            </summary>
            <remarks name="MsgPack.Unpacker">
    <see cref="T:MsgPack.Unpacker" /> implements three mode, that is 'Streaming', 'Skipping' and 'Subtree'.
    <list type="bullet">
      <item>
        <para>
          <strong>Streaming</strong>
        </para>
        <para>
          When the <see cref="M:MsgPack.Unpacker.Read" /> is called, unpacker go into 'Streaming' mode.
          In this mode, unpacker unpacks individual entries as <see cref="T:MsgPack.MessagePackObject" /> via <see cref="P:MsgPack.Unpacker.Data" /> property.
          If the underlying stream is ended unexpectedly, then <see cref="M:MsgPack.Unpacker.Read" /> returns <c>false</c>, and <see cref="P:MsgPack.Unpacker.Data" /> will be <c>null</c>.
          Note that if the underlying stream is feeded, that is the <see cref="P:Stream.Length" /> is expanded and its <see cref="P:Stream.Position" /> is not forwarded,
          subsequent <see cref="M:MsgPack.Unpacker.Read" /> invocation will success, and <see cref="P:MsgPack.Unpacker.Data" /> is set as complete entry which reflects feeded binary.
        </para>
        <para>
          If the reading of the entry is completed, that is the <see cref="P:MsgPack.Unpacker.Data" /> is not <c>null</c>, unpacker can transit other mode.
        </para>
      </item>
      <item>
        <para>
          <strong>Skipping</strong>
        </para>
        <para>
          When the <see cref="M:MsgPack.Unpacker.Skip" /> is called, unpacker go into 'Skipping' mode.
          In this mode, unpacker scans the subtree where the root is current item, then returns skipped byte length.
          If the underlying stream is ended unexpectedly, it returns <c>null</c>.
          Note that if the underlying stream is feeded, that is the <see cref="P:Stream.Length" /> is expanded and its <see cref="P:Stream.Position" /> is not forwarded,
          subsequent <see cref="M:MsgPack.Unpacker.Skip" /> invocation will success, and returns length as complete entry which reflects feeded binary.
          <note>
            If the underlying <see cref="T:System.IO.Stream" /> is cannot be seeked (that is, <see cref="P:Stream.CanSeek" /> is <c>false</c>),
            DO NOT use this method.
            You can buffering the content via <see cref="T:System.IO.MemoryStream" /> instead, for example.
          </note>
        </para>
        <para>
          If the skipping of the subtree is completed, that is the return value is not <c>null</c>, unpacker can transit other mode.
        </para>
      </item>
      <item>
        <para>
          <strong>Subtree</strong>
        </para>
        <para>
          When the <see cref="M:MsgPack.Unpacker.ReadSubtree" /> is called, unpacker go into 'Subtree' mode.
          In this mode, any operation for this unpacker instance is invalid.
          Instead of use this instance itself, you can use subtree unpacker returned from <see cref="M:MsgPack.Unpacker.ReadSubtree" />.
          The subtree unpacker is the instance which scope is limited to the subtree where the root is the current entry when <see cref="M:MsgPack.Unpacker.ReadSubtree" /> is called.
          The subtree unpacker also have its own mode and state.
          <note>
            <see cref="M:MsgPack.Unpacker.Dispose" /> of the subtree unpacker must be called to indicate subtree unpacking is gracefully completed.
            When the extra entries are remained in the subtree, these will be skipped on the disposal process.
          </note>
        </para>
        <para>
          Once the subtree unpacking is completed gracefully, that is, <see cref="M:MsgPack.Unpacker.Dispose" /> on the subtree unpacker called, the parant unpacker can transit other mode.
        </para>
      </item>
    </list>
  </remarks>
            <seealso cref="T:MsgPack.Unpacking" />
        </member>
        <member name="P:MsgPack.Unpacker.Data">
            <summary>
            	Gets a last unpacked data.
            </summary>
            <value>A last unpacked data.</value>
            <remarks>
            	<note class="warning">
            		In default implementation, this property never returning <c>null</c> even if it had not been unpacked any objects.
            	</note>
            	If you use any of direct APIs (methods which return non-<see cref="T:MsgPack.MessagePackObject"/>), 
            	then this property to be invalidated.
            	Note that the actual value of invalidated this property is undefined.
            </remarks>
        </member>
        <member name="P:MsgPack.Unpacker.LastReadData">
            <summary>
            	Gets a last unpacked data.
            </summary>
            <value>A last unpacked data. Initial value is <see cref="F:MsgPack.MessagePackObject.Nil"/>.</value>
            <remarks>
            	If you use any of direct APIs (methods which return non-<see cref="T:MsgPack.MessagePackObject"/>), 
            	then this property to be invalidated.
            	Note that the actual value of invalidated this property is undefined.
            </remarks>
        </member>
        <member name="P:MsgPack.Unpacker.IsArrayHeader">
            <summary>
            	Gets a value indicating whether this instance is positioned to array header.
            </summary>
            <value>
            	<c>true</c> if this instance is positioned to array header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MsgPack.Unpacker.IsMapHeader">
            <summary>
            	Gets a value indicating whether this instance is positioned to map header.
            </summary>
            <value>
            	<c>true</c> if this instance is positioned to map header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MsgPack.Unpacker.IsCollectionHeader">
            <summary>
            	Gets a value indicating whether this instance is positioned to array or map header.
            </summary>
            <value>
            	<c>true</c> if this instance is positioned to array or map header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MsgPack.Unpacker.ItemsCount">
            <summary>
            	Gets the items count for current array or map.
            </summary>
            <value>
            	The items count for current array or map.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	Both of the <see cref="P:MsgPack.Unpacker.IsArrayHeader"/> and <see cref="P:MsgPack.Unpacker.IsMapHeader"/> are <c>false</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.VerifyMode(MsgPack.Unpacker.UnpackerMode)">
            <summary>
            	Verifies the mode.
            </summary>
            <param name="mode">The mode to be.</param>
            <exception cref="T:System.ObjectDisposedException">
            	Already disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	Is in incompatible mode.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.VerifyIsNotDisposed">
            <summary>
            	Verifies this instance is not disposed.
            </summary>
        </member>
        <member name="P:MsgPack.Unpacker.UnderlyingStream">
            <summary>
            	Gets the underlying stream to handle direct API.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	This instance does not supoort direct API.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.GetPreviousPosition(System.Int64@)">
            <summary>
            	Gets the previous position before last operation for debugging.
            </summary>
            <param name="offsetOrPosition">The offset or position.</param>
            <returns><c>true</c> for the <paramref name="offsetOrPosition"/> is real position of the underlying stream;<c>false</c> if the value is offset from the root unpaker instance was created.</returns>
        </member>
        <member name="M:MsgPack.Unpacker.Create(System.IO.Stream)">
            <summary>
            	 Creates the new <see cref="T:MsgPack.Unpacker"/> from specified stream.
            </summary>
            <param name="stream">The stream to be unpacked. This stream will be closed when <see cref="M:MsgPack.Packer.Dispose(System.Boolean)"/> is called.</param>
            <returns><see cref="T:MsgPack.Unpacker"/> instance.</returns>
        </member>
        <member name="M:MsgPack.Unpacker.Create(System.IO.Stream,System.Boolean)">
            <summary>
            	 Creates the new <see cref="T:MsgPack.Unpacker"/> from specified stream.
            </summary>
            <param name="stream">The stream to be unpacked.</param>
            <param name="ownsStream">
            	<c>true</c> to close <paramref name="stream"/> when this instance is disposed;
            	<c>false</c>, otherwise.
            </param>
            <returns><see cref="T:MsgPack.Unpacker"/> instance.</returns>
        </member>
        <member name="M:MsgPack.Unpacker.Create(System.IO.Stream,MsgPack.PackerUnpackerStreamOptions)">
            <summary>
            	 Creates the new <see cref="T:MsgPack.Unpacker"/> from specified stream.
            </summary>
            <param name="stream">The stream to be unpacked.</param>
            <param name="streamOptions"><see cref="T:MsgPack.PackerUnpackerStreamOptions"/> which specifies stream handling options.</param>
            <returns><see cref="T:MsgPack.Unpacker"/> instance.</returns>
        </member>
        <member name="M:MsgPack.Unpacker.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Unpacker"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Unpacker.Dispose">
            <summary>
            	Releases all managed resources.
            </summary>
        </member>
        <member name="M:MsgPack.Unpacker.Dispose(System.Boolean)">
            <summary>
            	Releases unmanaged and optionally managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MsgPack.Unpacker.Drain">
            <summary>
            	Drains remaining items in current context.
            </summary>
            <remarks>
            	This method drains remaining items in context of subtree mode unpacker.
            	This method does not any effect for other types of unpacker.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacker.ReadSubtree">
            <summary>
            	Starts unpacking of current subtree.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Unpacker"/> to unpack current subtree.
            	This will not be <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	This unpacker is not positioned on the header of array nor map.
            	Or this unpacker already returned <see cref="T:MsgPack.Unpacker"/> for subtree and it has not been closed yet.
            </exception>
            <remarks>
            	While subtree unpacker is used, this instance will be 'locked' (called 'subtree' mode) and be unavailable.
            	When you finish to unpack subtree, you must invoke <see cref="M:MsgPack.Unpacker.Dispose"/>, 
            	or you faces <see cref="T:System.InvalidOperationException"/> when you use the parent instance.
            	Subtree unpacker can only unpack subtree, so you can handle collection deserialization easily.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacker.ReadSubtreeCore">
            <summary>
            	Starts unpacking of current subtree.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Unpacker"/> to unpack current subtree.
            	This will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.EndReadSubtree">
            <summary>
            	Ends the read subtree.
            </summary>
            <remarks>
            	This method only be called from subtree unpacker.
            	Custom subtree unpacker implementation must call this method from its <see cref="M:MsgPack.Unpacker.Dispose(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacker.Read">
            <summary>
            	Reads next Message Pack entry.
            </summary>
            <returns>
            	<c>true</c>, if position is sucessfully move to next entry;
            	<c>false</c>, if position reaches the tail of the Message Pack stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	This instance is in 'subtree' mode.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	The underying stream unexpectedly ended.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadCore">
            <summary>
            	Reads next Message Pack entry.
            </summary>
            <returns>
            	<c>true</c>, if position is sucessfully move to next entry;
            	<c>false</c>, if position reaches the tail of the Message Pack stream.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.GetEnumerator">
            <summary>
            	Gets <see cref="T:System.Collections.Generic.IEnumerator`1"/> to enumerate <see cref="T:MsgPack.MessagePackObject"/> from source stream.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> to enumerate <see cref="T:MsgPack.MessagePackObject"/> from source stream.</returns>
        </member>
        <member name="M:MsgPack.Unpacker.Skip">
            <summary>
            	Skips the subtree where the root is the current entry, and returns skipped byte length.
            </summary>
            <returns>
            	Skipped byte length.
            	If the subtree is not completed, then <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.SkipCore">
            <summary>
            	Skips the subtree where the root is the current entry, and returns skipped byte length.
            </summary>
            <returns>
            	Skipped byte length.
            	If the subtree is not completed, then <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.ReadItem">
            <summary>
            	Gets a current item or collection as single <see cref="T:MsgPack.MessagePackObject"/> from the stream.
            </summary>
            <returns>
            	A read item or collection from the stream.
            	Or <c>null</c> when stream is ended.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.ReadItemData">
            <summary>
            	Gets a current item or collection as single <see cref="T:MsgPack.MessagePackObject"/> from the stream.
            </summary>
            <returns>
            	A read item or collection from the stream.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">The stream unexpectedly ends.</exception>
        </member>
        <member name="M:MsgPack.Unpacker.UnpackSubtree">
            <summary>
            	Unpacks current subtree and returns subtree root as array or map.
            </summary>
            <returns>
            	An unpacked array or map when current position is array or map header.
            	<c>null</c> when current position is not array nor map header.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.UnpackSubtreeData">
            <summary>
            	Unpacks current subtree and returns subtree root as array or map.
            </summary>
            <returns>
            	An unpacked array or map when current position is array or map header.
            	Or <see cref="P:MsgPack.Unpacker.LastReadData"/> when current position is not array nor map header.
            </returns>
        </member>
        <member name="M:MsgPack.Unpacker.ReadBoolean(System.Boolean@)">
            <summary>
            	Reads next <see cref="T:System.Boolean" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Boolean" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Boolean" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableBoolean(System.Nullable{System.Boolean}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Boolean" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Boolean" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Boolean" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Boolean" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadByte(System.Byte@)">
            <summary>
            	Reads next <see cref="T:System.Byte" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Byte" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Byte" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableByte(System.Nullable{System.Byte}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Byte" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Byte" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Byte" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Byte" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadSByte(System.SByte@)">
            <summary>
            	Reads next <see cref="T:System.SByte" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.SByte" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.SByte" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableSByte(System.Nullable{System.SByte}@)">
            <summary>
            	Reads next nullable <see cref="T:System.SByte" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.SByte" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.SByte" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.SByte" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadInt16(System.Int16@)">
            <summary>
            	Reads next <see cref="T:System.Int16" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Int16" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Int16" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableInt16(System.Nullable{System.Int16}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Int16" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Int16" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Int16" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Int16" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadUInt16(System.UInt16@)">
            <summary>
            	Reads next <see cref="T:System.UInt16" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.UInt16" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.UInt16" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableUInt16(System.Nullable{System.UInt16}@)">
            <summary>
            	Reads next nullable <see cref="T:System.UInt16" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.UInt16" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.UInt16" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.UInt16" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadInt32(System.Int32@)">
            <summary>
            	Reads next <see cref="T:System.Int32" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Int32" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Int32" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableInt32(System.Nullable{System.Int32}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Int32" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Int32" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Int32" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Int32" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadUInt32(System.UInt32@)">
            <summary>
            	Reads next <see cref="T:System.UInt32" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.UInt32" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.UInt32" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableUInt32(System.Nullable{System.UInt32}@)">
            <summary>
            	Reads next nullable <see cref="T:System.UInt32" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.UInt32" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.UInt32" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.UInt32" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadInt64(System.Int64@)">
            <summary>
            	Reads next <see cref="T:System.Int64" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Int64" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Int64" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableInt64(System.Nullable{System.Int64}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Int64" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Int64" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Int64" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Int64" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadUInt64(System.UInt64@)">
            <summary>
            	Reads next <see cref="T:System.UInt64" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.UInt64" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.UInt64" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableUInt64(System.Nullable{System.UInt64}@)">
            <summary>
            	Reads next nullable <see cref="T:System.UInt64" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.UInt64" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.UInt64" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.UInt64" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadSingle(System.Single@)">
            <summary>
            	Reads next <see cref="T:System.Single" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Single" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Single" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableSingle(System.Nullable{System.Single}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Single" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Single" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Single" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Single" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadDouble(System.Double@)">
            <summary>
            	Reads next <see cref="T:System.Double" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:System.Double" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:System.Double" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableDouble(System.Nullable{System.Double}@)">
            <summary>
            	Reads next nullable <see cref="T:System.Double" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:System.Double" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:System.Double" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:System.Double" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadMessagePackExtendedTypeObject(MsgPack.MessagePackExtendedTypeObject@)">
            <summary>
            	Reads next <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadNullableMessagePackExtendedTypeObject(System.Nullable{MsgPack.MessagePackExtendedTypeObject}@)">
            <summary>
            	Reads next nullable <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> value from current stream.
            </summary>
            <param name="result">
            	The nullable <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	The nullable <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> value read from current data source successfully.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not compatible for the nullable <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> type.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadArrayLength(System.Int64@)">
            <summary>
            	Reads next array length value from current stream.
            </summary>
            <param name="result">
            	The array length read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not an array.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadMapLength(System.Int64@)">
            <summary>
            	Reads next map length value from current stream.
            </summary>
            <param name="result">
            	The map length read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not a map.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadBinary(System.Byte[]@)">
            <summary>
            	Reads next byte array value from current stream.
            </summary>
            <param name="result">
            	The byte array read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not a raw.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadString(System.String@)">
            <summary>
            	Reads next utf-8 encoded string value from current stream.
            </summary>
            <param name="result">
            	The decoded utf-8 encoded string read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	A value read from data source is not a raw.
            </exception>
        </member>
        <member name="M:MsgPack.Unpacker.ReadObject(MsgPack.MessagePackObject@)">
            <summary>
            	Reads next value from current stream.
            </summary>
            <param name="result">
            	The <see cref="T:MsgPack.MessagePackObject"/> which represents a value read from current stream to be stored when operation is succeeded.
            </param>
            <returns>
            	<c>true</c> if expected value was read from stream; <c>false</c> if no more data on the stream.
            	Note that this method throws exception for unexpected state. See exceptions section.
            </returns>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Cannot read a value because the underlying stream unexpectedly ends.
            </exception>
        </member>
        <member name="T:MsgPack.UnpackException">
            <summary>
            	Represents generic unpacking error.
            </summary>
        </member>
        <member name="M:MsgPack.UnpackException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnpackException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:MsgPack.UnpackException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnpackException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MsgPack.UnpackException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnpackException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            	The exception that is the cause of the current exception, or a <c>null</c> if no inner exception is specified.
            </param>
        </member>
        <member name="M:MsgPack.UnpackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.UnpackException"/> class with serialized data.
            </summary>
            <param name="info">
            	The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            	The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            	The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The class name is <c>null</c> or <see cref="P:HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MsgPack.Unpacking">
            <summary>
            	Defines direct conversion value from/to Message Pack binary stream without intermediate <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <remarks>
            	This class provides convinient way to unpack objects from wellknown seekable stream.
            	This class does not support stream feeding.
            </remarks>
            <seealso cref="T:MsgPack.Unpacker"/>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackByte(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Byte" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Byte" /> which contains unpacked <see cref="T:System.Byte" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackByte(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackByte(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Byte" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Byte" /> which contains unpacked <see cref="T:System.Byte" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackByte(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Byte" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Byte" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSByte(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.SByte" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.SByte" /> which contains unpacked <see cref="T:System.SByte" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.SByte" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackSByte(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSByte(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.SByte" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.SByte" /> which contains unpacked <see cref="T:System.SByte" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.SByte" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSByte(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.SByte" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.SByte" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.SByte" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt16(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Int16" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int16" /> which contains unpacked <see cref="T:System.Int16" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int16" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackInt16(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt16(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Int16" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int16" /> which contains unpacked <see cref="T:System.Int16" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int16" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt16(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Int16" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Int16" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int16" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt16(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.UInt16" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt16" /> which contains unpacked <see cref="T:System.UInt16" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt16" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackUInt16(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt16(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.UInt16" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt16" /> which contains unpacked <see cref="T:System.UInt16" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt16" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt16(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.UInt16" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.UInt16" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt16" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt32(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Int32" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int32" /> which contains unpacked <see cref="T:System.Int32" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int32" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackInt32(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt32(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Int32" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int32" /> which contains unpacked <see cref="T:System.Int32" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int32" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt32(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Int32" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Int32" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int32" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt32(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.UInt32" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt32" /> which contains unpacked <see cref="T:System.UInt32" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt32" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackUInt32(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt32(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.UInt32" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt32" /> which contains unpacked <see cref="T:System.UInt32" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt32" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt32(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.UInt32" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.UInt32" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt32" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt64(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Int64" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int64" /> which contains unpacked <see cref="T:System.Int64" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackInt64(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt64(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Int64" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Int64" /> which contains unpacked <see cref="T:System.Int64" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackInt64(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Int64" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Int64" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Int64" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt64(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.UInt64" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt64" /> which contains unpacked <see cref="T:System.UInt64" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt64" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackUInt64(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt64(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.UInt64" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.UInt64" /> which contains unpacked <see cref="T:System.UInt64" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt64" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackUInt64(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.UInt64" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.UInt64" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.UInt64" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSingle(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Single" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Single" /> which contains unpacked <see cref="T:System.Single" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Single" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackSingle(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSingle(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Single" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Single" /> which contains unpacked <see cref="T:System.Single" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Single" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackSingle(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Single" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Single" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Single" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDouble(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.Double" /> value from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Double" /> which contains unpacked <see cref="T:System.Double" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Double" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackDouble(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDouble(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.Double" /> value from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Double" /> which contains unpacked <see cref="T:System.Double" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Double" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDouble(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.Double" /> value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.Double" /> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Double" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArray(System.Byte[])">
            <summary>
            	Unpacks the array from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Collections.Generic.IList`1" /> which contains unpacked the array and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackArray(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArray(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the array from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Collections.Generic.IList`1" /> which contains unpacked the array and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArray(System.IO.Stream)">
            <summary>
            	Unpacks the array value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the array value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Collections.Generic.IList`1" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArrayLength(System.Byte[])">
            <summary>
            	Unpacks length of the array from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of nullable <see cref="T:System.Int64" /> which contains unpacked length of the array and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackArrayLength(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArrayLength(System.Byte[],System.Int32)">
            <summary>
            	Unpacks length of the array from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of nullable <see cref="T:System.Int64" /> which contains unpacked length of the array and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackArrayLength(System.IO.Stream)">
            <summary>
            	Unpacks length of the array value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked length of the array value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionary(System.Byte[])">
            <summary>
            	Unpacks the dictionary from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackObjectDictionary" /> which contains unpacked the dictionary and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObjectDictionary" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackDictionary(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionary(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the dictionary from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackObjectDictionary" /> which contains unpacked the dictionary and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObjectDictionary" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionary(System.IO.Stream)">
            <summary>
            	Unpacks the dictionary value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the dictionary value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObjectDictionary" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionaryCount(System.Byte[])">
            <summary>
            	Unpacks count of the dictionary entries from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of nullable <see cref="T:System.Int64" /> which contains unpacked count of the dictionary entries and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackDictionaryCount(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionaryCount(System.Byte[],System.Int32)">
            <summary>
            	Unpacks count of the dictionary entries from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of nullable <see cref="T:System.Int64" /> which contains unpacked count of the dictionary entries and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackDictionaryCount(System.IO.Stream)">
            <summary>
            	Unpacks count of the dictionary entries value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked count of the dictionary entries value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to nullable <see cref="T:System.Int64" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBinary(System.Byte[])">
            <summary>
            	Unpacks the raw binary from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Byte" />[] which contains unpacked the raw binary and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />[].
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackBinary(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBinary(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the raw binary from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Byte" />[] which contains unpacked the raw binary and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />[].
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBinary(System.IO.Stream)">
            <summary>
            	Unpacks the raw binary value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the raw binary value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Byte" />[].
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBoolean(System.Byte[])">
            <summary>
            	Unpacks the boolean from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Boolean" /> which contains unpacked the boolean and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Boolean" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackBoolean(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBoolean(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the boolean from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Boolean" /> which contains unpacked the boolean and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Boolean" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackBoolean(System.IO.Stream)">
            <summary>
            	Unpacks the boolean value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the boolean value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Boolean" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackNull(System.Byte[])">
            <summary>
            	Unpacks the nil from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Object" /> which contains unpacked the nil and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Object" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackNull(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackNull(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the nil from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.Object" /> which contains unpacked the nil and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Object" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackNull(System.IO.Stream)">
            <summary>
            	Unpacks the nil value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the nil value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.Object" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackObject(System.Byte[])">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackObject" /> which contains unpacked the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObject" />.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackObject" /> which contains unpacked the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObject" />.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the <see cref="T:MsgPack.MessagePackObject" /> which represents the value which has MessagePack type semantics. value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackObject" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackExtendedTypeObject(System.Byte[])">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. from the head of specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which contains unpacked the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackExtendedTypeObject(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackExtendedTypeObject(System.Byte[],System.Int32)">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. from the specified byte array.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which contains unpacked the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[],System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackExtendedTypeObject(System.IO.Stream)">
            <summary>
            	Unpacks the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. value from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked the <see cref="T:MsgPack.MessagePackExtendedTypeObject" /> which represents the extended type value. value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:MsgPack.MessagePackExtendedTypeObject" />.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageNotSupportedException">
            	The items count of the underlying collection body is over <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackByteStream(System.IO.Stream)">
            <summary>
            	Unpacks raw value from the specified <see cref="T:System.IO.Stream"/> as <see cref="T:MsgPack.UnpackingStream"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingStream"/> which represents raw value stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not raw binary.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		<see cref="T:MsgPack.UnpackingStream"/> does not own <paramref name="source"/>, so <paramref name="source"/> still should be closed.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackCharStream(System.IO.Stream)">
            <summary>
            	Unpacks raw value from the specified <see cref="T:System.IO.Stream"/> as <see cref="T:MsgPack.UnpackingStreamReader"/> with UTF-8 encoding.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingStreamReader"/> which represents raw value stream as UTF-8 string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not raw binary.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		if <paramref name="source"/> contains invalid sequence as UTF-8 encoding string,
            		the <see cref="T:System.Text.DecoderFallbackException"/> may occurs on read char.
            	</para>
            	<para>
            		<see cref="T:MsgPack.UnpackingStreamReader"/> does not own <paramref name="source"/>, so <paramref name="source"/> still should be closed.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackCharStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Unpacks raw value from the specified <see cref="T:System.IO.Stream"/> as <see cref="T:MsgPack.UnpackingStreamReader"/> with specified encoding.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to decode binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingStreamReader"/> which represents raw value stream as UTF-8 string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or, <paramref name="encoding"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not raw binary.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		if <paramref name="source"/> contains invalid sequence as specified encoding string,
            		the <see cref="T:System.Text.DecoderFallbackException"/> may occurs on read char.
            	</para>
            	<para>
            		<see cref="T:MsgPack.UnpackingStreamReader"/> does not own <paramref name="source"/>, so <paramref name="source"/> still should be closed.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>		
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.Byte[])">
            <summary>
            	Unpacks <see cref="T:System.String" /> value from the head of specified byte array with UTF-8 encoding.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.String" /> which contains unpacked <see cref="T:System.String" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.String" />.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as UTF-8 encoded byte stream.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Text.Encoding)">
            <summary>
            	Unpacks <see cref="T:System.String" /> value from the head of specified byte array with specified encoding.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to decode binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.String" /> which contains unpacked <see cref="T:System.String" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or, <paramref name="encoding"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.String" />.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as UTF-8 encoded byte stream.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32)">
            <summary>
            	Unpacks <see cref="T:System.String" /> value from specified offsetted byte array with UTF-8 encoding.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.String" /> which contains unpacked <see cref="T:System.String" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not greater than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.String" />.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as specified encoding byte stream.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            	Unpacks <see cref="T:System.String" /> value from specified offsetted byte array with specified encoding.
            </summary>
            <param name="source">The byte array which contains Message Pack binary stream.</param>
            <param name="offset">The offset to be unpacking start with.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to decode binary stream.</param>
            <returns>
            	The <see cref="T:MsgPack.UnpackingResult`1"/> of <see cref="T:System.String" /> which contains unpacked <see cref="T:System.String" /> value and processed bytes count.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or, <paramref name="encoding"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="source"/> is empty.
            	Or, the length of <paramref name="source"/> is not greater than <paramref name="offset"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> is negative value.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not compatible to <see cref="T:System.String" />.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as specified encoding byte stream.
            </exception>
            <remarks>
            	<para>
            		Invocation of this method is equivalant to call <see cref="M:MsgPack.Unpacking.UnpackString(System.Byte[],System.Int32)"/> with <c>offset</c> is <c>0</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.Byte[])"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.IO.Stream)">
            <summary>
            	Unpacks <see cref="T:System.String"/> value from the specified <see cref="T:System.IO.Stream"/> with UTF-8 encoding.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.String"/> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not raw binary.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as UTF-8 encoded byte stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Unpacking.UnpackString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Unpacks <see cref="T:System.String"/> value from the specified <see cref="T:System.IO.Stream"/> with specified encoding.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> which contains Message Pack binary stream.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to decode binary stream.</param>
            <returns>
            	The unpacked <see cref="T:System.String"/> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="encoding"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
            </exception>
            <exception cref="T:MsgPack.UnpackException">
            	<paramref name="source"/> is not valid MessagePack stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	The unpacked result in the <paramref name="source"/> is not raw binary.
            	Or, the unpacked result in the <paramref name="source"/> is invalid as specified encoding byte stream.
            	Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
            </exception>
            <remarks>
            	<para>
            		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
            	</para>
            	<para>
            		When the type of packed value is not known, use <see cref="M:MsgPack.Unpacking.UnpackObject(System.IO.Stream)"/> instead.
            	</para>
            </remarks>
        </member>
        <member name="T:MsgPack.UnpackingResult`1">
            <summary>
            	Represents result of direct conversion from the byte array.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
        </member>
        <member name="P:MsgPack.UnpackingResult`1.ReadCount">
            <summary>
            	Get read bytes count from input byte array.
            </summary>
            <value>
            	Read bytes count from input byte array.
            	If this value equals to old offset, then a value of <see cref="P:MsgPack.UnpackingResult`1.Value"/> property is not undifined.
            </value>
        </member>
        <member name="P:MsgPack.UnpackingResult`1.Value">
            <summary>
            	Get retrieved value from the byte array.
            </summary>
            <value>
            	Retrieved value from the byte array.
            	If <see cref="P:MsgPack.UnpackingResult`1.ReadCount"/> equals to old offset, then a value of this property is not undefined.
            </value>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.Equals(System.Object)">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="obj"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <returns>
            	If <paramref name="obj"/> is <see cref="T:MsgPack.UnpackingResult`1"/> and its value is equal to this instance, then true.
            	Otherwise false.
            </returns>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.Equals(MsgPack.UnpackingResult{`0})">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="other"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <returns>
            	Whether value of <paramref name="other"/> is equal to this instance or not.
            </returns>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.GetHashCode">
            <summary>
            	Get hash code of this instance.
            </summary>
            <returns>Hash code of this instance.</returns>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.ToString">
            <summary>
            	Get string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
            <remarks>
            	<note>
            		DO NOT use this value programmically. 
            		The purpose of this method is informational, so format of this value subject to change.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.op_Equality(MsgPack.UnpackingResult{`0},MsgPack.UnpackingResult{`0})">
            <summary>
            	Compare two instances are equal.
            </summary>
            <param name="left"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <param name="right"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <returns>
            	Whether value of <paramref name="left"/> and <paramref name="right"/> are equal each other or not.
            </returns>
        </member>
        <member name="M:MsgPack.UnpackingResult`1.op_Inequality(MsgPack.UnpackingResult{`0},MsgPack.UnpackingResult{`0})">
            <summary>
            	Compare two instances are not equal.
            </summary>
            <param name="left"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <param name="right"><see cref="T:MsgPack.UnpackingResult`1"/> instance.</param>
            <returns>
            	Whether value of <paramref name="left"/> and <paramref name="right"/> are not equal each other or are equal.
            </returns>		
        </member>
        <member name="T:MsgPack.UnpackingStream">
            <summary>
            	Represents raw binary as read only <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            	<para>
            		This object behaves as wrapper of the underlying <see cref="T:System.IO.Stream"/> which contains message pack encoded byte array.
            		But, this object does not own the stream, so that stream is not closed when this stream is closed.
            	</para>
            	<para>
            		The value of <see cref="M:Stream.CanSeek"/>, timeout, and async API depends on the underlying stream.
            	</para>
            </remarks>
        </member>
        <member name="P:MsgPack.UnpackingStream.CanRead">
            <summary>
            	Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:MsgPack.UnpackingStream.CanWrite">
            <summary>
            	Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="P:MsgPack.UnpackingStream.Length">
            <summary>
            	Gets the length in bytes of the stream.
            </summary>
            <value>
            	A long value representing the length of the raw binary length.
            	This value must be between 0 and <see cref="F:System.Int32.MaxValue"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            	Methods were called after the stream was closed.
            </exception>
            <remarks>
            	This property never throws <see cref="T:System.NotSupportedException"/> even if <see cref="M:Stream.CanSeek" /> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:MsgPack.UnpackingStream.CanTimeout">
            <summary>
            	Gets a value that determines whether the current stream can time out.
            </summary>
            <value>
            	A value that determines whether the current stream can time out.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            	Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:MsgPack.UnpackingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            	An array of bytes. When this method returns, 
            	the buffer contains the specified byte array with the values between <paramref name="offset"/> and ( <paramref name="offset"/> + <paramref name="count"/> - 1) 
            	replaced by the bytes read from the current source. 
            </param>
            <param name="offset">
            	The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.
            </param>
            <param name="count">
            	The maximum number of bytes to be read from the current stream.
            </param>
            <returns>
            	The total number of bytes read into the buffer. 
            	This can be less than the number of bytes requested if that many bytes are not currently available,
            	or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            	The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. 
            </exception>
            <exception cref="T:System.IO.IOException">
            	An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            	Methods were called after the stream was closed.
            </exception>
            <remarks>
            	<note>
            		Arguments might be passed to the underlying <see cref="T:System.IO.Stream"/> without any validation.
            	</note>
            </remarks>
        </member>
        <member name="M:MsgPack.UnpackingStream.Flush">
            <summary>
            	Overrides <see cref="M:Stream.Flush()"/> so that no action is performed. 
            </summary>
        </member>
        <member name="M:MsgPack.UnpackingStream.SetLength(System.Int64)">
            <summary>
            	Throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Never used.</param>
            <exception cref="T:System.NotSupportedException">
            	Always thrown.
            </exception>
        </member>
        <member name="M:MsgPack.UnpackingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="buffer">Never used.</param>
            <param name="offset">Never used.</param>
            <param name="count">Never used.</param>
            <exception cref="T:System.NotSupportedException">
            	Always thrown.
            </exception>
        </member>
        <member name="T:MsgPack.UnpackingStreamReader">
            <summary>
            	Implements <see cref="T:System.IO.TextReader"/> which reads raw binary <see cref="T:System.IO.Stream"/> with specific <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="P:MsgPack.UnpackingStreamReader.ByteLength">
            <summary>
            	Gets the length of the underlying raw binary length.
            </summary>
            <value>
            	The length of the underlying raw binary length.
            	This value will not be negative.
            </value>
        </member>
        <member name="T:MsgPack.MPContract">
            <summary>
            	System.Contract alternative working on Xamarin.
            </summary>
        </member>
    </members>
</doc>
