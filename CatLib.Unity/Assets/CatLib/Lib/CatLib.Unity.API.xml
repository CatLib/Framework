<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CatLib.Unity.API</name>
    </assembly>
    <members>
        <member name="T:CatLib.API.Environment.DebugLevels">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="F:CatLib.API.Environment.DebugLevels.Prod">
            <summary>
            生产环境
            </summary>
        </member>
        <member name="F:CatLib.API.Environment.DebugLevels.Staging">
            <summary>
            仿真环境
            </summary>
        </member>
        <member name="F:CatLib.API.Environment.DebugLevels.Dev">
            <summary>
            开发者模式（在移动设备上允许开启调试）
            </summary>
        </member>
        <member name="F:CatLib.API.Environment.DebugLevels.Auto">
            <summary>
            自动模式（如果在编辑器模式下则使用开发者模式（非仿真环境）如果发布则使用生产环境）
            </summary>
        </member>
        <member name="T:CatLib.API.Environment.IEnvironment">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:CatLib.API.Environment.IEnvironment.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="P:CatLib.API.Environment.IEnvironment.AssetPath">
            <summary>
            系统资源路径
            <para>不同的调试等级下对应不同的资源路径(如Unity环境:)</para>
            <para><c>DebugLevels.Prod</c> : 生产环境下将会为<c>Application.persistentDataPath</c>读写目录</para>
            <para><c>DebugLevels.Staging</c> : 仿真环境下将会为<c>StreamingAssets</c>文件夹</para>
            <para><c>DebugLevels.Dev</c> : 开发者环境下将会为<c>Application.dataPath</c>数据路径</para>
            <para>调试等级无论如何设置，脱离编辑器将自动使用<c>Application.persistentDataPath</c>读写目录</para>
            </summary>
        </member>
        <member name="M:CatLib.API.Environment.IEnvironment.SetAssetPath(System.String)">
            <summary>
            设定资源路径，开发者设定的资源路径会覆盖默认的资源路径策略
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="T:CatLib.API.MonoDriver.IMonoDriver">
            <summary>
            Mono驱动器
            </summary>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.MainThread(System.Collections.IEnumerator)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">协程，执行会处于主线程</param>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.MainThread(System.Action)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">回调，回调的内容会处于主线程</param>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            启动协程
            </summary>
            <param name="routine">协程</param>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            停止协程
            </summary>
            <param name="routine">协程</param>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.Detach(System.Object)">
            <summary>
            从驱动器中卸载对象
            如果对象使用了增强接口，那么卸载对应增强接口
            从驱动器中卸载对象会引发IDestroy增强接口
            </summary>
            <param name="obj">对象</param>
            <exception cref="T:System.ArgumentNullException">当卸载对象为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.API.MonoDriver.IMonoDriver.Attach(System.Object)">
            <summary>
            如果对象实现了增强接口那么将对象装载进对应驱动器
            </summary>
            <param name="obj">对象</param>
            <exception cref="T:System.ArgumentNullException">当装载对象为<c>null</c>时引发</exception>
        </member>
        <member name="T:CatLib.API.MonoDriver.MonoDriverEvents">
            <summary>
            Mono驱动器事件
            </summary>
        </member>
        <member name="F:CatLib.API.MonoDriver.MonoDriverEvents.OnBeforeDestroy">
            <summary>
            当释放之前
            </summary>
        </member>
        <member name="F:CatLib.API.MonoDriver.MonoDriverEvents.OnDestroyed">
            <summary>
            当释放完成后
            </summary>
        </member>
        <member name="T:CatLib.API.Timer.ITimer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:CatLib.API.Timer.ITimer.Queue">
            <summary>
            计时器队列
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Delay(System.Single)">
            <summary>
            延迟指定时间后执行
            </summary>
            <param name="time">延迟时间(秒)</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.DelayFrame(System.Int32)">
            <summary>
            延迟指定帧数帧后执行
            </summary>
            <param name="frame">帧数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Loop(System.Single)">
            <summary>
            循环执行指定时间
            </summary>
            <param name="time">循环时间(秒)</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Loop(System.Func{System.Boolean})">
            <summary>
            循环执行，直到函数返回false
            </summary>
            <param name="loopFunc">循环状态函数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.LoopFrame(System.Int32)">
            <summary>
            循环执行指定帧数
            </summary>
            <param name="frame">循环的帧数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Interval(System.Single,System.Int32)">
            <summary>
            间隔多少时间执行一次
            执行时的当前帧计算间隔
            </summary>
            <param name="time">间隔的时间</param>
            <param name="life">最多允许触发的次数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.IntervalFrame(System.Int32,System.Int32)">
            <summary>
            间隔多少帧执行一次
            执行时的当前帧计算间隔
            </summary>
            <param name="frame">间隔的帧数</param>
            <param name="life">最多允许触发的次数</param>
        </member>
        <member name="T:CatLib.API.Timer.ITimerQueue">
            <summary>
            计时器任务队列
            </summary>
        </member>
        <member name="P:CatLib.API.Timer.ITimerQueue.IsPause">
            <summary>
            是否是暂停的
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimerQueue.OnCompleted(System.Action)">
            <summary>
            当队列的所有计时器完成时
            </summary>
            <param name="onCompleted">完成时</param>
            <returns>当前组实例</returns>
        </member>
        <member name="M:CatLib.API.Timer.ITimerQueue.SetTime(CatLib.API.Time.ITime)">
            <summary>
            设定使用的时间系统
            </summary>
            <param name="time">时间</param>
            <returns>当前组实例</returns>
        </member>
        <member name="T:CatLib.API.Timer.ITimerManager">
            <summary>
            计时器管理器
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Make(System.Action)">
            <summary>
            创建一个计时器
            </summary>
            <param name="task">计时器执行的任务</param>
            <returns>计时器</returns>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.MakeQueue(System.Action,System.Int32)">
            <summary>
            创建一个计时器队列
            </summary>
            <param name="area">在这个区域中Make的计时器会按照Make顺序加入同一个队列</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由器组</returns>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Cancel(CatLib.API.Timer.ITimerQueue)">
            <summary>
            停止计时器队列的运行
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Pause(CatLib.API.Timer.ITimerQueue)">
            <summary>
            暂停计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Play(CatLib.API.Timer.ITimerQueue)">
            <summary>
            重新开始播放计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="T:CatLib.API.Time.ITime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.Time">
            <summary>
            从游戏开始到现在所用的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.DeltaTime">
            <summary>
            上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FixedTime">
            <summary>
            从游戏开始到现在的时间（秒）使用固定时间来更新
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.TimeSinceLevelLoad">
            <summary>
            从当前scene开始到目前为止的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FixedDeltaTime">
            <summary>
            固定的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.MaximumDeltaTime">
            <summary>
            能获取最大的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.SmoothDeltaTime">
            <summary>
            平稳的上一帧到当前帧的时间(秒)，根据前N帧的加权平均值
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.TimeScale">
            <summary>
            时间缩放系数
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FrameCount">
            <summary>
            总帧数
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.RealtimeSinceStartup">
            <summary>
            自游戏开始后的总时间（暂停也会增加）
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.CaptureFramerate">
            <summary>
            每秒的帧率
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.UnscaledDeltaTime">
            <summary>
            不考虑时间缩放上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.UnscaledTime">
            <summary>
            不考虑时间缩放的从游戏开始到现在的时间
            </summary>
        </member>
        <member name="T:CatLib.API.Time.ITimeManager">
            <summary>
            时间服务管理器
            </summary>
        </member>
        <member name="T:CatLib.IFixedUpdate">
            <summary>
            FixedUpdate时调用
            </summary>
        </member>
        <member name="M:CatLib.IFixedUpdate.FixedUpdate">
            <summary>
            FixedUpdate时调用
            </summary>
        </member>
        <member name="T:CatLib.ILateUpdate">
            <summary>
            在Update之后调用
            </summary>
        </member>
        <member name="M:CatLib.ILateUpdate.LateUpdate">
            <summary>
            LateUpdate时调用
            </summary>
        </member>
        <member name="T:CatLib.IOnDestroy">
            <summary>
            当被释放时
            </summary>
        </member>
        <member name="M:CatLib.IOnDestroy.OnDestroy">
            <summary>
            当被释放时调用
            </summary>
        </member>
        <member name="T:CatLib.IOnGUI">
            <summary>
            GUI绘制时
            </summary>
        </member>
        <member name="M:CatLib.IOnGUI.OnGUI">
            <summary>
            GUI绘制时
            </summary>
        </member>
        <member name="T:CatLib.IUpdate">
            <summary>
            Update 接口
            </summary>
        </member>
        <member name="M:CatLib.IUpdate.Update">
            <summary>
            当Update时调用
            </summary>
        </member>
    </members>
</doc>
