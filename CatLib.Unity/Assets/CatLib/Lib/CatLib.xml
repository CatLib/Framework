<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CatLib</name>
    </assembly>
    <members>
        <member name="T:CatLib.Debugger.WebConsole.Protocol.GetGuid">
            <summary>
            GetGuid API
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebConsole.Protocol.GetGuid.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.Protocol.GetGuid.#ctor(System.Object)">
            <summary>
            GetGuid API
            </summary>
            <param name="response">响应</param>
        </member>
        <member name="T:CatLib.Debugger.WebConsole.BaseProtocol">
            <summary>
            基础协议
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.BaseProtocol.Response">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.BaseProtocol.#ctor(System.Object)">
            <summary>
            基础协议
            </summary>
            <param name="response">响应</param>
        </member>
        <member name="T:CatLib.Debugger.WebConsole.HttpDebuggerConsole">
            <summary>
            http调试控制台
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.listener">
            <summary>
            http监听器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.router">
            <summary>
            路由器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.json">
            <summary>
            json处理器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.guid">
            <summary>
            当前唯一标识符
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpDebuggerConsole.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.#ctor(CatLib.API.Debugger.ILogger,CatLib.API.Routing.IRouter,CatLib.API.Json.IJson)">
            <summary>
            http调试控制台
            </summary>
            <param name="logger">日志记录器</param>
            <param name="router">路由器</param>
            <param name="json">json解析器</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.Finalize">
            <summary>
            当析构时
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.GetGuid(CatLib.API.Routing.IResponse)">
            <summary>
            获取控制台Guid
            </summary>
            <param name="response">响应</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.Start(System.String,System.Int32)">
            <summary>
            开启控制台服务
            </summary>
            <param name="host">监听host</param>
            <param name="port">监听端口</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.Stop">
            <summary>
            停止控制台服务
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.OnRequest(System.Net.HttpListenerContext)">
            <summary>
            当收到来自控制端的请求时
            </summary>
            <param name="context">请求上下文</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.DispatchToRouted(System.Net.HttpListenerContext)">
            <summary>
            调度到目标路由
            </summary>
            <param name="context">请求上下文</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.RoutedResponseHandler(System.Net.HttpListenerContext,CatLib.API.Routing.IResponse)">
            <summary>
            路由响应处理器
            </summary>
            <param name="context">请求上下文</param>
            <param name="response">路由响应</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpDebuggerConsole.RegisterNotFoundRouted">
            <summary>
            注册路由不存在
            </summary>
        </member>
        <member name="T:CatLib.Debugger.WebConsole.HttpListener">
            <summary>
            Http监听器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebConsole.HttpListener.listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="E:CatLib.Debugger.WebConsole.HttpListener.OnRequest">
            <summary>
            当请求时
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpListener.#ctor(System.String,System.Int32)">
            <summary>
            Http监听器
            </summary>
            <param name="host">监听host</param>
            <param name="port">监听端口</param>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpListener.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebConsole.HttpListener.ListenedRequest(System.IAsyncResult)">
            <summary>
            监听到请求时
            </summary>
        </member>
        <member name="T:CatLib.Debugger.WebConsole.IWebConsoleResponse">
            <summary>
            Web控制台响应
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebConsole.IWebConsoleResponse.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="T:CatLib.Debugger.IMonitor">
            <summary>
            监控
            </summary>
        </member>
        <member name="M:CatLib.Debugger.IMonitor.Monitor(CatLib.Debugger.IMonitorHandler)">
            <summary>
            增加监控
            </summary>
            <param name="handler">监控句柄</param>
        </member>
        <member name="T:CatLib.Debugger.IMonitorHandler">
            <summary>
            监控句柄
            </summary>
        </member>
        <member name="P:CatLib.Debugger.IMonitorHandler.Name">
            <summary>
            监控的名字
            </summary>
        </member>
        <member name="P:CatLib.Debugger.IMonitorHandler.Tags">
            <summary>
            标签(第0位：分类)
            </summary>
        </member>
        <member name="P:CatLib.Debugger.IMonitorHandler.Unit">
            <summary>
            监控值的单位
            </summary>
        </member>
        <member name="P:CatLib.Debugger.IMonitorHandler.Value">
            <summary>
            监控值
            </summary>
        </member>
        <member name="T:CatLib.Debugger.Log.ILogEntry">
            <summary>
            日志条目
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.ILogEntry.Id">
            <summary>
            条目id
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.ILogEntry.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.ILogEntry.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.ILogEntry.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.ILogEntry.Time">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.ILogEntry.GetStackTrace(System.Predicate{System.String})">
            <summary>
            获取调用堆栈
            </summary>
            <param name="match">是否符合输出条件</param>
            <returns>调用堆栈</returns>
        </member>
        <member name="T:CatLib.Debugger.Log.Logger">
            <summary>
            日志系统
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.Logger.handlers">
            <summary>
            日志处理器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.Logger.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.Logger.skipFrames">
            <summary>
            调用堆栈忽略的步数
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.Logger.callCount">
            <summary>
            调用计数
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.#ctor">
            <summary>
            构造一个日志系统
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.SetSkip(System.Int32,System.Action)">
            <summary>
            设定调用堆栈忽略的步数
            </summary>
            <param name="skipFrames">跳过的步数</param>
            <param name="area">作用区域</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.AddLogHandler(CatLib.Debugger.Log.ILogHandler)">
            <summary>
            增加日志处理器
            </summary>
            <param name="handler">处理器</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Log(CatLib.API.Debugger.LogLevels,System.Object,System.Object[])">
            <summary>
            输出一条日志，日志级别为传入的等级
            </summary>
            <param name="level">日志等级</param>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
            <exception cref="T:CatLib.API.Debugger.InvalidArgumentException">当传入的日志等级无效</exception>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.ExecLog(CatLib.API.Debugger.LogLevels,System.Object,System.Object[])">
            <summary>
            将日志推入日志处理器
            </summary>
            <param name="level">日志等级</param>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
            <exception cref="T:CatLib.API.Debugger.InvalidArgumentException">当传入的日志等级无效</exception>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Debug(System.Object,System.Object[])">
            <summary>
            输出一条调试级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Info(System.Object,System.Object[])">
            <summary>
            输出一条信息级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Notice(System.Object,System.Object[])">
            <summary>
            输出一条通知级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Warning(System.Object,System.Object[])">
            <summary>
            输出一条警告级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Error(System.Object,System.Object[])">
            <summary>
            输出一条错误级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Critical(System.Object,System.Object[])">
            <summary>
            输出一条关键级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Alert(System.Object,System.Object[])">
            <summary>
            输出一条警报级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.Emergency(System.Object,System.Object[])">
            <summary>
            输出一条紧急级日志
            </summary>
            <param name="message">日志内容</param>
            <param name="context">上下文,用于替换占位符</param>
        </member>
        <member name="M:CatLib.Debugger.Log.Logger.MakeLogEntry(CatLib.API.Debugger.LogLevels,System.String)">
            <summary>
            制作一个日志条目
            </summary>
            <param name="level">日志等级</param>
            <param name="message">日志</param>
            <returns>日志条目</returns>
        </member>
        <member name="T:CatLib.Debugger.Log.ILogHandler">
            <summary>
            日志处理器
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.ILogHandler.Handler(CatLib.Debugger.Log.ILogEntry)">
            <summary>
            日志处理器
            </summary>
            <param name="log">日志条目</param>
        </member>
        <member name="T:CatLib.Debugger.Log.Handler.StdOutLogHandler">
            <summary>
            标准输出日志处理器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.Handler.StdOutLogHandler.mapping">
            <summary>
            实际处理方法
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.Handler.StdOutLogHandler.#ctor">
            <summary>
            标准输出日志处理器
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.Handler.StdOutLogHandler.Handler(CatLib.Debugger.Log.ILogEntry)">
            <summary>
            日志处理器
            </summary>
            <param name="log">日志条目</param>
        </member>
        <member name="T:CatLib.Debugger.Log.LogEntry">
            <summary>
            日志条目记录
            </summary>
        </member>
        <member name="F:CatLib.Debugger.Log.LogEntry.lastId">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.Id">
            <summary>
            条目id
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.StackTrace">
            <summary>
            调用堆栈
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:CatLib.Debugger.Log.LogEntry.Time">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="M:CatLib.Debugger.Log.LogEntry.#ctor(CatLib.API.Debugger.LogLevels,System.String,System.Int32)">
            <summary>
            日志条目记录
            </summary>
            <param name="level">日志等级</param>
            <param name="message">消息内容</param>
            <param name="skipFrams">跳过的帧数</param>
        </member>
        <member name="M:CatLib.Debugger.Log.LogEntry.GetStackTrace(System.Predicate{System.String})">
            <summary>
            获取调用堆栈
            </summary>
            <param name="match">是否符合输出条件</param>
            <returns>调用堆栈</returns>
        </member>
        <member name="T:CatLib.Debugger.DebuggerProvider">
            <summary>
            调试服务
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.LogHandlers">
            <summary>
            启用的日志句柄
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.AutoMake">
            <summary>
            自动生成列表
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.IndexMonitor">
            <summary>
            首页的日志显示
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.StdConsoleLoggerHandler">
            <summary>
            控制台日志处理器
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.WebConsoleEnable">
            <summary>
            WebConsole是否启用
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.WebConsoleHost">
            <summary>
            Web控制器Host
            </summary>
        </member>
        <member name="P:CatLib.Debugger.DebuggerProvider.WebConsolePort">
            <summary>
            Web控制台端口
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.#ctor">
            <summary>
            构建一个调试服务提供者
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.InitWebConsole">
            <summary>
            初始化Web控制台
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.Register">
            <summary>
            注册调试服务
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.GetLogHandlers">
            <summary>
            获取日志句柄
            </summary>
            <returns>句柄</returns>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.RegisterLogger">
            <summary>
            注册日志系统
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.RegisterWebConsole">
            <summary>
            注册web控制台基础服务
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.RegisterWebMonitor">
            <summary>
            注册监控
            </summary>
        </member>
        <member name="M:CatLib.Debugger.DebuggerProvider.RegisterWebLog">
            <summary>
            注册Web调试服务
            </summary>
        </member>
        <member name="T:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler">
            <summary>
            基于尺寸大小的监控处理器(字节)
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.Tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.Name">
            <summary>
            监控的名字
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.Unit">
            <summary>
            监控值的单位描述
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.unitMapping">
            <summary>
            单位映射
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.callback">
            <summary>
            回调获取结果
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.Value">
            <summary>
            实时的监控值
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Handler.SizeMonitorHandler.#ctor(System.String,System.String[],System.Func{System.Object})">
            <summary>
            尺寸监控处理器
            </summary>
            <param name="name">监控名字</param>
            <param name="tags">标签</param>
            <param name="callback">回调获取结果</param>
        </member>
        <member name="T:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler">
            <summary>
            监控处理器
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.Tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.Name">
            <summary>
            监控的名字
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.Unit">
            <summary>
            监控值的单位描述
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.Value">
            <summary>
            实时的监控值
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.callback">
            <summary>
            回调获取结果
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Handler.OnceRecordMonitorHandler.#ctor(System.String,System.String,System.String[],System.Func{System.Object})">
            <summary>
            单次记录监控处理器
            </summary>
            <param name="name">标题</param>
            <param name="unit">单位值</param>
            <param name="tags">tags</param>
            <param name="callback">回调</param>
        </member>
        <member name="T:CatLib.Debugger.WebMonitor.Controller.Monitor">
            <summary>
            监控
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Controller.Monitor.GetMonitorsIndex(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Collections.Generic.IEnumerable{System.String},CatLib.Debugger.WebMonitor.MonitorStore)">
            <summary>
            获取首页的监控
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="indexShow">首先显示的列表</param>
            <param name="monitorStore">容器存储</param>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Controller.Monitor.GetMonitors(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,CatLib.Debugger.WebMonitor.MonitorStore)">
            <summary>
            获取监控的详细数据
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="monitorStore">监控存储</param>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Controller.Monitor.CallMainThread(CatLib.API.Routing.IRequest,System.Action)">
            <summary>
            主线程调用
            </summary>
            <param name="request">请求</param>
            <param name="action">调用方法</param>
        </member>
        <member name="T:CatLib.Debugger.WebMonitor.MonitorStore">
            <summary>
            监控器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.MonitorStore.monitors">
            <summary>
            监控处理器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.MonitorStore.monitorsDict">
            <summary>
            监控处理器字典
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.MonitorStore.#ctor">
            <summary>
            监控器
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.MonitorStore.System#Collections#Generic#IEnumerable{CatLib#Debugger#IMonitorHandler}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.MonitorStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.MonitorStore.Monitor(CatLib.Debugger.IMonitorHandler)">
            <summary>
            增加监控
            </summary>
            <param name="handler">监控句柄</param>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.MonitorStore.FindMoitor(System.String)">
            <summary>
            搜索监控处理器
            </summary>
            <param name="monitorName">监控名</param>
        </member>
        <member name="T:CatLib.Debugger.WebMonitor.Protocol.GetMonitors">
            <summary>
            获取监控信息
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebMonitor.Protocol.GetMonitors.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebMonitor.Protocol.GetMonitors.outputs">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Protocol.GetMonitors.#ctor">
            <summary>
            获取分组API
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Protocol.GetMonitors.WriteLine(CatLib.Debugger.IMonitorHandler)">
            <summary>
            写入一条监控信息
            </summary>
            <param name="handler">处理器</param>
        </member>
        <member name="M:CatLib.Debugger.WebMonitor.Protocol.GetMonitors.WriteNotSupportLine(CatLib.Debugger.IMonitorHandler)">
            <summary>
            写入未支持行
            </summary>
            <param name="handler">处理器</param>
        </member>
        <member name="T:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs">
            <summary>
            Web控制台输出
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.credibleAssemblys">
            <summary>
            可信任程序集
            </summary>
        </member>
        <member name="P:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.outputs">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.#ctor">
            <summary>
            Web控制台输出
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.WriteLine(System.Int64,CatLib.API.Debugger.LogLevels,System.String,System.String,System.Collections.Generic.IList{System.String},System.Int64)">
            <summary>
            向Web控制台屏幕中输出一条消息
            </summary>
            <param name="id">消息id</param>
            <param name="level">消息等级</param>
            <param name="namespace">命名空间</param>
            <param name="message">消息标题</param>
            <param name="callStack">调用堆栈</param>
            <param name="time">记录时间</param>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.WriteLine(CatLib.Debugger.Log.ILogEntry)">
            <summary>
            向web控制台屏幕中输出一条消息
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Protocol.WebConsoleOutputs.IsCredibleAssembly(System.String)">
            <summary>
            是否是可信的程序集
            </summary>
            <param name="assembly">程序集</param>
            <returns>是否可信</returns>
        </member>
        <member name="T:CatLib.Debugger.WebLog.Controller.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Controller.Log.GetLog(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,CatLib.Debugger.WebLog.LogStore)">
            <summary>
            获取日志
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="logStore">日志存储</param>
        </member>
        <member name="T:CatLib.Debugger.WebLog.Controller.Util">
            <summary>
            通用
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.Controller.Util.Echo(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,CatLib.API.Debugger.ILogger)">
            <summary>
            回显
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="logger">日志系统</param>
        </member>
        <member name="T:CatLib.Debugger.WebLog.LogStore">
            <summary>
            Web调试服务
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.LogStore.clientIds">
            <summary>
            对应不同web客户端的已经读取到的最后的日志id
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.LogStore.logEntrys">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.LogStore.maxLogEntrys">
            <summary>
            最大储存的日志记录数
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogStore.#ctor(CatLib.Debugger.Log.Logger)">
            <summary>
            构造一个Web调试服务
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogStore.SetMaxStore(System.Int32)">
            <summary>
            设定最大存储
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogStore.Log(CatLib.Debugger.Log.ILogEntry)">
            <summary>
            记录一个日志
            </summary>
            <param name="entry">日志条目</param>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogStore.GetUnloadEntrysByClientId(System.String)">
            <summary>
            根据客户端id获取未被加载过的日志数据
            </summary>
            <param name="clientId">客户端id</param>
            <returns>未被加载过的日志数据</returns>
        </member>
        <member name="T:CatLib.Debugger.WebLog.LogHandler.WebLogHandler">
            <summary>
            Web日志处理器
            </summary>
        </member>
        <member name="F:CatLib.Debugger.WebLog.LogHandler.WebLogHandler.store">
            <summary>
            日志存储
            </summary>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogHandler.WebLogHandler.#ctor(CatLib.Debugger.WebLog.LogStore)">
            <summary>
            网络日志处理器
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:CatLib.Debugger.WebLog.LogHandler.WebLogHandler.Handler(CatLib.Debugger.Log.ILogEntry)">
            <summary>
            日志处理器
            </summary>
            <param name="log">日志条目</param>
        </member>
        <member name="T:CatLib.Facade.I18N">
            <summary>
            国际化I18N
            </summary>
        </member>
        <member name="T:CatLib.Facade.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="T:CatLib.Facade.Config">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="T:CatLib.Facade.Logger">
            <summary>
            日志器
            </summary>
        </member>
        <member name="T:CatLib.Facade.FileSystem">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="T:CatLib.Facade.Router">
            <summary>
            路由
            </summary>
        </member>
        <member name="T:CatLib.SystemTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:CatLib.SystemTime.ToDateTime(System.Int32)">
            <summary>
            将linux时间戳转为DateTime
            </summary>
            <param name="time">时间戳</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:CatLib.SystemTime.Timestamp(System.DateTime)">
            <summary>
            转为Linux时间戳
            </summary>
            <param name="time">DateTime</param>
            <returns>linux时间戳</returns>
        </member>
        <member name="T:CatLib.Version">
            <summary>
            版本（遵循semver）
            </summary>
        </member>
        <member name="F:CatLib.Version.versionMatcher">
            <summary>
            版本匹配正则式
            </summary>
        </member>
        <member name="F:CatLib.Version.version">
            <summary>
            原始版本信息
            </summary>
        </member>
        <member name="F:CatLib.Version.current">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="T:CatLib.Version.VersionData">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="F:CatLib.Version.VersionData.Major">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="F:CatLib.Version.VersionData.Minor">
            <summary>
            次版本号
            </summary>
        </member>
        <member name="F:CatLib.Version.VersionData.Revised">
            <summary>
            修订版本号
            </summary>
        </member>
        <member name="F:CatLib.Version.VersionData.PreRelease">
            <summary>
            先行版本号
            </summary>
        </member>
        <member name="F:CatLib.Version.VersionData.BuildMetadata">
            <summary>
            版本编译信息
            </summary>
        </member>
        <member name="M:CatLib.Version.VersionData.#ctor(System.String)">
            <summary>
            版本信息
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:CatLib.Version.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造一个版本
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="revised">修订版本号</param>
        </member>
        <member name="M:CatLib.Version.#ctor(System.String)">
            <summary>
            构造一个版本
            </summary>
            <param name="version">版本号</param>
        </member>
        <member name="M:CatLib.Version.Compare(System.String)">
            <summary>
            将当前版本和输入版本进行比较
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="version">输入版本</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:CatLib.Version.CompareBlock(System.String,System.String)">
            <summary>
            比较左值和右值
            <para>如果左值大于右值那么返回1</para>
            <para>如果左值等于右值那么返回0</para>
            <para>如果左值小于右值那么返回-1</para>
            </summary>
            <param name="left">左值</param>
            <param name="right">右值</param>
        </member>
        <member name="M:CatLib.Version.GuardVersion(System.String)">
            <summary>
            验证输入版本
            </summary>
            <param name="version">输入版本</param>
        </member>
        <member name="M:CatLib.Version.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>版本信息</returns>
        </member>
        <member name="T:CatLib.Converters.Converters">
            <summary>
            转换器
            </summary>
        </member>
        <member name="F:CatLib.Converters.Converters.coverterDictionary">
            <summary>
            转换器字典
            </summary>
        </member>
        <member name="M:CatLib.Converters.Converters.#ctor">
            <summary>
            构建一个转换器
            </summary>
        </member>
        <member name="M:CatLib.Converters.Converters.AddConverter(CatLib.API.Converters.ITypeConverter)">
            <summary>
            增加一个转换器
            </summary>
            <param name="converter">转换器</param>
        </member>
        <member name="M:CatLib.Converters.Converters.Convert(System.Object,System.Type)">
            <summary>
            从源类型转为目标类型
            </summary>
            <param name="source">源数据</param>
            <param name="to">目标类型</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:CatLib.Converters.Converters.Convert``1(System.Object)">
            <summary>
            从源类型转为目标类型
            </summary>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源数据</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:CatLib.Converters.Converters.TryConvert(System.Object,System.Object@,System.Type)">
            <summary>
            从源类型转为目标类型
            </summary>
            <param name="source">源数据</param>
            <param name="target">目标数据</param>
            <param name="to">目标类型</param>
            <returns>是否成功转换</returns>
        </member>
        <member name="M:CatLib.Converters.Converters.TryConvert``1(System.Object,``0@)">
            <summary>
            从源类型转为目标类型
            </summary>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源数据</param>
            <param name="target">目标数据</param>
            <returns>是否成功转换</returns>
        </member>
        <member name="M:CatLib.Converters.Converters.TryGetConverter(System.Type,System.Type,CatLib.API.Converters.ITypeConverter@)">
            <summary>
            获取类型所需的转换器
            </summary>
            <param name="from">来源类型</param>
            <param name="to">目标类型</param>
            <param name="converter">转换器</param>
            <returns>是否成功获取转换器</returns>
        </member>
        <member name="T:CatLib.Converters.ConvertersManager">
            <summary>
            转换器管理器
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersManager.CloneExtend(System.String,System.String)">
            <summary>
            克隆指定转换器(注意克隆只克隆解决器提供的结果)
            </summary>
            <param name="newExtendName">新的名字</param>
            <param name="cloneFromExtendName">克隆自的管理器名字</param>
            <returns>转换器</returns>
        </member>
        <member name="T:CatLib.Converters.ConvertersProvider">
            <summary>
            转换器服务
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersProvider.Register">
            <summary>
            注册文件系统服务
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersProvider.RegisterManager">
            <summary>
            注册管理器
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersProvider.RegisterDefaultConverter">
            <summary>
            注册默认的转换器
            </summary>
        </member>
        <member name="M:CatLib.Converters.ConvertersProvider.LoadDefaultConverters">
            <summary>
            加载默认的转换器
            </summary>
            <returns>默认的转换器</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.BoolStringConverter">
            <summary>
            bool转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.BoolStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.BoolStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.BoolStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.ByteStringConverter">
            <summary>
            byte转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.ByteStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.ByteStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.ByteStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.CharStringConverter">
            <summary>
            char转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.CharStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.CharStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.CharStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.DateTimeStringConverter">
            <summary>
            datetime转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DateTimeStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DateTimeStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.DateTimeStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.DecimalStringConverter">
            <summary>
            decimal转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DecimalStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DecimalStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.DecimalStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.DoubleStringConverter">
            <summary>
            double转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DoubleStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.DoubleStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.DoubleStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.EnumStringConverter">
            <summary>
            enum转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.EnumStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.EnumStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.EnumStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.Int16StringConverter">
            <summary>
            int16转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int16StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int16StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.Int16StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.Int32StringConverter">
            <summary>
            int32转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int32StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int32StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.Int32StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.Int64StringConverter">
            <summary>
            int64转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int64StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.Int64StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.Int64StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.SByteStringConverter">
            <summary>
            sbyte转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.SByteStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.SByteStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.SByteStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.SingleStringConverter">
            <summary>
            single转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.SingleStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.SingleStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.SingleStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringBoolConverter">
            <summary>
            string转bool转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringBoolConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringBoolConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringBoolConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringByteConverter">
            <summary>
            string转byte转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringByteConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringByteConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringByteConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringCharConverter">
            <summary>
            string转char转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringCharConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringCharConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringCharConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringDateTimeConverter">
            <summary>
            string转datetime转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDateTimeConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDateTimeConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringDateTimeConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringDecimalConverter">
            <summary>
            string转decimal转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDecimalConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDecimalConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringDecimalConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringDoubleConverter">
            <summary>
            string转double转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDoubleConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringDoubleConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringDoubleConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringEnumConverter">
            <summary>
            string转enum转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringEnumConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringEnumConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringEnumConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringInt16Converter">
            <summary>
            string转int16转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt16Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt16Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringInt16Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringInt32Converter">
            <summary>
            string转int32转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt32Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt32Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringInt32Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringInt64Converter">
            <summary>
            string转long转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt64Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringInt64Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringInt64Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringSByteConverter">
            <summary>
            string转int32转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringSByteConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringSByteConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringSByteConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringSingleConverter">
            <summary>
            string转float转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringSingleConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringSingleConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringSingleConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringStringConverter">
            <summary>
            string转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringStringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringStringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringUInt16Converter">
            <summary>
            string转uint16转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt16Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt16Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringUInt16Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringUInt32Converter">
            <summary>
            string转int转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt32Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt32Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringUInt32Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.StringUInt64Converter">
            <summary>
            string转ulong转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt64Converter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.StringUInt64Converter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.StringUInt64Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.UInt16StringConverter">
            <summary>
            uint16转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt16StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt16StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.UInt16StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.UInt32StringConverter">
            <summary>
            uint转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt32StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt32StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.UInt32StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Converters.Plan.UInt64StringConverter">
            <summary>
            ulong转string转换器
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt64StringConverter.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:CatLib.Converters.Plan.UInt64StringConverter.To">
            <summary>
            目标
            </summary>
        </member>
        <member name="M:CatLib.Converters.Plan.UInt64StringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            源类型转换到目标类型
            </summary>
            <param name="source">源类型</param>
            <param name="to">目标类型</param>
            <returns>目标类型</returns>
        </member>
        <member name="T:CatLib.Config.ConfigManager">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="F:CatLib.Config.ConfigManager.defaultName">
            <summary>
            默认的配置名字
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigManager.SetDefault(System.String)">
            <summary>
            设定默认的配置名字
            </summary>
            <param name="name">默认配置名字</param>
        </member>
        <member name="M:CatLib.Config.ConfigManager.GetDefaultName">
            <summary>
            获取默认的配置名字
            </summary>
            <returns>默认的文件系统名字</returns>
        </member>
        <member name="T:CatLib.Config.Locator.CodeConfigLocator">
            <summary>
            代码配置定位器
            </summary>
        </member>
        <member name="F:CatLib.Config.Locator.CodeConfigLocator.dict">
            <summary>
            配置字典
            </summary>
        </member>
        <member name="M:CatLib.Config.Locator.CodeConfigLocator.#ctor">
            <summary>
            代码配置定位器
            </summary>
        </member>
        <member name="M:CatLib.Config.Locator.CodeConfigLocator.Set(System.String,System.String)">
            <summary>
            设定值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
        </member>
        <member name="M:CatLib.Config.Locator.CodeConfigLocator.TryGetValue(System.String,System.String@)">
            <summary>
            根据配置名获取配置的值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
            <returns>是否获取到配置</returns>
        </member>
        <member name="M:CatLib.Config.Locator.CodeConfigLocator.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="T:CatLib.Config.Config">
            <summary>
            配置容器
            </summary>
        </member>
        <member name="F:CatLib.Config.Config.locator">
            <summary>
            配置定位器
            </summary>
        </member>
        <member name="F:CatLib.Config.Config.converters">
            <summary>
            类型转换器
            </summary>
        </member>
        <member name="F:CatLib.Config.Config.watches">
            <summary>
            观察者
            </summary>
        </member>
        <member name="M:CatLib.Config.Config.#ctor(CatLib.API.Converters.IConverters,CatLib.API.Config.IConfigLocator)">
            <summary>
            构造配置容器
            </summary>
            <param name="converters">转换器</param>
            <param name="locator">配置定位器</param>
        </member>
        <member name="M:CatLib.Config.Config.SetConverters(CatLib.API.Converters.IConverters)">
            <summary>
            设定类型转换器
            </summary>
            <param name="converters">转换器</param>
        </member>
        <member name="M:CatLib.Config.Config.SetLocator(CatLib.API.Config.IConfigLocator)">
            <summary>
            注册一个配置定位器
            </summary>
            <param name="locator">配置定位器</param>
        </member>
        <member name="M:CatLib.Config.Config.Watch(System.String,System.Action{System.Object})">
            <summary>
            监控一个配置的变化
            </summary>
            <param name="name">监控的名字</param>
            <param name="callback">发生变化时会触发</param>
        </member>
        <member name="M:CatLib.Config.Config.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="P:CatLib.Config.Config.Item(System.String)">
            <summary>
            根据配置名获取配置
            </summary>
            <param name="name">配置名</param>
            <returns>配置的值</returns>
        </member>
        <member name="M:CatLib.Config.Config.Set(System.String,System.Object)">
            <summary>
            设定配置的值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置的值</param>
        </member>
        <member name="M:CatLib.Config.Config.Get``1(System.String,``0)">
            <summary>
            根据配置名获取配置
            </summary>
            <typeparam name="T">配置最终转换到的类型</typeparam>
            <param name="name">配置所属类型的名字</param>
            <param name="def">当找不到配置时的默认值</param>
            <returns>配置的值，如果找不到则返回默认值</returns>
        </member>
        <member name="T:CatLib.Config.ConfigProvider">
            <summary>
            配置服务提供者
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.Register">
            <summary>
            注册配置服务
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.RegisterManager">
            <summary>
            注册管理器
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.RegisterDefaultConfig">
            <summary>
            注册默认的配置
            </summary>
        </member>
        <member name="T:CatLib.Events.Dispatcher">
            <summary>
            事件调度器
            </summary>
        </member>
        <member name="F:CatLib.Events.Dispatcher.handlers">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="F:CatLib.Events.Dispatcher.wildcardHandlers">
            <summary>
            通配符事件句柄
            </summary>
        </member>
        <member name="F:CatLib.Events.Dispatcher.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Events.Dispatcher.breakFlag">
            <summary>
            跳出标记
            </summary>
        </member>
        <member name="M:CatLib.Events.Dispatcher.#ctor">
            <summary>
            调度器
            </summary>
        </member>
        <member name="M:CatLib.Events.Dispatcher.Trigger(System.String,System.Object)">
            <summary>
            触发一个事件,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payload">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.TriggerHalt(System.String,System.Object)">
            <summary>
            触发一个事件,遇到第一个事件存在处理结果后终止,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名</param>
            <param name="payload">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.Dispatch(System.String,System.Object,System.Boolean)">
            <summary>
            调度事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="payload">载荷</param>
            <param name="halt">遇到第一个事件存在处理结果后终止</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.On(System.String,System.Action{System.Object},System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.On(System.String,System.Func{System.Object,System.Object},System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.Off(CatLib.Events.EventHandler)">
            <summary>
            移除一个事件
            </summary>
            <param name="handler">事件句柄</param>
        </member>
        <member name="M:CatLib.Events.Dispatcher.SetWildcardListener(CatLib.Events.EventHandler)">
            <summary>
            设定通配符监听
            </summary>
            <param name="handler">监听句柄</param>
        </member>
        <member name="M:CatLib.Events.Dispatcher.GetListeners(System.String)">
            <summary>
            获取指定事件的事件句柄列表
            </summary>
            <param name="eventName">事件名</param>
            <returns>句柄列表</returns>
        </member>
        <member name="M:CatLib.Events.Dispatcher.Normalize(System.String)">
            <summary>
            标准化字符串
            </summary>
            <param name="input">输入</param>
            <returns>输出</returns>
        </member>
        <member name="T:CatLib.Events.EventHandler">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="P:CatLib.Events.EventHandler.Life">
            <summary>
            剩余的调用次数
            </summary>
        </member>
        <member name="P:CatLib.Events.EventHandler.IsLife">
            <summary>
            事件是否是有效的
            </summary>
        </member>
        <member name="P:CatLib.Events.EventHandler.EventName">
            <summary>
            事件名
            </summary>
        </member>
        <member name="P:CatLib.Events.EventHandler.IsWildcard">
            <summary>
            是否使用了通配符
            </summary>
        </member>
        <member name="F:CatLib.Events.EventHandler.dispatcher">
            <summary>
            调度器
            </summary>
        </member>
        <member name="F:CatLib.Events.EventHandler.handler">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="F:CatLib.Events.EventHandler.isCancel">
            <summary>
            是否取消事件
            </summary>
        </member>
        <member name="F:CatLib.Events.EventHandler.count">
            <summary>
            调用计数
            </summary>
        </member>
        <member name="M:CatLib.Events.EventHandler.#ctor(CatLib.Events.Dispatcher,System.String,System.Func{System.Object,System.Object},System.Int32,System.Boolean)">
            <summary>
            创建一个事件句柄
            </summary>
            <param name="dispatcher">调度器</param>
            <param name="eventName">事件名</param>
            <param name="handler">事件句柄</param>
            <param name="life">生命次数</param>
            <param name="wildcard">是否使用了通配符</param>
        </member>
        <member name="M:CatLib.Events.EventHandler.Cancel">
            <summary>
            撤销事件监听
            </summary>
            <returns>是否撤销成功</returns>
        </member>
        <member name="M:CatLib.Events.EventHandler.Trigger(System.Object)">
            <summary>
            激活事件
            </summary>
            <param name="payload">载荷</param>
        </member>
        <member name="T:CatLib.Events.EventsProvider">
            <summary>
            事件服务提供者
            </summary>
        </member>
        <member name="M:CatLib.Events.EventsProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Events.EventsProvider.Register">
            <summary>
            注册事件服务
            </summary>
        </member>
        <member name="T:CatLib.FileSystem.Adapter.Local">
            <summary>
            本地驱动器
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Adapter.Local.root">
            <summary>
            根目录
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.#ctor(System.String)">
            <summary>
            构建一个本地驱动器
            </summary>
            <param name="root">根目录</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录(可以被用于重命名)
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的路径</param>
            <returns>指定目录下的文件夹和文件列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.IsDir(System.String)">
            <summary>
            是否是文件夹
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>是否是文件夹</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.Normalize(System.String)">
            <summary>
            标准化路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.GuardLimitedRoot(System.String)">
            <summary>
            判断限定范围是否在root下
            </summary>
            <param name="path">绝对路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.Local.EnsureDirectory(System.String)">
            <summary>
            保证目录存在
            </summary>
            <param name="root">路径</param>
        </member>
        <member name="T:CatLib.FileSystem.Adapter.IFileSystemAdapter">
            <summary>
            文件系统适配器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的文件夹路径(如果传入的是一个文件那么将会返回文件自身路径)</param>
            <returns>指定目录下的文件夹和文件列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.Adapter.IFileSystemAdapter.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹的路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="T:CatLib.FileSystem.Directory">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Directory.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            文件夹
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Directory.GetList">
            <summary>
            获取文件夹下的文件/文件夹列表（不会迭代子文件夹）
            </summary>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="T:CatLib.FileSystem.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.File.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            文件
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:CatLib.FileSystem.File.Write(System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.File.Read">
            <summary>
            读取文件
            </summary>
            <returns>读取的数据</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.FileSystem.adapter">
            <summary>
            文件系统适配器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.#ctor(CatLib.FileSystem.Adapter.IFileSystemAdapter)">
            <summary>
            文件系统
            </summary>
            <param name="adapter">适配器</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetHandler``1(System.String)">
            <summary>
            获取文件/文件夹句柄
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹句柄</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的文件夹路径(如果传入的是一个文件那么将会返回文件自身路径)</param>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.IsDir(System.String)">
            <summary>
            是否是文件夹
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>是否是文件夹</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystemProvider">
            <summary>
            文件系统服务提供者
            </summary>
        </member>
        <member name="P:CatLib.FileSystem.FileSystemProvider.DefaultPath">
            <summary>
            默认路径
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.#ctor">
            <summary>
            文件服务提供者
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.Init">
            <summary>
            服务提供者进程
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.Register">
            <summary>
            注册文件系统服务
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.RegisterManager">
            <summary>
            注册管理器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.RegisterDefaultFileSystem">
            <summary>
            注册默认的文件系统
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.InitRegisterLocalDriver">
            <summary>
            初始化本地磁盘驱动
            </summary>
        </member>
        <member name="T:CatLib.FileSystem.Handler">
            <summary>
            文件/文件夹句柄
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Handler.path">
            <summary>
            文件/文件夹路径
            </summary>
        </member>
        <member name="P:CatLib.FileSystem.Handler.Path">
            <summary>
            文件/文件夹路径
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Handler.fileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="P:CatLib.FileSystem.Handler.FileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            构造一个文件文件夹句柄
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Copy(System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Delete">
            <summary>
            删除文件或者文件夹
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Rename(System.String)">
            <summary>
            重命名
            </summary>
            <param name="newName">新的文件/文件夹名字</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Move(System.String)">
            <summary>
            将文件/文件夹移动到指定路径
            </summary>
            <param name="newPath">移动到的目标路径</param>
        </member>
        <member name="P:CatLib.FileSystem.Handler.IsExists">
            <summary>
            文件/文件夹是否存在
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.GetAttributes">
            <summary>
            获取文件/文件夹属性
            </summary>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="P:CatLib.FileSystem.Handler.IsDir">
            <summary>
            是否是文件夹
            </summary>
            <returns>是否是文件夹</returns>
        </member>
        <member name="M:CatLib.FileSystem.Handler.GetSize">
            <summary>
            获取文件/文件夹大小(字节)
            </summary>
            <returns>文件/文件夹大小</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystemManager">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.FileSystemManager.configManager">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.#ctor(CatLib.API.Config.IConfigManager)">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.Disk(System.String)">
            <summary>
            获取一个文件系统(磁盘)
            </summary>
            <param name="name">名字</param>
            <returns>文件系统</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.GetDefaultName">
            <summary>
            获取默认的文件系统名字
            </summary>
            <returns>默认的文件系统名字</returns>
        </member>
        <member name="T:CatLib.Json.JsonProvider">
            <summary>
            Json 服务
            </summary>
        </member>
        <member name="M:CatLib.Json.JsonProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Json.JsonProvider.Register">
            <summary>
            当注册服务提供者
            </summary>
        </member>
        <member name="T:CatLib.Json.JsonUtility">
            <summary>
            Json处理器
            </summary>
        </member>
        <member name="F:CatLib.Json.JsonUtility.handler">
            <summary>
            处理器
            </summary>
        </member>
        <member name="M:CatLib.Json.JsonUtility.SetJson(CatLib.API.Json.IJson)">
            <summary>
            设定记录器实例接口
            </summary>
            <param name="handler">记录器</param>
        </member>
        <member name="M:CatLib.Json.JsonUtility.Decode``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="json">json数据</param>
            <returns>反序列化的类型</returns>
        </member>
        <member name="M:CatLib.Json.JsonUtility.Encode(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item">需要序列化的对象</param>
            <returns>json数据</returns>
        </member>
        <member name="M:CatLib.Json.JsonUtility.GuardHandler">
            <summary>
            校验json处理器有效性
            </summary>
        </member>
        <member name="T:CatLib.Json.SimpleJsonAdapter">
            <summary>
            Facebook Simple Json 适配器
            </summary>
        </member>
        <member name="M:CatLib.Json.SimpleJsonAdapter.Decode``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="json">json数据</param>
            <returns>反序列化的类型</returns>
        </member>
        <member name="M:CatLib.Json.SimpleJsonAdapter.Encode(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item">需要序列化的对象</param>
            <returns>json数据</returns>
        </member>
        <member name="T:CatLib.Routing.ExceptionRequest">
            <summary>
            请求(由于某些异常导致请求都无法被构建所以我们提供一个必定可以被构建的请求类)
            </summary>
        </member>
        <member name="P:CatLib.Routing.ExceptionRequest.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.ExceptionRequest.uri">
            <summary>
            访问uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.ExceptionRequest.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.#ctor(System.String,System.Object)">
            <summary>
            构建一个请求
            </summary>
            <param name="uri">uri</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetContext">
            <summary>
            获取上下文
            </summary>
            <returns>上下文</returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.Segment(System.Int32,System.String)">
            <summary>
            构成uri路径段的数组
            </summary>
            <param name="index">下标</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.Get(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.ReplaceParameter(System.String,System.String)">
            <summary>
            替换参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.ReplaceContext(System.Object)">
            <summary>
            替换上下文
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="P:CatLib.Routing.ExceptionRequest.Item(System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetString(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetInt(System.String,System.Int32)">
            <summary>
            获取整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetShort(System.String,System.Int16)">
            <summary>
            获取短整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetChar(System.String,System.Char)">
            <summary>
            获取字符的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点数的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetDouble(System.String,System.Double)">
            <summary>
            获取双精度浮点数的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取布尔值的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.ExceptionRequest.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>uri</returns>
        </member>
        <member name="T:CatLib.Routing.RouterEvents">
            <summary>
            路由事件
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouterEvents.OnBeforeRouterAttrCompiler">
            <summary>
            当属性路由编译之前
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouterEvents.OnDispatcher">
            <summary>
            当路由调度之前
            </summary>
        </member>
        <member name="T:CatLib.Routing.AttrRouteCompiler">
            <summary>
            属性路由编译器
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.router">
            <summary>
            路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.routed">
            <summary>
            被路由的特性标记
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.buildRecord">
            <summary>
            编译记录
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.controllerFuncBuildRecord">
            <summary>
            控制器编译记录
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.stripping">
            <summary>
            是否剥离当前程序集
            </summary>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.#ctor(CatLib.Routing.Router)">
            <summary>
            属性路由编译器
            </summary>
            <param name="router">路由器</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.OnStripping(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            根据回调返回结果来决定是否对当前程序集进行属性路由扫描
            </summary>
            <param name="stripping">回调返回true表示跳过该程序集扫描</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.Complie">
            <summary>
            编译属性路由
            </summary>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieRouted(System.Type)">
            <summary>
            编译属性路由
            </summary>
            <param name="type">编译类型</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieController(System.Type,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译控制器
            </summary>
            <param name="type">控制器类型</param>
            <param name="baseRouted">控制器路由标记</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieFunction(System.Type,System.Reflection.MethodInfo,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译函数
            </summary>
            <param name="controllerType">控制器类型</param>
            <param name="method">方法信息</param>
            <param name="baseRouted">控制器路由标记</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.CheckRepeat(System.String,System.Type,System.Reflection.MethodInfo)">
            <summary>
            检查是否重复编译
            </summary>
            <param name="path">编译路径</param>
            <param name="controllerType">控制器类型</param>
            <param name="method">编译方法</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptions(CatLib.API.Routing.IRoute,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译配置信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsGroup(CatLib.API.Routing.IRoute,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            增加组信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsWhere(CatLib.API.Routing.IRoute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            增加where信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsDefaults(CatLib.API.Routing.IRoute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            增加defaults信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieDirection(System.String)">
            <summary>
            编译指向语法
            </summary>
            <param name="input">输入的字符串</param>
            <returns>解析的指向语法</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.IsStripping(System.Reflection.Assembly)">
            <summary>
            程序集是否是被剥离的
            </summary>
            <param name="assembly">资源集</param>
            <returns>是否过滤</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ClassOrFunctionNameToRouteName(System.String)">
            <summary>
            类名或者方法名转为路由名
            </summary>
            <param name="name">名字</param>
            <returns>路由名</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.HasScheme(System.String)">
            <summary>
            是否包含scheme
            </summary>
            <param name="uri">输入值</param>
        </member>
        <member name="T:CatLib.Routing.CompiledRoute">
            <summary>
            编译后的路由信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.StaticPrefix">
            <summary>
            静态文本
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.RouteRegex">
            <summary>
            路由匹配表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.Tokens">
            <summary>
            所有需要匹配的变量单独的正则匹配式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.PathVariables">
            <summary>
            路径中的变量
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostRegex">
            <summary>
            匹配host的表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostTokens">
            <summary>
            host部分的需要匹配变量单独的正则表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostVariables">
            <summary>
            匹配host的的变量名
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.Variables">
            <summary>
            所有的变量列表
            </summary>
        </member>
        <member name="M:CatLib.Routing.CompiledRoute.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>编译后的字符串表示信息</returns>
        </member>
        <member name="T:CatLib.Routing.Request">
            <summary>
            请求
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.uri">
            <summary>
            统一资源标识符
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.route">
            <summary>
            使用的路由
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.Route">
            <summary>
            属于的路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.parameters">
            <summary>
            参数表
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.RouteUri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:CatLib.Routing.Request.#ctor(System.String,System.Object)">
            <summary>
            构建一个请求
            </summary>
            <param name="uri"></param>
            <param name="context"></param>
        </member>
        <member name="M:CatLib.Routing.Request.Segment(System.Int32,System.String)">
            <summary>
            构成uri路径段的数组
            </summary>
            <param name="index">下标</param>
            <param name="defaultValue">默认值</param>
            <returns>路径段值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetContext">
            <summary>
            获取上下文
            </summary>
            <returns>请求上下文</returns>
        </member>
        <member name="M:CatLib.Routing.Request.ReplaceContext(System.Object)">
            <summary>
            替换上下文
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:CatLib.Routing.Request.Get(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.ReplaceParameter(System.String,System.String)">
            <summary>
            替换参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:CatLib.Routing.Request.Item(System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetString(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetInt(System.String,System.Int32)">
            <summary>
            获取整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetShort(System.String,System.Int16)">
            <summary>
            获取短整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetChar(System.String,System.Char)">
            <summary>
            获取字符的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点数的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetDouble(System.String,System.Double)">
            <summary>
            获取双精度浮点数的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取布尔值的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            设定参数
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:CatLib.Routing.Request.SetRoute(CatLib.Routing.Route)">
            <summary>
            设定路由方案
            </summary>
            <param name="route">路由方案</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.Request.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>转为字符串</returns>
        </member>
        <member name="T:CatLib.Routing.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="F:CatLib.Routing.Response.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:CatLib.Routing.Response.GetContext">
            <summary>
            设定上下文
            </summary>
            <returns>上下文</returns>
        </member>
        <member name="M:CatLib.Routing.Response.SetContext(System.Object)">
            <summary>
            设定上下文
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:CatLib.Routing.Route">
            <summary>
            路由条目
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.validators">
            <summary>
            验证器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.uri">
            <summary>
            统一资源标识
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Uri">
            <summary>
            统一资源标识
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.router">
            <summary>
            路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.compiled">
            <summary>
            编译后的路由器信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Compiled">
            <summary>
            编译后的路由器信息
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.action">
            <summary>
            路由行为
            </summary>
        </member>
        <member name="M:CatLib.Routing.Route.#ctor(CatLib.Routing.Uri,CatLib.Routing.RouteAction)">
            <summary>
            创建一个新的路由条目
            </summary>
            <param name="uri">uri信息</param>
            <param name="action">路由行为</param>
        </member>
        <member name="M:CatLib.Routing.Route.SetContainer(CatLib.IContainer)">
            <summary>
            设定容器
            </summary>
            <param name="container">容器</param>
            <returns>当前路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Route.SetRouter(CatLib.Routing.Router)">
            <summary>
            设定路由器
            </summary>
            <param name="router">路由器</param>
            <returns>当前路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GetDefaults(System.String,System.String)">
            <summary>
            获取参数默认值
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:CatLib.Routing.Route.GetWhere(System.String)">
            <summary>
            获取筛选条件
            </summary>
            <param name="varName">参数名</param>
            <returns>筛选条件</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GetValidators">
            <summary>
            获取验证器列表
            </summary>
            <returns>验证器列表</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Where(System.String,System.String,System.Boolean)">
            <summary>
            约束指定参数必须符合指定模式才会被路由
            </summary>
            <param name="name">名字</param>
            <param name="pattern">约束参数</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Defaults(System.String,System.String,System.Boolean)">
            <summary>
            设定默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">默认值</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Group(System.String)">
            <summary>
            将当前路由条目追加到指定路由组中
            </summary>
            <param name="name">名字</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            路由中间件
            </summary>
            <param name="middleware">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Run(CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            执行请求
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <returns>响应</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GatherMiddleware">
            <summary>
            获取路由的中间件
            </summary>
            <returns>中间件过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GatherOnError">
            <summary>
            获取当出现错误时的过滤器链
            </summary>
            <returns>错误过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Matches(CatLib.Routing.Request)">
            <summary>
            当前路由条目是否符合请求
            </summary>
            <param name="request">请求</param>
            <returns>是否符合</returns>
        </member>
        <member name="M:CatLib.Routing.Route.DispatchToAction(CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            调度到行为
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
        </member>
        <member name="M:CatLib.Routing.Route.ThroughRouteMiddleware(CatLib.Routing.Request,CatLib.Routing.Response,System.Object,System.Action{CatLib.Routing.Request,CatLib.Routing.Response,System.Object})">
            <summary>
            通过路由中间件
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="context">上下文</param>
            <param name="callback">完成中间件的回调</param>
        </member>
        <member name="M:CatLib.Routing.Route.ActionCall(CatLib.Routing.Request,CatLib.Routing.Response,System.Object)">
            <summary>
            行为调用
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:CatLib.Routing.Route.ThroughControllerMiddleware(CatLib.Routing.Request,CatLib.Routing.Response,System.Action{CatLib.Routing.Request,CatLib.Routing.Response,System.Object})">
            <summary>
            通过控制器中间件
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="callback">回调</param>
        </member>
        <member name="M:CatLib.Routing.Route.ControllerCallRouteMiddlewareWrap(CatLib.Routing.Request,CatLib.Routing.Response,System.Object)">
            <summary>
            控制器调用路由中间件包装
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="context"></param>
        </member>
        <member name="M:CatLib.Routing.Route.ControllerCall(CatLib.Routing.Request,CatLib.Routing.Response,System.Object)">
            <summary>
            控制器调用
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:CatLib.Routing.Route.ClearCompile">
            <summary>
            清空路由编译条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.Route.CompileRoute">
            <summary>
            编译路由条目
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteAction">
            <summary>
            路由行为
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteAction.RouteTypes">
            <summary>
            路由行为类型
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteAction.RouteTypes.CallBack">
            <summary>
            回调形路由
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteAction.RouteTypes.ControllerCall">
            <summary>
            控制器调用
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Action">
            <summary>
            回调行为
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Controller">
            <summary>
            控制器
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Func">
            <summary>
            调度函数名
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteCompiler">
            <summary>
            路由条目编译器
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteCompiler.Separators">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteCompiler.VariableMaximumLength">
            <summary>
            变量最大长度
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.Compile(CatLib.Routing.Route)">
            <summary>
            编译路由条目
            </summary>
            <returns>编译后的路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.CompilePattern(CatLib.Routing.Route,System.String,System.Boolean)">
            <summary>
            编译参数
            </summary>
            <param name="route">路由条目</param>
            <param name="uri">uri</param>
            <param name="isHost">是否是host</param>
            <returns>编译数据</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.ComputeRegexp(System.Collections.Generic.IList{System.String[]},System.Int32,System.Int32)">
            <summary>
            计算表达式
            </summary>
            <param name="tokens">处理块</param>
            <param name="index">第几个下标</param>
            <param name="firstOptional">第一个可选项的下标</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.StrRepeat(System.String,System.Int32)">
            <summary>
            重复字符串
            </summary>
            <param name="val">值</param>
            <param name="num">重复的次数</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.FindNextSeparator(System.String)">
            <summary>
            搜索下一个分隔符
            </summary>
            <param name="uri">uri</param>
            <returns>下一个分隔符</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.IsMatch(System.String,System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="val">输入值</param>
            <param name="regstr">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.MatchParameters(System.String,System.String,System.Int32[]@)">
            <summary>
            获取参数
            </summary>
            <param name="uri">uri</param>
            <param name="regstr">正则表达式</param>
            <param name="parameIndex">参数下标</param>
            <returns>匹配到的参数</returns>
        </member>
        <member name="T:CatLib.Routing.RouteGroup">
            <summary>
            路由组
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteGroup.options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteGroup.routes">
            <summary>
            在路由组中的路由条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.#ctor">
            <summary>
            路由组
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.AddRoute(CatLib.API.Routing.IRoute)">
            <summary>
            增加路由条目到路由组中
            </summary>
            <param name="route">路由条目</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Defaults(System.String,System.String)">
            <summary>
            设定参数的默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">参数值</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Where(System.String,System.String)">
            <summary>
            约束指定参数必须符合正则表达式
            </summary>
            <param name="name">参数名</param>
            <param name="pattern">约束的正则表达式</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            添加路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="T:CatLib.Routing.RouteOptions">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.middleware">
            <summary>
            路由请求过滤链
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.onError">
            <summary>
            当路由出现异常时的过滤器链
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.wheres">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.defaults">
            <summary>
            默认值
            </summary>
        </member>
        <member name="E:CatLib.Routing.RouteOptions.OnCompiledChange">
            <summary>
            当被编译的内容发生改变时
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GetDefaults(System.String,System.String)">
            <summary>
            获取参数默认值
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>默认值</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GetWhere(System.String)">
            <summary>
            获取筛选条件
            </summary>
            <param name="varName">变量名</param>
            <returns>筛选条件,如果不存在则返回null</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Where(System.String,System.String,System.Boolean)">
            <summary>
            约束指定参数必须符合指定模式才会被路由
            </summary>
            <param name="name">名字</param>
            <param name="pattern">约束条件</param>
            <param name="overrided">是否覆盖配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Defaults(System.String,System.String,System.Boolean)">
            <summary>
            设定默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">默认值</param>
            <param name="overrided">是否覆盖配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GatherMiddleware">
            <summary>
            获取路由的中间件
            </summary>
            <returns>中间件过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GatherOnError">
            <summary>
            获取当出现错误时的过滤器链
            </summary>
            <returns>错误处理过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Merge(CatLib.Routing.RouteOptions)">
            <summary>
            将当前路由配置中的信息合并到给定的路由配置中
            </summary>
            <param name="options">路由配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeMiddleware(CatLib.Routing.RouteOptions)">
            <summary>
            合并中间件
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeOnError(CatLib.Routing.RouteOptions)">
            <summary>
            合并错误时的调度
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeWhere(CatLib.Routing.RouteOptions)">
            <summary>
            合并where
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeDefaults(CatLib.Routing.RouteOptions)">
            <summary>
            合并默认值
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="T:CatLib.Routing.RouteParameterBinder">
            <summary>
            路由参数绑定
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.Parameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            获取参数
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindPathParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配路径
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindHostParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配Host
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindQueryParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配绑定参数
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.MatchToKeys(CatLib.Routing.Route,CatLib.Routing.Request,System.Text.RegularExpressions.Match)">
            <summary>
            匹配路径中的key
            </summary>
            <param name="route"></param>
            <param name="request"></param>
            <param name="matches"></param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.ReplaceDefaults(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            将没有传入的参数替换为默认参数
            </summary>
            <param name="route"></param>
            <param name="request"></param>
        </member>
        <member name="T:CatLib.Routing.Router">
            <summary>
            路由服务
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.dispatcher">
            <summary>
            全局调度器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.schemes">
            <summary>
            协议方案
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.onNotFound">
            <summary>
            当路由没有找到时过滤链
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.middleware">
            <summary>
            路由请求中间件
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.onError">
            <summary>
            当出现异常时的过滤器链
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeGroup">
            <summary>
            路由组
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeGroupStack">
            <summary>
            路由组堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.requestStack">
            <summary>
            请求堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeStack">
            <summary>
            路由条目调用堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.responseStack">
            <summary>
            响应堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.defaultScheme">
            <summary>
            默认的scheme
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:CatLib.Routing.Router.#ctor(CatLib.API.Events.IDispatcher,CatLib.IContainer)">
            <summary>
            创建一个新的路由器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="container">容器</param>
        </member>
        <member name="M:CatLib.Routing.Router.SetDefaultScheme(System.String)">
            <summary>
            设定默认的scheme
            </summary>
            <param name="scheme">默认的scheme</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.GetDefaultScheme">
            <summary>
            获取默认的scheme
            </summary>
            <returns>默认scheme</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Reg(System.String,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse})">
            <summary>
            根据回调行为注册一个路由
            </summary>
            <param name="uris">统一资源标识符</param>
            <param name="action">行为</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Reg(System.String,System.Type,System.String)">
            <summary>
            根据控制器的type和调用的方法名字注册一个路由
            </summary>
            <param name="uris">uri</param>
            <param name="controller">控制器类型</param>
            <param name="func">调用的方法名</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.OnNotFound(System.Action{CatLib.API.Routing.IRequest,System.Action{CatLib.API.Routing.IRequest}},System.Int32)">
            <summary>
            当路由没有找到时
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            全局路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由器实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Dispatch(System.String,System.Object)">
            <summary>
            调度路由
            </summary>
            <param name="uri">路由地址</param>
            <param name="context">上下文</param>
            <returns>请求响应</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Group(System.String)">
            <summary>
            建立或者获取一个已经建立的路由组
            </summary>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Group(System.Action,System.String)">
            <summary>
            建立匿名路由组，调用的闭包内为路由组有效范围, 允许给定一个名字来显示命名路由组
            </summary>
            <param name="area">区域</param>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RouterCompiler">
            <summary>
            路由器编译
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Routing.Router.GuardCircularDependency(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            保证不处于循环依赖调用
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.Router.EnvironmentPreparation(CatLib.Routing.Route,CatLib.Routing.Request,CatLib.Routing.Response,System.Boolean)">
            <summary>
            环境预备
            </summary>
            <param name="route">路由</param>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="isRollback">是否回滚</param>
        </member>
        <member name="M:CatLib.Routing.Router.ThrowException(CatLib.Routing.Route,CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception)">
            <summary>
            触发异常冒泡
            </summary>
            <param name="route">路由条目</param>
            <param name="request">当前请求</param>
            <param name="response">当前响应</param>
            <param name="ex">异常</param>
            <returns>冒泡是否已经被拦截</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RegisterRoute(System.String,CatLib.Routing.RouteAction)">
            <summary>
            注册一个路由方案
            </summary>
            <param name="uris">统一资源标识符</param>
            <param name="action">行为</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.MakeRoute(CatLib.Routing.Uri,CatLib.Routing.RouteAction)">
            <summary>
            产生一个路由条目
            </summary>
            <param name="uri">uri</param>
            <param name="action">路由行为</param>
            <returns>路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Router.ThrowOnNotFound(CatLib.API.Routing.IRequest)">
            <summary>
            触发没有找到路由的过滤器链
            </summary>
            <param name="request">请求</param>
            <returns>冒泡是否已经被拦截</returns>
        </member>
        <member name="M:CatLib.Routing.Router.ThrowOnError(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception)">
            <summary>
            触发异常
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="ex">异常</param>
            <returns>冒泡是否已经被拦截</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RunRouteWithMiddleware(CatLib.Routing.Route,CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            通过中间件后执行路由请求
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <returns>响应</returns>
        </member>
        <member name="M:CatLib.Routing.Router.MakeScheme(System.String)">
            <summary>
            增加一个处理方案
            </summary>
            <param name="name">scheme名字</param>
            <returns>当前路由实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.FindRoute(CatLib.Routing.Request)">
            <summary>
            查找一个合适的路由
            </summary>
            <param name="request">请求</param>
            <returns>命中的路由</returns>
        </member>
        <member name="M:CatLib.Routing.Router.MakeRequest(System.String,System.Object)">
            <summary>
            创建请求
            </summary>
            <param name="uri">uri</param>
            <param name="context">上下文</param>
            <returns>请求</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Prefix(System.String)">
            <summary>
            处理uri为符合规则的url
            </summary>
            <param name="url">url</param>
            <returns>处理后的url</returns>
        </member>
        <member name="M:CatLib.Routing.Router.GetLastGroupPrefix">
            <summary>
            获取最后的分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.Router.GuardUri(System.String)">
            <summary>
            uri 保护
            </summary>
            <param name="uri">uri</param>
            <returns>处理后的uri</returns>
        </member>
        <member name="T:CatLib.Routing.RoutingProvider">
            <summary>
            路由服务
            </summary>
        </member>
        <member name="P:CatLib.Routing.RoutingProvider.DefaultScheme">
            <summary>
            默认的Scheme
            </summary>
        </member>
        <member name="P:CatLib.Routing.RoutingProvider.CompilerAssembly">
            <summary>
            会进行属性路由编译的程序集
            </summary>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.#ctor">
            <summary>
            路由服务
            </summary>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.Init">
            <summary>
            执行路由编译，路由编译总是最后进行的
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.Register">
            <summary>
            注册路由条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.RegisterAttrRouteCompiler">
            <summary>
            注册属性路由编译器
            </summary>
        </member>
        <member name="T:CatLib.Routing.Scheme">
            <summary>
            方案
            </summary>
        </member>
        <member name="F:CatLib.Routing.Scheme.routes">
            <summary>
            路由条目列表
            </summary>
        </member>
        <member name="F:CatLib.Routing.Scheme.name">
            <summary>
            方案名
            </summary>
        </member>
        <member name="P:CatLib.Routing.Scheme.Name">
            <summary>
            Scheme Name
            </summary>
        </member>
        <member name="M:CatLib.Routing.Scheme.#ctor(System.String)">
            <summary>
            新建一个方案
            </summary>
            <param name="name">方案名</param>
        </member>
        <member name="M:CatLib.Routing.Scheme.AddRoute(CatLib.Routing.Route)">
            <summary>
            增加一个路由
            </summary>
            <param name="route">路由条目</param>
        </member>
        <member name="M:CatLib.Routing.Scheme.Match(CatLib.Routing.Request)">
            <summary>
            匹配一个路由
            </summary>
            <param name="request">请求</param>
            <returns>匹配到的路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Scheme.MatchAgainstRoutes(CatLib.Routing.Request)">
            <summary>
            匹配路由
            </summary>
            <param name="request">请求</param>
            <returns>匹配到的路由条目</returns>
        </member>
        <member name="T:CatLib.Routing.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.Uri.uri">
            <summary>
            原始uri
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Original">
            <summary>
            原始Uri信息
            </summary>
        </member>
        <member name="M:CatLib.Routing.Uri.#ctor(System.String)">
            <summary>
            Uri
            </summary>
            <param name="uri">uri</param>
        </member>
        <member name="M:CatLib.Routing.Uri.#ctor(System.Uri)">
            <summary>
            Uri
            </summary>
            <param name="uri">uri</param>
        </member>
        <member name="P:CatLib.Routing.Uri.FullPath">
            <summary>
            全路径(全路径不包含userinfo) eg: catlib://login/register?id=10
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.NoParamFullPath">
            <summary>
            无参的全路径 eg:catlib://login/register
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Scheme">
            <summary>
            方案 eg: catlib
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Host">
            <summary>
            host eg: login
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.UserInfo">
            <summary>
            请求中附带的用户信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Segments">
            <summary>
            片段
            </summary>
        </member>
        <member name="T:CatLib.Routing.HostValidator">
            <summary>
            Host验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.HostValidator.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.Routing.IValidators">
            <summary>
            验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.IValidators.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.Routing.UriValidator">
            <summary>
            统一资源定位符验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.UriValidator.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.BindData">
            <summary>
            服务绑定数据
            </summary>    
        </member>
        <member name="P:CatLib.BindData.Service">
            <summary>
            当前绑定服务的服务名
            </summary>
        </member>
        <member name="P:CatLib.BindData.Concrete">
            <summary>
            服务实现，执行这个委托将会获得服务实例
            </summary>
        </member>
        <member name="P:CatLib.BindData.IsStatic">
            <summary>
            当前绑定的服务是否是静态服务
            </summary>
        </member>
        <member name="F:CatLib.BindData.contextual">
            <summary>
            服务关系上下文
            当前服务需求某个服务时可以指定给与什么服务
            </summary>
        </member>
        <member name="F:CatLib.BindData.container">
            <summary>
            父级容器
            </summary>
        </member>
        <member name="F:CatLib.BindData.resolving">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="F:CatLib.BindData.release">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="F:CatLib.BindData.isDestroy">
            <summary>
            是否被释放
            </summary>
        </member>
        <member name="F:CatLib.BindData.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.BindData.given">
            <summary>
            给与数据
            </summary>
        </member>
        <member name="M:CatLib.BindData.#ctor(CatLib.Container,System.String,System.Func{CatLib.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="container">服务父级容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
        </member>
        <member name="M:CatLib.BindData.Needs(System.String)">
            <summary>
            当需求某个服务                                                                                                                                                                                                                                                                                                                                                                                  
            </summary>
            <param name="service">服务名</param>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.BindData.Needs``1">
            <summary>
            当需求某个服务
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.BindData.Alias``1">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="T">别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.BindData.Alias(System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.BindData.OnResolving(System.Func{CatLib.IBindData,System.Object,System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="func">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.BindData.OnRelease(System.Action{CatLib.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.BindData.UnBind">
            <summary>
            移除绑定服务 , 在解除绑定时如果是静态化物体将会触发释放
            </summary>
        </member>
        <member name="M:CatLib.BindData.GetContextual(System.String)">
            <summary>
            获取上下文的需求关系
            </summary>
            <param name="needs">需求的服务</param>
            <returns>给与的服务</returns>
        </member>
        <member name="M:CatLib.BindData.ExecResolvingDecorator(System.Object)">
            <summary>
            执行服务修饰器
            </summary>
            <param name="obj">服务实例</param>
            <returns>修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.BindData.ExecReleaseDecorator(System.Object)">
            <summary>
            执行服务释放处理器
            </summary>
            <param name="obj">服务实例</param>
        </member>
        <member name="M:CatLib.BindData.AddContextual(System.String,System.String)">
            <summary>
            为服务增加上下文
            </summary>
            <param name="needs">需求什么服务</param>
            <param name="given">给与什么服务</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.BindData.GuardIsDestroy">
            <summary>
            守卫是否被释放
            </summary>
        </member>
        <member name="T:CatLib.Container">
            <summary>
             依赖注入容器
             </summary>
        </member>
        <member name="F:CatLib.Container.binds">
            <summary>
            服务所绑定的相关数据，记录了服务的关系
            </summary>
        </member>
        <member name="F:CatLib.Container.instances">
            <summary>
             如果所属服务是静态的那么构建后将会储存在这里
            </summary>
        </member>
        <member name="F:CatLib.Container.aliases">
            <summary>
             服务的别名(key: 别名 , value: 映射的服务名)
            </summary>
        </member>
        <member name="F:CatLib.Container.aliasesReverse">
            <summary>
            可以通过服务的真实名字来查找别名
            </summary>
        </member>
        <member name="F:CatLib.Container.tags">
            <summary>
            服务标记，一个标记允许标记多个服务
            </summary>
        </member>
        <member name="F:CatLib.Container.resolving">
            <summary>
            服务构建时的修饰器
            </summary>
        </member>
        <member name="F:CatLib.Container.release">
            <summary>
            静态服务释放时的修饰器
            </summary>
        </member>
        <member name="F:CatLib.Container.findType">
            <summary>
            类型查询回调
            当类型无法被解决时会尝试去开发者提供的查询器中查询类型
            </summary>
        </member>
        <member name="F:CatLib.Container.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Container.injectTarget">
            <summary>
            注入目标
            </summary>
        </member>
        <member name="F:CatLib.Container.buildStack">
            <summary>
            编译堆栈
            </summary>
        </member>
        <member name="M:CatLib.Container.#ctor">
            <summary>
            构造一个容器
            </summary>
        </member>
        <member name="M:CatLib.Container.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            如果标记已经存在那么服务会被追加进列表
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名或者别名</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者<paramref name="service"/>中的元素为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
            <exception cref="T:CatLib.RuntimeException"><paramref name="tag"/>不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null（只有进行过bind才视作绑定）
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务绑定数据或者null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.HasBind(System.String)">
            <summary>
            是否已经绑定了服务（只有进行过bind才视作绑定）
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务是否被绑定</returns>
        </member>
        <member name="M:CatLib.Container.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:CatLib.Container.Alias(System.String,System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
            <exception cref="T:CatLib.RuntimeException"><paramref name="alias"/>别名冲突或者<paramref name="service"/>的绑定与实例都不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="alias"/>,<paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.BindIf(System.String,System.Func{CatLib.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Container.BindIf(System.String,System.Type,System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Container.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.Bind(System.String,System.Func{CatLib.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:CatLib.RuntimeException"><paramref name="service"/>绑定冲突</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c></exception>
        </member>
        <member name="M:CatLib.Container.Call(System.Object,System.String,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="method">方法名</param>
            <param name="param">附加的参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>,<paramref name="method"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Container.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="param">方法参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>,<paramref name="methodInfo"/>为<c>null</c></exception>
        </member>
        <member name="M:CatLib.Container.MakeWith(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="param">构造参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:CatLib.RuntimeException">出现循环依赖</exception>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:CatLib.Container.Make(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:CatLib.RuntimeException">出现循环依赖</exception>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="P:CatLib.Container.Item(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:CatLib.Container.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <param name="service">服务名或别名</param>
            <param name="instance">服务实例，<c>null</c>也是合法的实例值</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:CatLib.RuntimeException"><paramref name="service"/>的服务在绑定设置中不是静态的</exception>
        </member>
        <member name="M:CatLib.Container.Release(System.String)">
            <summary>
            释放静态化实例
            </summary>
            <param name="service">服务名或别名</param>
        </member>
        <member name="M:CatLib.Container.Flush">
            <summary>
            清空容器的所有实例，绑定，别名，标签，解决器
            </summary>
        </member>
        <member name="M:CatLib.Container.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="finder">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Container.OnRelease(System.Action{CatLib.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Container.OnResolving(System.Func{CatLib.IBindData,System.Object,System.Object})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="func">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:CatLib.Container.UnBind(System.String)">
            <summary>
            解除绑定服务
            </summary>
            <param name="service">服务名或者别名</param>
        </member>
        <member name="M:CatLib.Container.Type2Service(System.Type)">
            <summary>
            将类型转为服务名
            </summary>
            <param name="type">类型</param>
            <returns>服务名</returns>
        </member>
        <member name="M:CatLib.Container.ExecOnResolvingDecorator(CatLib.IBindData,System.Object)">
            <summary>
            执行全局解决修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="obj">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.Container.ExecOnReleaseDecorator(CatLib.IBindData,System.Object)">
            <summary>
            执行全局释放修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="obj">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.Container.BuildMake(System.String,System.Type,System.Boolean,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="makeService">服务名</param>
            <param name="makeServiceType">服务类型</param>
            <param name="isFromMake">是否直接调用自Make函数</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Container.BuildUseConcrete(CatLib.BindData,System.Type,System.Object[])">
            <summary>
            常规编译一个服务
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Container.Build(CatLib.BindData,System.Type,System.Object[])">
            <summary>
            构造服务 - 实现
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Container.Normalize(System.String)">
            <summary>
            标准化服务名
            </summary>
            <param name="service">服务名</param>
            <returns>标准化后的服务名</returns>
        </member>
        <member name="M:CatLib.Container.AttrInject(CatLib.BindData,System.Object)">
            <summary>
            属性注入
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceInstance">服务实例</param>
            <returns>服务实例</returns>
            <exception cref="T:CatLib.RuntimeException">属性是必须的或者注入类型和需求类型不一致</exception>
        </member>
        <member name="M:CatLib.Container.ResolveNonClassAttr(CatLib.BindData,System.String)">
            <summary>
            解决非类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望构造的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Container.ResloveClassAttr(CatLib.BindData,System.String)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望构造的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Container.GetDependencies(CatLib.BindData,System.Collections.Generic.IList{System.Reflection.ParameterInfo},System.Collections.Generic.IList{System.Object})">
            <summary>
            获取依赖解决结果
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="paramInfo">服务实例的参数信息</param>
            <param name="param">输入的构造参数列表</param>
            <returns>服务所需参数的解决结果</returns>
            <exception cref="T:CatLib.RuntimeException">生成的实例类型和需求类型不一致</exception>
        </member>
        <member name="M:CatLib.Container.ResolveNonClass(CatLib.BindData,System.String)">
            <summary>
            解决非类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Container.ResloveClass(CatLib.BindData,System.String)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Container.AliasToService(System.String)">
            <summary>
            获取别名最终对应的服务名
            </summary>
            <param name="service">服务名或别名</param>
            <returns>最终映射的服务名</returns>
        </member>
        <member name="M:CatLib.Container.GetBindData(System.String)">
            <summary>
            获取服务绑定数据(与GetBind的区别是永远不会为null)
            </summary>
            <param name="service">服务名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Container.MakeEmptyBindData(System.String)">
            <summary>
            制作一个空的绑定数据
            </summary>
            <param name="service">服务名</param>
            <returns>空绑定数据</returns>
        </member>
        <member name="M:CatLib.Container.GetType(System.String)">
            <summary>
            获取类型映射
            </summary>
            <param name="service">服务名</param>
            <returns>服务类型</returns>
        </member>
        <member name="T:CatLib.GivenData">
            <summary>
            绑定关系临时数据,用于支持链式调用
            </summary>
        </member>
        <member name="F:CatLib.GivenData.bindData">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:CatLib.GivenData.container">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="F:CatLib.GivenData.needs">
            <summary>
            需求什么服务
            </summary>
        </member>
        <member name="M:CatLib.GivenData.#ctor(CatLib.Container,CatLib.BindData)">
            <summary>
            绑定关系临时数据
            </summary>
            <param name="container">服务容器</param>
            <param name="bindData">服务绑定数据</param>
        </member>
        <member name="M:CatLib.GivenData.Needs(System.String)">
            <summary>
            需求什么服务
            </summary>
            <param name="needs">需求什么服务</param>
            <returns>绑定关系实例</returns>
        </member>
        <member name="M:CatLib.GivenData.Given(System.String)">
            <summary>
            给与什么服务
            </summary>
            <param name="service">给与的服务名或别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.GivenData.Given``1">
            <summary>
            给与什么服务
            </summary>
            <typeparam name="T">给与的服务名或别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:CatLib.Application">
            <summary>
            CatLib程序
            </summary>
        </member>
        <member name="F:CatLib.Application.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:CatLib.Application.StartProcess">
            <summary>
            框架启动流程
            </summary>
        </member>
        <member name="F:CatLib.Application.StartProcess.Construct">
            <summary>
            构建阶段
            </summary>
        </member>
        <member name="F:CatLib.Application.StartProcess.Bootstrap">
            <summary>
            引导流程
            </summary>
        </member>
        <member name="F:CatLib.Application.StartProcess.Bootstraped">
            <summary>
            引导流程结束
            </summary>
        </member>
        <member name="F:CatLib.Application.StartProcess.Initing">
            <summary>
            初始化中
            </summary>
        </member>
        <member name="F:CatLib.Application.StartProcess.Inited">
            <summary>
            初始化完成
            </summary>
        </member>
        <member name="F:CatLib.Application.serviceProviders">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="F:CatLib.Application.serviceProviderTypes">
            <summary>
            注册服务提供者
            </summary>
        </member>
        <member name="F:CatLib.Application.bootstrapped">
            <summary>
            是否已经完成引导程序
            </summary>
        </member>
        <member name="F:CatLib.Application.inited">
            <summary>
            是否已经完成初始化
            </summary>
        </member>
        <member name="F:CatLib.Application.process">
            <summary>
            启动流程
            </summary>
        </member>
        <member name="P:CatLib.Application.Process">
            <summary>
            启动流程
            </summary>
        </member>
        <member name="F:CatLib.Application.incrementId">
            <summary>
            增量Id
            </summary>
        </member>
        <member name="F:CatLib.Application.mainThreadId">
            <summary>
            主线程ID
            </summary>
        </member>
        <member name="P:CatLib.Application.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="F:CatLib.Application.dispatcher">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:CatLib.Application.Dispatcher">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="M:CatLib.Application.#ctor">
            <summary>
            构建一个CatLib实例
            </summary>
        </member>
        <member name="M:CatLib.Application.Bootstrap(CatLib.IBootstrap[])">
            <summary>
            引导程序
            </summary>
            <param name="bootstraps">引导程序</param>
            <returns>CatLib实例</returns>
            <exception cref="T:System.ArgumentNullException">当引导类型为null时引发</exception>
        </member>
        <member name="M:CatLib.Application.Init">
            <summary>
            初始化
            </summary>
            <exception cref="T:CatLib.RuntimeException">没有调用<c>Bootstrap(...)</c>就尝试初始化时触发</exception>
        </member>
        <member name="M:CatLib.Application.Register(CatLib.IServiceProvider)">
            <summary>
            注册服务提供者
            </summary>
            <param name="provider">注册服务提供者</param>
            <exception cref="T:CatLib.RuntimeException">服务提供者被重复注册时触发</exception>
        </member>
        <member name="M:CatLib.Application.IsRegisted(CatLib.IServiceProvider)">
            <summary>
            服务提供者是否已经注册过
            </summary>
            <param name="provider">服务提供者</param>
            <returns>服务提供者是否已经注册过</returns>
        </member>
        <member name="M:CatLib.Application.GetRuntimeId">
            <summary>
            获取运行时唯一Id
            </summary>
            <returns>应用程序内唯一id</returns>
        </member>
        <member name="M:CatLib.Application.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级
            </summary>
            <param name="type">识别的类型</param>
            <param name="method">识别的方法</param>
            <returns>优先级</returns>
        </member>
        <member name="M:CatLib.Application.Trigger(System.String,System.Object)">
            <summary>
            触发一个事件,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payload">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:CatLib.Application.TriggerHalt(System.String,System.Object)">
            <summary>
            触发一个事件,遇到第一个事件存在处理结果后终止,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名</param>
            <param name="payload">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:CatLib.Application.On(System.String,System.Action{System.Object},System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.Application.On(System.String,System.Func{System.Object,System.Object},System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="P:CatLib.Application.Version">
            <summary>
            CatLib版本(遵循semver)
            </summary>
        </member>
        <member name="M:CatLib.Application.Compare(System.Int32,System.Int32,System.Int32)">
            <summary>
            比较CatLib版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="revised">修订版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:CatLib.Application.Compare(System.String)">
            <summary>
            比较CatLib版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="version">版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:CatLib.Application.GetProviderBaseType(CatLib.IServiceProvider)">
            <summary>
            获取服务提供者基础类型
            </summary>
            <param name="provider">服务提供者</param>
            <returns>基础类型</returns>
        </member>
        <member name="M:CatLib.Application.RegisterCoreAlias">
            <summary>
            注册核心别名
            </summary>
        </member>
        <member name="M:CatLib.Application.GuardDispatcher">
            <summary>
            验证调度器是否有效
            </summary>
        </member>
        <member name="T:CatLib.FilterChain`1">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
        </member>
        <member name="F:CatLib.FilterChain`1.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.FilterChain`1.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.FilterChain`1.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`1.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`1.Add(System.Action{`0,System.Action{`0}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.FilterChain`1.Do(`0,System.Action{`0})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.FilterChain`1.Next(System.Action{`0})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.FilterChain`2">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
        </member>
        <member name="F:CatLib.FilterChain`2.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.FilterChain`2.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.FilterChain`2.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`2.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`2.Add(System.Action{`0,`1,System.Action{`0,`1}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.FilterChain`2.Do(`0,`1,System.Action{`0,`1})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.FilterChain`2.Next(System.Action{`0,`1})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.FilterChain`3">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
            <typeparam name="TException">输入异常</typeparam>
        </member>
        <member name="F:CatLib.FilterChain`3.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.FilterChain`3.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.FilterChain`3.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`3.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.FilterChain`3.Add(System.Action{`0,`1,`2,System.Action{`0,`1,`2}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.FilterChain`3.Do(`0,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.FilterChain`3.Next(System.Action{`0,`1,`2})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.Guard">
            <summary>
            守卫
            </summary>
        </member>
        <member name="M:CatLib.Guard.Requires``1(System.Boolean)">
            <summary>
            验证一个条件,并在该协定的条件失败时引发异常。
            </summary>
            <typeparam name="TException">异常</typeparam>
            <param name="condition">条件</param>
        </member>
        <member name="M:CatLib.Guard.NotEmptyOrNull(System.String,System.String)">
            <summary>
            不为空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Guard.CountGreaterZero``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            长度大于0
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Guard.ElementNotEmptyOrNull(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            元素部位空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Guard.NotNull(System.Object,System.String)">
            <summary>
            内容不为空
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="T:CatLib.CacheNode`2">
            <summary>
            缓存节点
            </summary>
        </member>
        <member name="P:CatLib.CacheNode`2.KeyValue">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:CatLib.CacheNode`2.Backward">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:CatLib.CacheNode`2.Forward">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:CatLib.CacheNode`2.#ctor(`0,`1)">
            <summary>
            创建一个缓存节点
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
        </member>
        <member name="M:CatLib.CacheNode`2.Replace(`1)">
            <summary>
            替换元素
            </summary>
            <param name="val">值</param>
        </member>
        <member name="T:CatLib.LruCache`2">
            <summary>
            近期最少使用缓存
            </summary>
        </member>
        <member name="F:CatLib.LruCache`2.maxCapacity">
            <summary>
            最大容量
            </summary>
        </member>
        <member name="F:CatLib.LruCache`2.lruCache">
            <summary>
            Lru Cache
            </summary>
        </member>
        <member name="F:CatLib.LruCache`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:CatLib.LruCache`2.tail">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="T:CatLib.LruCache`2.Enumerator">
            <summary>
            近期最少使用缓存迭代器
            </summary>
        </member>
        <member name="F:CatLib.LruCache`2.Enumerator.lruCache">
            <summary>
            近期最少使用缓存
            </summary>
        </member>
        <member name="M:CatLib.LruCache`2.Enumerator.#ctor(CatLib.LruCache{`0,`1})">
            <summary>
            构造一个迭代器
            </summary>
            <param name="lruCache">近期最少使用缓存</param>
        </member>
        <member name="M:CatLib.LruCache`2.Enumerator.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>元素迭代器</returns>
        </member>
        <member name="M:CatLib.LruCache`2.Enumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.LruCache`2.#ctor(System.Int32)">
            <summary>
            创建一个Lru缓存
            </summary>
        </member>
        <member name="M:CatLib.LruCache`2.Add(`0,`1)">
            <summary>
            在lru缓存中增加一个元素,如果元素已经存在则会替换元素
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:CatLib.LruCache`2.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:CatLib.LruCache`2.Get(`0,`1)">
            <summary>
            根据key获取val，如果被淘汰则返回传入的默认值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认返回值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.LruCache`2.Get(`0,`1@,`1)">
            <summary>
            根据key获取val，如果被淘汰则返回传入的默认值
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
            <param name="defaultVal">默认值</param>
            <returns>是否获取</returns>
        </member>
        <member name="P:CatLib.LruCache`2.Count">
            <summary>
            获取Lru缓存中的元素数量
            </summary>
        </member>
        <member name="P:CatLib.LruCache`2.Item(`0)">
            <summary>
            根据key获取val，如果被淘汰则返回默认值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.LruCache`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.LruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.LruCache`2.RemoveLeastUsed">
            <summary>
            移除最后一个元素
            </summary>
        </member>
        <member name="M:CatLib.LruCache`2.MakeUsed(CatLib.CacheNode{`0,`1})">
            <summary>
            激活指定节点为最近使用
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="T:CatLib.InternalList`1">
            <summary>
            内部列表
            </summary>
        </member>
        <member name="F:CatLib.InternalList`1.items">
            <summary>
            列表元素
            </summary>
        </member>
        <member name="P:CatLib.InternalList`1.Count">
            <summary>
            实际元素个数
            </summary>
        </member>
        <member name="P:CatLib.InternalList`1.IsDelete">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="M:CatLib.InternalList`1.#ctor(System.Int32)">
            <summary>
            新建一个内部列表
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="P:CatLib.InternalList`1.Item(System.Int32)">
            <summary>
            获取或者设定一个元素
            </summary>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.InternalList`1.InsertAt(`0,System.Int32)">
            <summary>
            在指定位置插入元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.InternalList`1.RemoveAt(System.Int32)">
            <summary>
            移除元素
            </summary>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.InternalList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            移除范围内的元素
            </summary>
            <param name="start">起始范围(包含)</param>
            <param name="end">结束范围(包含)</param>
        </member>
        <member name="M:CatLib.InternalList`1.ReplaceAt(`0,System.Int32)">
            <summary>
            替换指定位置的元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.InternalList`1.Init(`0[])">
            <summary>
            合入元素
            </summary>
            <param name="elements">元素</param>
        </member>
        <member name="M:CatLib.InternalList`1.Merge(CatLib.InternalList{`0},System.Boolean)">
            <summary>
            合并内部列表
            </summary>
            <param name="join">需要被合并进来的内部列表</param>
            <param name="after">是否在当前列表元素的尾部合入</param>
        </member>
        <member name="M:CatLib.InternalList`1.Split(System.Int32,System.Boolean)">
            <summary>
            拆分列表
            </summary>
            <param name="offset">偏移量</param>
            <param name="after">是否是后拆</param>
        </member>
        <member name="M:CatLib.InternalList`1.Push(`0)">
            <summary>
            在尾部推入元素
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.InternalList`1.Pop">
            <summary>
            弹出尾部数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.InternalList`1.UnShift(`0)">
            <summary>
            在列表头部加入元素
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CatLib.InternalList`1.Shift">
            <summary>
            推出列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="T:CatLib.QuickList`1">
            <summary>
            快速列表
            </summary>
            <typeparam name="TElement">元素</typeparam>
        </member>
        <member name="F:CatLib.QuickList`1.MergeCoefficient">
            <summary>
            合并系数
            </summary>
        </member>
        <member name="T:CatLib.QuickList`1.QuickListNode">
            <summary>
            快速列表结点
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.QuickListNode.Backward">
            <summary>
            后置结点
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.QuickListNode.Forward">
            <summary>
            前置结点
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.QuickListNode.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="T:CatLib.QuickList`1.Enumerator">
            <summary>
            快速列表迭代器
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.quickList">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.current">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.node">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.Enumerator.index">
            <summary>
            访问下标
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.Enumerator.#ctor(CatLib.QuickList{`0},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="quickList"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CatLib.QuickList`1.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:CatLib.QuickList`1.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:CatLib.QuickList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.fill">
            <summary>
            每个快速列表结点最多的元素数量
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.header">
            <summary>
            列表头
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.tail">
            <summary>
            列表尾
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:CatLib.QuickList`1.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:CatLib.QuickList`1.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:CatLib.QuickList`1.Count">
            <summary>
            列表元素基数
            </summary>
        </member>
        <member name="P:CatLib.QuickList`1.Length">
            <summary>
            快速列表中的结点数量
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.#ctor(System.Int32)">
            <summary>
            快速列表
            </summary>
            <param name="fill">每个结点中元素的最大数量</param>
        </member>
        <member name="M:CatLib.QuickList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:CatLib.QuickList`1.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:CatLib.QuickList`1.Add(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.QuickList`1.Push(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.QuickList`1.UnShift(`0)">
            <summary>
            将元素插入到列表头部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.QuickList`1.Pop">
            <summary>
            移除并返回列表的尾部元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.QuickList`1.Shift">
            <summary>
            移除并返回列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.QuickList`1.Trim(System.Int32,System.Int32)">
            <summary>
            对列表进行修剪，只保留下标范围内的元素
            </summary>
            <param name="start">起始下标(包含)</param>
            <param name="end">结束下标(包含)</param>
            <returns>移除的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>或者<paramref name="start"/>小于0时引发</exception>
        </member>
        <member name="M:CatLib.QuickList`1.Remove(`0,System.Int32)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="element"/> 相等的元素。
            <para><c>count &gt; 0</c> : 从表头开始向表尾搜索，移除与 <paramref name="element"/> 相等的元素，数量为 <paramref name="count"/>。</para>
            <para><c>count &lt; 0</c> : 从表尾开始向表头搜索，移除与 <paramref name="element"/> 相等的元素，数量为绝对值 <paramref name="count"/>。</para>
            <para><c>count = 0</c> : 移除表中所有与 <paramref name="element"/> 相等的元素。</para>
            </summary>
            <param name="element">要被移除的元素</param>
            <param name="count">移除的元素数量，使用正负来决定扫描起始位置，如果<paramref name="count"/>为0则全部匹配的元素，反之移除指定数量。</param>
            <returns>被移除元素的数量</returns>
        </member>
        <member name="M:CatLib.QuickList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            获取区间内的所有元素,1个元素占1个位置
            </summary>
            <param name="start">起始位置(包含)</param>
            <param name="end">结束位置(包含)</param>
            <returns>区间内的元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>时引发</exception>
        </member>
        <member name="P:CatLib.QuickList`1.Item(System.Int32)">
            <summary>
            通过下标访问元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标，允许为负数</param>
            <returns>元素</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">下标越界时会引发</exception>
        </member>
        <member name="M:CatLib.QuickList`1.InsertAfter(`0,`0)">
            <summary>
            在指定元素之后插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.QuickList`1.InsertBefore(`0,`0)">
            <summary>
            在指定元素之前插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.QuickList`1.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个列表)
            </summary>
        </member>
        <member name="M:CatLib.QuickList`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.QuickList`1.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.QuickList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.QuickList`1.FindByIndex(System.Int32,System.Int32@)">
            <summary>
            根据下标查找元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标</param>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.QuickList`1.Insert(`0,CatLib.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            插入元素
            </summary>
            <param name="insert">被插入的元素</param>
            <param name="after">是否在被查找的元素之后插入</param>
            <param name="node">需要插入的结点</param>
            <param name="offset">结点相对偏移量</param>
        </member>
        <member name="M:CatLib.QuickList`1.AttemptMergeNode(CatLib.QuickList{`0}.QuickListNode)">
            <summary>
            尝试合并结点
            </summary>
            <param name="node">发起合并的结点</param>
        </member>
        <member name="M:CatLib.QuickList`1.MergeNode(CatLib.QuickList{`0}.QuickListNode,CatLib.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            将从结点合并进主节点
            </summary>
            <param name="master">主结点</param>
            <param name="slave">从结点</param>
            <param name="after">从结点将怎么合并</param>
        </member>
        <member name="M:CatLib.QuickList`1.AllowMerge(CatLib.QuickList{`0}.QuickListNode,CatLib.QuickList{`0}.QuickListNode)">
            <summary>
            是否允许进行合并
            </summary>
            <param name="a">结点</param>
            <param name="b">结点</param>
            <returns>是否可以合并</returns>
        </member>
        <member name="M:CatLib.QuickList`1.SplitNode(CatLib.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            拆分结点
            </summary>
            <param name="node">要被拆分的结点</param>
            <param name="offset">拆分偏移量</param>
            <param name="after">前拆将会将offset之前的元素作为返回结点，后拆分则会将offset之后的元素作为返回结点</param>
            <returns>拆分出的结点</returns>
        </member>
        <member name="M:CatLib.QuickList`1.FindNode(`0,System.Int32@)">
            <summary>
            查找元素所在结点
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
            <returns>所在结点，如果找不到结点则返回null</returns>
        </member>
        <member name="M:CatLib.QuickList`1.ListPop(CatLib.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            列表弹出数据
            </summary>
            <param name="node">结点</param>
            <param name="head">是否是头部</param>
        </member>
        <member name="M:CatLib.QuickList`1.DeleteNode(CatLib.QuickList{`0}.QuickListNode)">
            <summary>
            删除结点
            </summary>
            <param name="node">结点</param>
        </member>
        <member name="M:CatLib.QuickList`1.InsertNode(CatLib.QuickList{`0}.QuickListNode,CatLib.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            插入结点
            </summary>
            <param name="oldNode">旧的结点</param>
            <param name="newNode">新的结点</param>
            <param name="after">在旧的结点之前还是之后</param>
        </member>
        <member name="M:CatLib.QuickList`1.MakeNode">
            <summary>
            创建结点
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.QuickList`1.AllowInsert(CatLib.QuickList{`0}.QuickListNode)">
            <summary>
            快速列表结点是否允许插入
            </summary>
            <param name="node">结点</param>
            <returns>是否可以插入</returns>
        </member>
        <member name="T:CatLib.SortSet`2">
            <summary>
            有序集
            有序集使用分数进行排序(以小到大)
            </summary>
        </member>
        <member name="T:CatLib.SortSet`2.SkipNode">
            <summary>
            跳跃结点
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.SkipNodeLevel.Forward">
            <summary>
            前一个结点
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.SkipNodeLevel.Span">
            <summary>
            层跨越的结点数量
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.Element">
            <summary>
            元素
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.Score">
            <summary>
            分数
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.IsDeleted">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.Backward">
            <summary>
            向后的结点
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.SkipNode.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="T:CatLib.SortSet`2.Enumerator">
            <summary>
            有序集迭代器
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.Enumerator.sortSet">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.Enumerator.current">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.Enumerator.#ctor(CatLib.SortSet{`0,`1},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="sortSet">有序集</param>
            <param name="forward">是否向前遍历</param>
        </member>
        <member name="M:CatLib.SortSet`2.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:CatLib.SortSet`2.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:CatLib.SortSet`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.maxLevel">
            <summary>
            最大层数
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.level">
            <summary>
            当前拥有的层
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.header">
            <summary>
            跳跃表头结点
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.tail">
            <summary>
            尾部结点
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.probability">
            <summary>
            可能出现层数的概率
            </summary>
        </member>
        <member name="F:CatLib.SortSet`2.random">
            <summary>
            随机数发生器
            </summary>
        </member>
        <member name="P:CatLib.SortSet`2.Count">
            <summary>
            有序集的基数
            </summary>
        </member>
        <member name="P:CatLib.SortSet`2.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.#ctor(System.Double,System.Int32)">
            <summary>
            创建一个有序集
            </summary>
            <param name="probable">可能出现层数的概率系数(0-1之间的数)</param>
            <param name="maxLevel">最大层数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probable"/>或<paramref name="maxLevel"/>不是有效值时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.Clear">
            <summary>
            清空SortSet
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:CatLib.SortSet`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.SortSet`2.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.SortSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.SortSet`2.ToArray">
            <summary>
            转为数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:CatLib.SortSet`2.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.Shift">
            <summary>
            移除并返回有序集头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.Pop">
            <summary>
            移除并返回有序集尾部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="P:CatLib.SortSet`2.Item(System.Int32)">
            <summary>
            获取指定排名的元素(有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>指定的元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.Add(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>或<paramref name="score"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="element">元素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetScore(`0)">
            <summary>
            返回有序集的分数
            </summary>
            <param name="element">元素</param>
            <returns>分数，如果元素不存在则引发异常</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="element"/>不存在时引发</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetRangeCount(`1,`1)">
            <summary>
            获取分数范围内的元素个数
            </summary>
            <param name="start">起始值(包含)</param>
            <param name="end">结束值(包含)</param>
            <returns>分数值在<paramref name="start"/>(包含)和<paramref name="end"/>(包含)之间的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>和<paramref name="end"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.Remove(`0)">
            <summary>
            从有序集中删除元素，如果元素不存在返回false
            </summary>
            <param name="element">元素</param>
            <returns>是否成功</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.RemoveRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间移除区间内的元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            根据分数区间移除区间内的元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetRank(`0)">
            <summary>
            获取排名 , 有序集成员按照Score从小到大排序
            </summary>
            <param name="element">元素</param>
            <returns>排名排名以0为底，为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetRevRank(`0)">
            <summary>
            获取排名，有序集成员按照Score从大到小排序
            </summary>
            <param name="element"></param>
            <returns>排名排名以0为底 , 为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetElementRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间获取区间内的所有元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            根据分数区间获取区间内的所有元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.SortSet`2.GetElementByRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.GetElementByRevRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从大到小排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.AddElement(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
        </member>
        <member name="M:CatLib.SortSet`2.Remove(CatLib.SortSet{`0,`1}.SkipNode,`0@)">
            <summary>
            移除元素
            </summary>
            <param name="node">节点</param>
            <param name="element">元素</param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:CatLib.SortSet`2.Remove(`0,`1)">
            <summary>
            如果元素存在那么从有序集中删除元素
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CatLib.SortSet`2.GetRank(`0,`1)">
            <summary>
            获取元素排名
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>排名，排名以0为底</returns>
        </member>
        <member name="M:CatLib.SortSet`2.DeleteNode(CatLib.SortSet{`0,`1}.SkipNode,CatLib.SortSet{`0,`1}.SkipNode[])">
            <summary>
            删除结点关系
            </summary>
            <param name="cursor">结点</param>
            <param name="update">更新结点列表</param>
        </member>
        <member name="M:CatLib.SortSet`2.GetRandomLevel">
            <summary>
            获取随机层
            </summary>
            <returns>随机的层数</returns>
        </member>
        <member name="T:CatLib.Manager`1">
            <summary>
            管理器模版
            </summary>
        </member>
        <member name="F:CatLib.Manager`1.customResolve">
            <summary>
            自定义解决器
            </summary>
        </member>
        <member name="F:CatLib.Manager`1.defaultName">
            <summary>
            默认名字
            </summary>
        </member>
        <member name="M:CatLib.Manager`1.Get(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="P:CatLib.Manager`1.Item(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="M:CatLib.Manager`1.Extend(System.Func{`0},System.String)">
            <summary>
            自定义解决方案
            </summary>
            <param name="resolve">解决方案</param>
            <param name="name">名字</param>
        </member>
        <member name="M:CatLib.Manager`1.GetDefaultName">
            <summary>
            获取默认名字
            </summary>
            <returns>默认名字</returns>
        </member>
        <member name="M:CatLib.Manager`1.GetResolve(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">名字</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Manager`1.Resolve(System.String)">
            <summary>
            生成所需求的解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="T:CatLib.SingleManager`1">
            <summary>
            管理器模版（拓展解决方案为单例）
            </summary>
        </member>
        <member name="F:CatLib.SingleManager`1.elements">
            <summary>
            解决方案字典
            </summary>
        </member>
        <member name="M:CatLib.SingleManager`1.Get(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="P:CatLib.SingleManager`1.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:CatLib.SingleManager`1.Item(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="M:CatLib.SingleManager`1.Release(System.String)">
            <summary>
            释放解决方案
            </summary>
            <param name="name">解决方案名</param>
        </member>
        <member name="M:CatLib.SingleManager`1.Make(System.String)">
            <summary>
            生成解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案实现</returns>
        </member>
        <member name="T:CatLib.Str">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:CatLib.Str.Is(System.String,System.String)">
            <summary>
            判断是否属于(允许使用信号通配表达式)
            </summary>
            <param name="pattern">比较字符串</param>
            <param name="value">输入字符串</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:CatLib.Str.AsteriskWildcard(System.String)">
            <summary>
            将语句翻译为星号通配表达式(即删减正则表达式中除了星号外的所有功能)
            </summary>
            <param name="pattern">输入</param>
            <returns>输出</returns>
        </member>
        <member name="M:CatLib.Str.RegexQuote(System.String)">
            <summary>
            转义正则表达式
            </summary>
            <param name="str">输入</param>
            <returns>输出</returns>
        </member>
        <member name="T:CatLib.Util">
            <summary>
            通用支持
            </summary>
        </member>
        <member name="M:CatLib.Util.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级
            </summary>
            <param name="type">识别的类型</param>
            <param name="method">识别的方法</param>
            <returns>优先级</returns>
        </member>
        <member name="T:CatLib.Translation.ISelector">
            <summary>
            选择器
            </summary>
        </member>
        <member name="M:CatLib.Translation.ISelector.Choose(System.String,System.Int32,System.String)">
            <summary>
            对翻译进行处理
            </summary>
            <param name="line">语言字符串</param>
            <param name="number">数量</param>
            <param name="locale">语言</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="T:CatLib.Translation.Selector">
            <summary>
            选择器
            </summary>
        </member>
        <member name="F:CatLib.Translation.Selector.StripMatchStr">
            <summary>
            区间匹配表达式
            </summary>
        </member>
        <member name="F:CatLib.Translation.Selector.extractReg">
            <summary>
            展开处理匹配式
            </summary>
        </member>
        <member name="M:CatLib.Translation.Selector.Choose(System.String,System.Int32,System.String)">
            <summary>
            对翻译进行处理
            </summary>
            <param name="line">语言字符串</param>
            <param name="number">数量</param>
            <param name="locale">语言</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:CatLib.Translation.Selector.Extract(System.String[],System.Int32)">
            <summary>
            处理
            </summary>
            <param name="segments">片段</param>
            <param name="number">数字</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CatLib.Translation.Selector.RangeExtract(System.String,System.Int32)">
            <summary>
            范围处理
            </summary>
            <param name="parts">单片段</param>
            <param name="number">数字</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Translation.Selector.StripConditions(System.String[])">
            <summary>
            过滤未被处理的片段
            </summary>
            <param name="segments">片段</param>
            <returns>处理后的结果</returns>
        </member>
        <member name="M:CatLib.Translation.Selector.GetPluralIndex(System.String,System.Int32)">
            <summary>
            获取语言的复数形式
            
            语言复数形式规则来自于：Zend Framework
            The plural rules are derived from code of the Zend Framework (2010-09-25), which
            is subject to the new BSD license(http://framework.zend.com/license/new-bsd)
            Copyright (c) 2005-2010 - Zend Technologies USA Inc. (http://www.zend.com)
            </summary>
            <param name="locale">语言</param>
            <param name="number">数量</param>
            <returns>复数形式</returns>
        </member>
        <member name="T:CatLib.Translation.TranslationProvider">
            <summary>
            国际化服务提供者
            </summary>
        </member>
        <member name="F:CatLib.Translation.TranslationProvider.DefaultLanguage">
            <summary>
            默认语言
            </summary>
        </member>
        <member name="F:CatLib.Translation.TranslationProvider.FallbackLanguage">
            <summary>
            备选语言
            </summary>
        </member>
        <member name="M:CatLib.Translation.TranslationProvider.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:CatLib.Translation.TranslationProvider.Register">
            <summary>
            当注册国际化服务时
            </summary>
        </member>
        <member name="T:CatLib.Translation.Translator">
            <summary>
            国际化(I18N)
            语言代码使用 ISO 639, ISO 639-1, ISO 639-2, ISO 639-3 标准
            </summary>
        </member>
        <member name="F:CatLib.Translation.Translator.selector">
            <summary>
            消息选择器
            </summary>
        </member>
        <member name="F:CatLib.Translation.Translator.locale">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="F:CatLib.Translation.Translator.fallback">
            <summary>
            备选语言
            </summary>
        </member>
        <member name="F:CatLib.Translation.Translator.resources">
            <summary>
            翻译翻译资源
            </summary>
        </member>
        <member name="M:CatLib.Translation.Translator.SetResources(CatLib.API.Translation.ITranslateResources)">
            <summary>
            设定翻译资源
            </summary>
            <param name="map">映射</param>
        </member>
        <member name="M:CatLib.Translation.Translator.SetFallback(System.String)">
            <summary>
            设定替补语言
            </summary>
            <param name="fallback">替补语言</param>
        </member>
        <member name="M:CatLib.Translation.Translator.SetSelector(CatLib.Translation.ISelector)">
            <summary>
            设定消息选择器
            </summary>
            <param name="selector">选择器</param>
        </member>
        <member name="M:CatLib.Translation.Translator.GetBy(System.String,System.Int32,System.String[],System.String[])">
            <summary>
            依次遍历给定的语言获取翻译,翻译根据传入数量使用指定复数形式,如果都没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="number">数量</param>
            <param name="locales">遍历的语言</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译后的内容</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.GetBy(System.String,System.String[],System.String[])">
            <summary>
            依次遍历给定的语言获取翻译,如果都没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="locales">多语言</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译的内容</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.GetBy(System.String,System.Int32,System.String,System.String[])">
            <summary>
            从指定的语言获取翻译,翻译根据传入数量使用指定复数形式,如果没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="number">语言</param>
            <param name="locale">指定语言</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译后的内容</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.GetBy(System.String,System.String,System.String[])">
            <summary>
            从指定的语言获取翻译,如果没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="locale">语言</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译的内容</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.Get(System.String,System.String[])">
            <summary>
            在当前语言环境下翻译内容，如果没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译的值</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.Get(System.String,System.Int32,System.String[])">
            <summary>
            在当前语言环境下翻译带有数量的内容，如果没有命中则使用替补语言
            </summary>
            <param name="key">键</param>
            <param name="number">数值</param>
            <param name="replace">替换翻译内容的占位符</param>
            <returns>翻译的值</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.GetLocale">
            <summary>
            获取当前语言环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Translation.Translator.SetLocale(System.String)">
            <summary>
            设定当前语言环境
            </summary>
            <param name="locale">设定默认本地语言(语言代码使用 ISO 639, ISO 639-1, ISO 639-2, ISO 639-3 标准)</param>
        </member>
        <member name="M:CatLib.Translation.Translator.Choice(System.String,System.Int32,System.String,System.String[])">
            <summary>
            选择性翻译（选择合适的复数形式进行翻译）
            </summary>
            <param name="key">键</param>
            <param name="number">值</param>
            <param name="locale">语言</param>
            <param name="replace">替换的内容</param>
            <returns>翻译的值</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.GetLine(System.String,System.String,System.String[])">
            <summary>
            获取一行数据
            </summary>
            <param name="key">键</param>
            <param name="locale">当前语言</param>
            <param name="replace">替换的值</param>
            <returns>翻译的值</returns>
        </member>
        <member name="M:CatLib.Translation.Translator.MakeReplacements(System.String,System.String[])">
            <summary>
            替换内容
            </summary>
            <param name="line">字符串</param>
            <param name="replace">替换的内容</param>
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
